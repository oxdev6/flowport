{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "rewrites": {
    "beforeFiles": [],
    "afterFiles": [],
    "fallback": []
  },
  "dynamicRoutes": [
    {
      "page": "/api/compare/[txHash]",
      "regex": "^/api/compare/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPtxHash": "nxtPtxHash"
      },
      "namedRegex": "^/api/compare/(?<nxtPtxHash>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/graph/[chainId]/[txHash]",
      "regex": "^/api/graph/([^/]+?)/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPchainId": "nxtPchainId",
        "nxtPtxHash": "nxtPtxHash"
      },
      "namedRegex": "^/api/graph/(?<nxtPchainId>[^/]+?)/(?<nxtPtxHash>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/replay/[chainId]/[txHash]",
      "regex": "^/api/replay/([^/]+?)/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPchainId": "nxtPchainId",
        "nxtPtxHash": "nxtPtxHash"
      },
      "namedRegex": "^/api/replay/(?<nxtPchainId>[^/]+?)/(?<nxtPtxHash>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/reports/[id]",
      "regex": "^/api/reports/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/reports/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/share/snapshot/[id]",
      "regex": "^/api/share/snapshot/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/share/snapshot/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/trace/[chainId]/[txHash]",
      "regex": "^/api/trace/([^/]+?)/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPchainId": "nxtPchainId",
        "nxtPtxHash": "nxtPtxHash"
      },
      "namedRegex": "^/api/trace/(?<nxtPchainId>[^/]+?)/(?<nxtPtxHash>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/tx/[chainId]/[txHash]",
      "regex": "^/api/tx/([^/]+?)/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPchainId": "nxtPchainId",
        "nxtPtxHash": "nxtPtxHash"
      },
      "namedRegex": "^/api/tx/(?<nxtPchainId>[^/]+?)/(?<nxtPtxHash>[^/]+?)(?:/)?$"
    },
    {
      "page": "/compare/[txHash]",
      "regex": "^/compare/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPtxHash": "nxtPtxHash"
      },
      "namedRegex": "^/compare/(?<nxtPtxHash>[^/]+?)(?:/)?$"
    },
    {
      "page": "/reports/[id]",
      "regex": "^/reports/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/reports/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/visualizer/[chainId]/[txHash]",
      "regex": "^/visualizer/([^/]+?)/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPchainId": "nxtPchainId",
        "nxtPtxHash": "nxtPtxHash"
      },
      "namedRegex": "^/visualizer/(?<nxtPchainId>[^/]+?)/(?<nxtPtxHash>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/analytics",
      "regex": "^/analytics(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/analytics(?:/)?$"
    },
    {
      "page": "/deploy",
      "regex": "^/deploy(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/deploy(?:/)?$"
    },
    {
      "page": "/gallery",
      "regex": "^/gallery(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/gallery(?:/)?$"
    },
    {
      "page": "/optimize",
      "regex": "^/optimize(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/optimize(?:/)?$"
    },
    {
      "page": "/reports",
      "regex": "^/reports(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/reports(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  }
}