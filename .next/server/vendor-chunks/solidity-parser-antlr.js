"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/solidity-parser-antlr";
exports.ids = ["vendor-chunks/solidity-parser-antlr"];
exports.modules = {

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/ASTBuilder.js":
/*!***************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/ASTBuilder.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar antlr4 = __webpack_require__(/*! ./antlr4/index */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/index.js\");\n\nfunction toText(ctx) {\n  if (ctx !== null) {\n    return ctx.getText();\n  }\n  return null;\n}\n\nfunction mapCommasToNulls(children) {\n  if (children.length === 0) {\n    return [];\n  }\n\n  var values = [];\n  var comma = true;\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var el = _step.value;\n\n      if (comma) {\n        if (toText(el) === ',') {\n          values.push(null);\n        } else {\n          values.push(el);\n          comma = false;\n        }\n      } else {\n        if (toText(el) !== ',') {\n          throw new Error('expected comma');\n        }\n        comma = true;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  if (comma) {\n    values.push(null);\n  }\n\n  return values;\n}\n\nfunction isBinOp(op) {\n  var binOps = ['+', '-', '*', '/', '**', '%', '<<', '>>', '&&', '||', '&', '|', '^', '<', '>', '<=', '>=', '==', '!=', '=', '|=', '^=', '&=', '<<=', '>>=', '+=', '-=', '*=', '/=', '%='];\n  return binOps.includes(op);\n}\n\nvar transformAST = {\n  SourceUnit: function SourceUnit(ctx) {\n    // last element is EOF terminal node\n    return {\n      children: this.visit(ctx.children.slice(0, -1))\n    };\n  },\n  EnumDefinition: function EnumDefinition(ctx) {\n    return {\n      name: toText(ctx.identifier()),\n      members: this.visit(ctx.enumValue())\n    };\n  },\n  EnumValue: function EnumValue(ctx) {\n    return {\n      name: toText(ctx.identifier())\n    };\n  },\n  UsingForDeclaration: function UsingForDeclaration(ctx) {\n    var typeName = null;\n    if (toText(ctx.getChild(3)) !== '*') {\n      typeName = this.visit(ctx.getChild(3));\n    }\n\n    return {\n      typeName: typeName,\n      libraryName: toText(ctx.identifier())\n    };\n  },\n  PragmaDirective: function PragmaDirective(ctx) {\n    return {\n      name: toText(ctx.pragmaName()),\n      value: toText(ctx.pragmaValue())\n    };\n  },\n  ContractDefinition: function ContractDefinition(ctx) {\n    var name = toText(ctx.identifier());\n    this._currentContract = name;\n\n    return {\n      name: name,\n      baseContracts: this.visit(ctx.inheritanceSpecifier()),\n      subNodes: this.visit(ctx.contractPart()),\n      kind: toText(ctx.getChild(0))\n    };\n  },\n  InheritanceSpecifier: function InheritanceSpecifier(ctx) {\n    var exprList = ctx.expressionList();\n    var args = exprList != null ? this.visit(exprList.expression()) : [];\n\n    return {\n      baseName: this.visit(ctx.userDefinedTypeName()),\n      arguments: args\n    };\n  },\n  ContractPart: function ContractPart(ctx) {\n    return this.visit(ctx.children[0]);\n  },\n  ConstructorDefinition: function ConstructorDefinition(ctx) {\n    var _this = this;\n\n    var parameters = this.visit(ctx.parameterList());\n    var block = this.visit(ctx.block());\n\n    var modifiers = ctx.modifierList().modifierInvocation().map(function (mod) {\n      return _this.visit(mod);\n    });\n\n    // parse function visibility\n    var visibility = 'default';\n    if (ctx.modifierList().ExternalKeyword(0)) {\n      visibility = 'external';\n    } else if (ctx.modifierList().InternalKeyword(0)) {\n      visibility = 'internal';\n    } else if (ctx.modifierList().PublicKeyword(0)) {\n      visibility = 'public';\n    } else if (ctx.modifierList().PrivateKeyword(0)) {\n      visibility = 'private';\n    }\n\n    var stateMutability = null;\n    if (ctx.modifierList().stateMutability(0)) {\n      stateMutability = toText(ctx.modifierList().stateMutability(0));\n    }\n\n    return {\n      type: 'FunctionDefinition',\n      name: null,\n      parameters: parameters,\n      body: block,\n      visibility: visibility,\n      modifiers: modifiers,\n      isConstructor: true,\n      stateMutability: stateMutability\n    };\n  },\n  FunctionDefinition: function FunctionDefinition(ctx) {\n    var _this2 = this;\n\n    var name = '';\n    if (ctx.identifier(0)) {\n      name = toText(ctx.identifier(0));\n    }\n    var parameters = this.visit(ctx.parameterList());\n\n    var returnParameters = this.visit(ctx.returnParameters());\n\n    var block = null;\n    if (ctx.block()) {\n      block = this.visit(ctx.block());\n    }\n\n    var modifiers = ctx.modifierList().modifierInvocation().map(function (mod) {\n      return _this2.visit(mod);\n    });\n\n    // parse function visibility\n    var visibility = 'default';\n    if (ctx.modifierList().ExternalKeyword(0)) {\n      visibility = 'external';\n    } else if (ctx.modifierList().InternalKeyword(0)) {\n      visibility = 'internal';\n    } else if (ctx.modifierList().PublicKeyword(0)) {\n      visibility = 'public';\n    } else if (ctx.modifierList().PrivateKeyword(0)) {\n      visibility = 'private';\n    }\n\n    var stateMutability = null;\n    if (ctx.modifierList().stateMutability(0)) {\n      stateMutability = toText(ctx.modifierList().stateMutability(0));\n    }\n\n    return {\n      name: name,\n      parameters: parameters,\n      returnParameters: returnParameters,\n      body: block,\n      visibility: visibility,\n      modifiers: modifiers,\n      isConstructor: name === this._currentContract,\n      stateMutability: stateMutability\n    };\n  },\n  ModifierInvocation: function ModifierInvocation(ctx) {\n    var exprList = ctx.expressionList();\n\n    var args = void 0;\n    if (exprList != null) {\n      args = this.visit(exprList.expression());\n    } else if (ctx.children.length > 1) {\n      args = [];\n    } else {\n      args = null;\n    }\n\n    return {\n      name: toText(ctx.identifier()),\n      arguments: args\n    };\n  },\n  ElementaryTypeNameExpression: function ElementaryTypeNameExpression(ctx) {\n    return {\n      typeName: this.visit(ctx.elementaryTypeName())\n    };\n  },\n  TypeName: function TypeName(ctx) {\n    if (ctx.children.length > 2) {\n      var length = null;\n      if (ctx.children.length === 4) {\n        length = this.visit(ctx.getChild(2));\n      }\n\n      return {\n        type: 'ArrayTypeName',\n        baseTypeName: this.visit(ctx.getChild(0)),\n        length: length\n      };\n    }\n    if (ctx.children.length === 2) {\n      return {\n        type: 'ElementaryTypeName',\n        name: toText(ctx.getChild(0)),\n        stateMutability: toText(ctx.getChild(1))\n      };\n    }\n    return this.visit(ctx.getChild(0));\n  },\n  FunctionTypeName: function FunctionTypeName(ctx) {\n    var _this3 = this;\n\n    var parameterTypes = ctx.functionTypeParameterList(0).functionTypeParameter().map(function (typeCtx) {\n      return _this3.visit(typeCtx);\n    });\n\n    var returnTypes = [];\n    if (ctx.functionTypeParameterList(1)) {\n      returnTypes = ctx.functionTypeParameterList(1).functionTypeParameter().map(function (typeCtx) {\n        return _this3.visit(typeCtx);\n      });\n    }\n\n    var visibility = 'default';\n    if (ctx.InternalKeyword(0)) {\n      visibility = 'internal';\n    } else if (ctx.ExternalKeyword(0)) {\n      visibility = 'external';\n    }\n\n    var stateMutability = null;\n    if (ctx.stateMutability(0)) {\n      stateMutability = toText(ctx.stateMutability(0));\n    }\n\n    return {\n      parameterTypes: parameterTypes,\n      returnTypes: returnTypes,\n      visibility: visibility,\n      stateMutability: stateMutability\n    };\n  },\n  ReturnStatement: function ReturnStatement(ctx) {\n    var expression = null;\n    if (ctx.expression()) {\n      expression = this.visit(ctx.expression());\n    }\n\n    return { expression: expression };\n  },\n  EmitStatement: function EmitStatement(ctx) {\n    return {\n      eventCall: this.visit(ctx.functionCall())\n    };\n  },\n  FunctionCall: function FunctionCall(ctx) {\n    var _this4 = this;\n\n    var args = [];\n    var names = [];\n\n    var ctxArgs = ctx.functionCallArguments();\n    if (ctxArgs.expressionList()) {\n      args = ctxArgs.expressionList().expression().map(function (exprCtx) {\n        return _this4.visit(exprCtx);\n      });\n    } else if (ctxArgs.nameValueList()) {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = ctxArgs.nameValueList().nameValue()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var nameValue = _step2.value;\n\n          args.push(this.visit(nameValue.expression()));\n          names.push(toText(nameValue.identifier()));\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n\n    return {\n      expression: this.visit(ctx.expression()),\n      arguments: args,\n      names: names\n    };\n  },\n  StructDefinition: function StructDefinition(ctx) {\n    return {\n      name: toText(ctx.identifier()),\n      members: this.visit(ctx.variableDeclaration())\n    };\n  },\n  VariableDeclaration: function VariableDeclaration(ctx) {\n    var storageLocation = null;\n    if (ctx.storageLocation()) {\n      storageLocation = toText(ctx.storageLocation());\n    }\n\n    return {\n      typeName: this.visit(ctx.typeName()),\n      name: toText(ctx.identifier()),\n      storageLocation: storageLocation,\n      isStateVar: false,\n      isIndexed: false\n    };\n  },\n  EventParameter: function EventParameter(ctx) {\n    var storageLocation = null;\n    if (ctx.storageLocation(0)) {\n      storageLocation = toText(ctx.storageLocation(0));\n    }\n\n    return {\n      type: 'VariableDeclaration',\n      typeName: this.visit(ctx.typeName()),\n      name: toText(ctx.identifier()),\n      storageLocation: storageLocation,\n      isStateVar: false,\n      isIndexed: !!ctx.IndexedKeyword(0)\n    };\n  },\n  FunctionTypeParameter: function FunctionTypeParameter(ctx) {\n    var storageLocation = null;\n    if (ctx.storageLocation()) {\n      storageLocation = toText(ctx.storageLocation());\n    }\n\n    return {\n      type: 'VariableDeclaration',\n      typeName: this.visit(ctx.typeName()),\n      name: null,\n      storageLocation: storageLocation,\n      isStateVar: false,\n      isIndexed: false\n    };\n  },\n  WhileStatement: function WhileStatement(ctx) {\n    return {\n      condition: this.visit(ctx.expression()),\n      body: this.visit(ctx.statement())\n    };\n  },\n  DoWhileStatement: function DoWhileStatement(ctx) {\n    return {\n      condition: this.visit(ctx.expression()),\n      body: this.visit(ctx.statement())\n    };\n  },\n  IfStatement: function IfStatement(ctx) {\n    var trueBody = this.visit(ctx.statement(0));\n\n    var falseBody = null;\n    if (ctx.statement().length > 1) {\n      falseBody = this.visit(ctx.statement(1));\n    }\n\n    return {\n      condition: this.visit(ctx.expression()),\n      trueBody: trueBody,\n      falseBody: falseBody\n    };\n  },\n  UserDefinedTypeName: function UserDefinedTypeName(ctx) {\n    return {\n      namePath: toText(ctx)\n    };\n  },\n  ElementaryTypeName: function ElementaryTypeName(ctx) {\n    return {\n      name: toText(ctx)\n    };\n  },\n  Block: function Block(ctx) {\n    return {\n      statements: this.visit(ctx.statement())\n    };\n  },\n  ExpressionStatement: function ExpressionStatement(ctx) {\n    return {\n      expression: this.visit(ctx.expression())\n    };\n  },\n  NumberLiteral: function NumberLiteral(ctx) {\n    var number = toText(ctx.getChild(0));\n    var subdenomination = null;\n\n    if (ctx.children.length === 2) {\n      subdenomination = toText(ctx.getChild(1));\n    }\n\n    return {\n      number: number,\n      subdenomination: subdenomination\n    };\n  },\n  Mapping: function Mapping(ctx) {\n    return {\n      keyType: this.visit(ctx.elementaryTypeName()),\n      valueType: this.visit(ctx.typeName())\n    };\n  },\n  ModifierDefinition: function ModifierDefinition(ctx) {\n    var parameters = null;\n    if (ctx.parameterList()) {\n      parameters = this.visit(ctx.parameterList());\n    }\n\n    return {\n      name: toText(ctx.identifier()),\n      parameters: parameters,\n      body: this.visit(ctx.block())\n    };\n  },\n  Statement: function Statement(ctx) {\n    return this.visit(ctx.getChild(0));\n  },\n  SimpleStatement: function SimpleStatement(ctx) {\n    return this.visit(ctx.getChild(0));\n  },\n  Expression: function Expression(ctx) {\n    var _this5 = this;\n\n    var op = void 0;\n\n    switch (ctx.children.length) {\n      case 1:\n        // primary expression\n        return this.visit(ctx.getChild(0));\n\n      case 2:\n        op = toText(ctx.getChild(0));\n\n        // new expression\n        if (op === 'new') {\n          return {\n            type: 'NewExpression',\n            typeName: this.visit(ctx.typeName())\n          };\n        }\n\n        // prefix operators\n        if (['+', '-', '++', '--', '!', '~', 'after', 'delete'].includes(op)) {\n          return {\n            type: 'UnaryOperation',\n            operator: op,\n            subExpression: this.visit(ctx.getChild(1)),\n            isPrefix: true\n          };\n        }\n\n        op = toText(ctx.getChild(1));\n\n        // postfix operators\n        if (['++', '--'].includes(op)) {\n          return {\n            type: 'UnaryOperation',\n            operator: op,\n            subExpression: this.visit(ctx.getChild(0)),\n            isPrefix: false\n          };\n        }\n        break;\n\n      case 3:\n        // treat parenthesis as no-op\n        if (toText(ctx.getChild(0)) === '(' && toText(ctx.getChild(2)) === ')') {\n          return {\n            type: 'TupleExpression',\n            components: [this.visit(ctx.getChild(1))],\n            isArray: false\n          };\n        }\n\n        op = toText(ctx.getChild(1));\n\n        // tuple separator\n        if (op === ',') {\n          return {\n            type: 'TupleExpression',\n            components: [this.visit(ctx.getChild(0)), this.visit(ctx.getChild(2))],\n            isArray: false\n          };\n        }\n\n        // member access\n        if (op === '.') {\n          return {\n            type: 'MemberAccess',\n            expression: this.visit(ctx.getChild(0)),\n            memberName: toText(ctx.getChild(2))\n          };\n        }\n\n        if (isBinOp(op)) {\n          return {\n            type: 'BinaryOperation',\n            operator: op,\n            left: this.visit(ctx.getChild(0)),\n            right: this.visit(ctx.getChild(2))\n          };\n        }\n        break;\n\n      case 4:\n        // function call\n        if (toText(ctx.getChild(1)) === '(' && toText(ctx.getChild(3)) === ')') {\n          var args = [];\n          var names = [];\n\n          var ctxArgs = ctx.functionCallArguments();\n          if (ctxArgs.expressionList()) {\n            args = ctxArgs.expressionList().expression().map(function (exprCtx) {\n              return _this5.visit(exprCtx);\n            });\n          } else if (ctxArgs.nameValueList()) {\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n              for (var _iterator3 = ctxArgs.nameValueList().nameValue()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                var nameValue = _step3.value;\n\n                args.push(this.visit(nameValue.expression()));\n                names.push(toText(nameValue.identifier()));\n              }\n            } catch (err) {\n              _didIteratorError3 = true;\n              _iteratorError3 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                  _iterator3.return();\n                }\n              } finally {\n                if (_didIteratorError3) {\n                  throw _iteratorError3;\n                }\n              }\n            }\n          }\n\n          return {\n            type: 'FunctionCall',\n            expression: this.visit(ctx.getChild(0)),\n            arguments: args,\n            names: names\n          };\n        }\n\n        // index access\n        if (toText(ctx.getChild(1)) === '[' && toText(ctx.getChild(3)) === ']') {\n          return {\n            type: 'IndexAccess',\n            base: this.visit(ctx.getChild(0)),\n            index: this.visit(ctx.getChild(2))\n          };\n        }\n        break;\n\n      case 5:\n        // ternary operator\n        if (toText(ctx.getChild(1)) === '?' && toText(ctx.getChild(3)) === ':') {\n          return {\n            type: 'Conditional',\n            condition: this.visit(ctx.getChild(0)),\n            trueExpression: this.visit(ctx.getChild(2)),\n            falseExpression: this.visit(ctx.getChild(4))\n          };\n        }\n        break;\n    }\n\n    throw new Error('unrecognized expression');\n  },\n  StateVariableDeclaration: function StateVariableDeclaration(ctx) {\n    var type = this.visit(ctx.typeName());\n    var iden = ctx.identifier();\n    var name = toText(iden);\n\n    var expression = null;\n    if (ctx.expression()) {\n      expression = this.visit(ctx.expression());\n    }\n\n    var visibility = 'default';\n    if (ctx.InternalKeyword(0)) {\n      visibility = 'internal';\n    } else if (ctx.PublicKeyword(0)) {\n      visibility = 'public';\n    } else if (ctx.PrivateKeyword(0)) {\n      visibility = 'private';\n    }\n\n    var isDeclaredConst = false;\n    if (ctx.ConstantKeyword(0)) {\n      isDeclaredConst = true;\n    }\n\n    var decl = this.createNode({\n      type: 'VariableDeclaration',\n      typeName: type,\n      name: name,\n      expression: expression,\n      visibility: visibility,\n      isStateVar: true,\n      isDeclaredConst: isDeclaredConst,\n      isIndexed: false\n    }, iden);\n\n    return {\n      variables: [decl],\n      initialValue: expression\n    };\n  },\n  ForStatement: function ForStatement(ctx) {\n    var conditionExpression = this.visit(ctx.expressionStatement());\n    if (conditionExpression) {\n      conditionExpression = conditionExpression.expression;\n    }\n    return {\n      initExpression: this.visit(ctx.simpleStatement()),\n      conditionExpression: conditionExpression,\n      loopExpression: {\n        type: 'ExpressionStatement',\n        expression: this.visit(ctx.expression())\n      },\n      body: this.visit(ctx.statement())\n    };\n  },\n  PrimaryExpression: function PrimaryExpression(ctx) {\n    if (ctx.BooleanLiteral()) {\n      return {\n        type: 'BooleanLiteral',\n        value: toText(ctx.BooleanLiteral()) === 'true'\n      };\n    }\n\n    if (ctx.HexLiteral()) {\n      return {\n        type: 'HexLiteral',\n        value: toText(ctx.HexLiteral())\n      };\n    }\n\n    if (ctx.StringLiteral()) {\n      var text = toText(ctx);\n      var singleQuotes = text[0] === \"'\";\n      var textWithoutQuotes = text.substring(1, text.length - 1);\n      var value = singleQuotes ? textWithoutQuotes.replace(new RegExp(\"\\\\\\\\'\", 'g'), \"'\") : textWithoutQuotes.replace(new RegExp('\\\\\\\\\"', 'g'), '\"');\n      return {\n        type: 'StringLiteral',\n        value: value\n      };\n    }\n\n    if (ctx.TypeKeyword()) {\n      return {\n        type: 'Identifier',\n        name: 'type'\n      };\n    }\n\n    if (ctx.children.length == 3 && toText(ctx.getChild(1)) === '[' && toText(ctx.getChild(2)) === ']') {\n      var node = this.visit(ctx.getChild(0));\n      if (node.type === 'Identifier') {\n        node = {\n          type: 'UserDefinedTypeName',\n          namePath: node.name\n        };\n      } else {\n        node = {\n          type: 'ElementaryTypeName',\n          name: toText(ctx.getChild(0))\n        };\n      }\n      return {\n        type: 'ArrayTypeName',\n        baseTypeName: node,\n        length: null\n      };\n    }\n\n    return this.visit(ctx.getChild(0));\n  },\n  Identifier: function Identifier(ctx) {\n    return {\n      name: toText(ctx)\n    };\n  },\n  TupleExpression: function TupleExpression(ctx) {\n    var _this6 = this;\n\n    // remove parentheses\n    var children = ctx.children.slice(1, -1);\n    var components = mapCommasToNulls(children).map(function (expr) {\n      // add a null for each empty value\n      if (expr === null) {\n        return null;\n      }\n      return _this6.visit(expr);\n    });\n\n    return {\n      components: components,\n      isArray: toText(ctx.getChild(0)) === '['\n    };\n  },\n  IdentifierList: function IdentifierList(ctx) {\n    var _this7 = this;\n\n    // remove parentheses\n    var children = ctx.children.slice(1, -1);\n    return mapCommasToNulls(children).map(function (iden) {\n      // add a null for each empty value\n      if (iden === null) {\n        return null;\n      }\n\n      return _this7.createNode({\n        type: 'VariableDeclaration',\n        name: toText(iden),\n        storageLocation: null,\n        typeName: null,\n        isStateVar: false,\n        isIndexed: false\n      }, iden);\n    });\n  },\n  VariableDeclarationList: function VariableDeclarationList(ctx) {\n    var _this8 = this;\n\n    // remove parentheses\n    return mapCommasToNulls(ctx.children).map(function (decl) {\n      // add a null for each empty value\n      if (decl === null) {\n        return null;\n      }\n\n      var storageLocation = null;\n      if (decl.storageLocation()) {\n        storageLocation = toText(decl.storageLocation());\n      }\n\n      return _this8.createNode({\n        type: 'VariableDeclaration',\n        name: toText(decl.identifier()),\n        typeName: _this8.visit(decl.typeName()),\n        storageLocation: storageLocation,\n        isStateVar: false,\n        isIndexed: false\n      }, decl);\n    });\n  },\n  VariableDeclarationStatement: function VariableDeclarationStatement(ctx) {\n    var variables = void 0;\n    if (ctx.variableDeclaration()) {\n      variables = [this.visit(ctx.variableDeclaration())];\n    } else if (ctx.identifierList()) {\n      variables = this.visit(ctx.identifierList());\n    } else if (ctx.variableDeclarationList()) {\n      variables = this.visit(ctx.variableDeclarationList());\n    }\n\n    var initialValue = null;\n    if (ctx.expression()) {\n      initialValue = this.visit(ctx.expression());\n    }\n\n    return {\n      variables: variables,\n      initialValue: initialValue\n    };\n  },\n  ImportDirective: function ImportDirective(ctx) {\n    var pathString = toText(ctx.StringLiteral());\n    var unitAlias = null;\n    var symbolAliases = null;\n\n    if (ctx.importDeclaration().length > 0) {\n      symbolAliases = ctx.importDeclaration().map(function (decl) {\n        var symbol = toText(decl.identifier(0));\n        var alias = null;\n        if (decl.identifier(1)) {\n          alias = toText(decl.identifier(1));\n        }\n        return [symbol, alias];\n      });\n    } else if (ctx.children.length === 7) {\n      unitAlias = toText(ctx.getChild(3));\n    } else if (ctx.children.length === 5) {\n      unitAlias = toText(ctx.getChild(3));\n    }\n\n    return {\n      path: pathString.substring(1, pathString.length - 1),\n      unitAlias: unitAlias,\n      symbolAliases: symbolAliases\n    };\n  },\n  EventDefinition: function EventDefinition(ctx) {\n    return {\n      name: toText(ctx.identifier()),\n      parameters: this.visit(ctx.eventParameterList()),\n      isAnonymous: !!ctx.AnonymousKeyword()\n    };\n  },\n  EventParameterList: function EventParameterList(ctx) {\n    return ctx.eventParameter().map(function (paramCtx) {\n      var type = this.visit(paramCtx.typeName());\n      var name = null;\n      if (paramCtx.identifier()) {\n        name = toText(paramCtx.identifier());\n      }\n\n      return this.createNode({\n        type: 'VariableDeclaration',\n        typeName: type,\n        name: name,\n        isStateVar: false,\n        isIndexed: !!paramCtx.IndexedKeyword(0)\n      }, paramCtx);\n    }, this);\n  },\n  ReturnParameters: function ReturnParameters(ctx) {\n    return this.visit(ctx.parameterList());\n  },\n  ParameterList: function ParameterList(ctx) {\n    var _this9 = this;\n\n    return ctx.parameter().map(function (paramCtx) {\n      return _this9.visit(paramCtx);\n    });\n  },\n  Parameter: function Parameter(ctx) {\n    var storageLocation = null;\n    if (ctx.storageLocation()) {\n      storageLocation = toText(ctx.storageLocation());\n    }\n\n    var name = null;\n    if (ctx.identifier()) {\n      name = toText(ctx.identifier());\n    }\n\n    return {\n      type: 'VariableDeclaration',\n      typeName: this.visit(ctx.typeName()),\n      name: name,\n      storageLocation: storageLocation,\n      isStateVar: false,\n      isIndexed: false\n    };\n  },\n  InlineAssemblyStatement: function InlineAssemblyStatement(ctx) {\n    var language = null;\n    if (ctx.StringLiteral()) {\n      language = toText(ctx.StringLiteral());\n      language = language.substring(1, language.length - 1);\n    }\n\n    return {\n      language: language,\n      body: this.visit(ctx.assemblyBlock())\n    };\n  },\n  AssemblyBlock: function AssemblyBlock(ctx) {\n    var _this10 = this;\n\n    var operations = ctx.assemblyItem().map(function (it) {\n      return _this10.visit(it);\n    });\n\n    return { operations: operations };\n  },\n  AssemblyItem: function AssemblyItem(ctx) {\n    var text = void 0;\n\n    if (ctx.HexLiteral()) {\n      return {\n        type: 'HexLiteral',\n        value: toText(ctx.HexLiteral())\n      };\n    }\n\n    if (ctx.StringLiteral()) {\n      text = toText(ctx.StringLiteral());\n      return {\n        type: 'StringLiteral',\n        value: text.substring(1, text.length - 1)\n      };\n    }\n\n    if (ctx.BreakKeyword()) {\n      return {\n        type: 'Break'\n      };\n    }\n\n    if (ctx.ContinueKeyword()) {\n      return {\n        type: 'Continue'\n      };\n    }\n\n    return this.visit(ctx.getChild(0));\n  },\n  AssemblyExpression: function AssemblyExpression(ctx) {\n    return this.visit(ctx.getChild(0));\n  },\n  AssemblyCall: function AssemblyCall(ctx) {\n    var _this11 = this;\n\n    var functionName = toText(ctx.getChild(0));\n    var args = ctx.assemblyExpression().map(function (arg) {\n      return _this11.visit(arg);\n    });\n\n    return {\n      functionName: functionName,\n      arguments: args\n    };\n  },\n  AssemblyLiteral: function AssemblyLiteral(ctx) {\n    var text = void 0;\n\n    if (ctx.StringLiteral()) {\n      text = toText(ctx);\n      return {\n        type: 'StringLiteral',\n        value: text.substring(1, text.length - 1)\n      };\n    }\n\n    if (ctx.DecimalNumber()) {\n      return {\n        type: 'DecimalNumber',\n        value: toText(ctx)\n      };\n    }\n\n    if (ctx.HexNumber()) {\n      return {\n        type: 'HexNumber',\n        value: toText(ctx)\n      };\n    }\n\n    if (ctx.HexLiteral()) {\n      return {\n        type: 'HexLiteral',\n        value: toText(ctx)\n      };\n    }\n  },\n  AssemblySwitch: function AssemblySwitch(ctx) {\n    var _this12 = this;\n\n    return {\n      expression: this.visit(ctx.assemblyExpression()),\n      cases: ctx.assemblyCase().map(function (c) {\n        return _this12.visit(c);\n      })\n    };\n  },\n  AssemblyCase: function AssemblyCase(ctx) {\n    var value = null;\n    if (toText(ctx.getChild(0)) === 'case') {\n      value = this.visit(ctx.assemblyLiteral());\n    }\n\n    var node = { block: this.visit(ctx.assemblyBlock()) };\n    if (value !== null) {\n      node.value = value;\n    } else {\n      node.default = true;\n    }\n\n    return node;\n  },\n  AssemblyLocalDefinition: function AssemblyLocalDefinition(ctx) {\n    var names = ctx.assemblyIdentifierOrList();\n    if (names.identifier()) {\n      names = [this.visit(names.identifier())];\n    } else {\n      names = this.visit(names.assemblyIdentifierList().identifier());\n    }\n\n    return {\n      names: names,\n      expression: this.visit(ctx.assemblyExpression())\n    };\n  },\n  AssemblyFunctionDefinition: function AssemblyFunctionDefinition(ctx) {\n    var args = ctx.assemblyIdentifierList();\n    args = args ? this.visit(args.identifier()) : [];\n\n    var returnArgs = ctx.assemblyFunctionReturns();\n    returnArgs = returnArgs ? this.visit(returnArgs.assemblyIdentifierList().identifier()) : [];\n\n    return {\n      name: toText(ctx.identifier()),\n      arguments: args,\n      returnArguments: returnArgs,\n      body: this.visit(ctx.assemblyBlock())\n    };\n  },\n  AssemblyAssignment: function AssemblyAssignment(ctx) {\n    var names = ctx.assemblyIdentifierOrList();\n    if (names.identifier()) {\n      names = [this.visit(names.identifier())];\n    } else {\n      names = this.visit(names.assemblyIdentifierList().identifier());\n    }\n\n    return {\n      names: names,\n      expression: this.visit(ctx.assemblyExpression())\n    };\n  },\n  LabelDefinition: function LabelDefinition(ctx) {\n    return {\n      name: toText(ctx.identifier())\n    };\n  },\n  AssemblyStackAssignment: function AssemblyStackAssignment(ctx) {\n    return {\n      name: toText(ctx.identifier())\n    };\n  },\n  AssemblyFor: function AssemblyFor(ctx) {\n    return {\n      pre: this.visit(ctx.getChild(1)),\n      condition: this.visit(ctx.getChild(2)),\n      post: this.visit(ctx.getChild(3)),\n      body: this.visit(ctx.getChild(4))\n    };\n  },\n  AssemblyIf: function AssemblyIf(ctx) {\n    return {\n      condition: this.visit(ctx.assemblyExpression()),\n      body: this.visit(ctx.assemblyBlock())\n    };\n  }\n};\n\nfunction ASTBuilder(options) {\n  antlr4.tree.ParseTreeVisitor.call(this);\n  this.options = options;\n}\n\nASTBuilder.prototype = Object.create(antlr4.tree.ParseTreeVisitor.prototype);\nASTBuilder.prototype.constructor = ASTBuilder;\n\nASTBuilder.prototype._loc = function (ctx) {\n  var sourceLocation = {\n    start: {\n      line: ctx.start.line,\n      column: ctx.start.column\n    },\n    end: {\n      line: ctx.stop.line,\n      column: ctx.stop.column\n    }\n  };\n  return { loc: sourceLocation };\n};\n\nASTBuilder.prototype._range = function (ctx) {\n  return { range: [ctx.start.start, ctx.stop.stop] };\n};\n\nASTBuilder.prototype.meta = function (ctx) {\n  var ret = {};\n  if (this.options.loc) {\n    Object.assign(ret, this._loc(ctx));\n  }\n  if (this.options.range) {\n    Object.assign(ret, this._range(ctx));\n  }\n  return ret;\n};\n\nASTBuilder.prototype.createNode = function (obj, ctx) {\n  return Object.assign(obj, this.meta(ctx));\n};\n\nASTBuilder.prototype.visit = function (ctx) {\n  if (ctx == null) {\n    return null;\n  }\n\n  if (Array.isArray(ctx)) {\n    return ctx.map(function (child) {\n      return this.visit(child);\n    }, this);\n  }\n\n  var name = ctx.constructor.name;\n  if (name.endsWith('Context')) {\n    name = name.substring(0, name.length - 'Context'.length);\n  }\n\n  var node = { type: name };\n\n  if (name in transformAST) {\n    var visited = transformAST[name].call(this, ctx);\n    if (Array.isArray(visited)) {\n      return visited;\n    }\n    Object.assign(node, visited);\n  }\n\n  return this.createNode(node, ctx);\n};\n\nmodule.exports = ASTBuilder;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/ASTBuilder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/ErrorListener.js":
/*!******************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/ErrorListener.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar antlr4 = __webpack_require__(/*! ./antlr4/index */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/index.js\");\n\nfunction ErrorListener() {\n  antlr4.error.ErrorListener.call(this);\n  this._errors = [];\n}\n\nErrorListener.prototype = Object.create(antlr4.error.ErrorListener.prototype);\nErrorListener.prototype.constructor = ErrorListener;\n\nErrorListener.prototype.syntaxError = function (recognizer, offendingSymbol, line, column, message) {\n  this._errors.push({ message: message, line: line, column: column });\n};\n\nErrorListener.prototype.getErrors = function () {\n  return this._errors;\n};\n\nErrorListener.prototype.hasErrors = function () {\n  return this._errors.length > 0;\n};\n\nmodule.exports = ErrorListener;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvRXJyb3JMaXN0ZW5lci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixhQUFhLG1CQUFPLENBQUMsdUZBQWdCOztBQUVyQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esc0JBQXNCLDhDQUE4QztBQUNwRTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvbWFjL2Zsb3dwb3J0L25vZGVfbW9kdWxlcy9zb2xpZGl0eS1wYXJzZXItYW50bHIvZGlzdC9FcnJvckxpc3RlbmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGFudGxyNCA9IHJlcXVpcmUoJy4vYW50bHI0L2luZGV4Jyk7XG5cbmZ1bmN0aW9uIEVycm9yTGlzdGVuZXIoKSB7XG4gIGFudGxyNC5lcnJvci5FcnJvckxpc3RlbmVyLmNhbGwodGhpcyk7XG4gIHRoaXMuX2Vycm9ycyA9IFtdO1xufVxuXG5FcnJvckxpc3RlbmVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoYW50bHI0LmVycm9yLkVycm9yTGlzdGVuZXIucHJvdG90eXBlKTtcbkVycm9yTGlzdGVuZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRXJyb3JMaXN0ZW5lcjtcblxuRXJyb3JMaXN0ZW5lci5wcm90b3R5cGUuc3ludGF4RXJyb3IgPSBmdW5jdGlvbiAocmVjb2duaXplciwgb2ZmZW5kaW5nU3ltYm9sLCBsaW5lLCBjb2x1bW4sIG1lc3NhZ2UpIHtcbiAgdGhpcy5fZXJyb3JzLnB1c2goeyBtZXNzYWdlOiBtZXNzYWdlLCBsaW5lOiBsaW5lLCBjb2x1bW46IGNvbHVtbiB9KTtcbn07XG5cbkVycm9yTGlzdGVuZXIucHJvdG90eXBlLmdldEVycm9ycyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2Vycm9ycztcbn07XG5cbkVycm9yTGlzdGVuZXIucHJvdG90eXBlLmhhc0Vycm9ycyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2Vycm9ycy5sZW5ndGggPiAwO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFcnJvckxpc3RlbmVyOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/ErrorListener.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/BufferedTokenStream.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/BufferedTokenStream.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n// This implementation of {@link TokenStream} loads tokens from a\n// {@link TokenSource} on-demand, and places the tokens in a buffer to provide\n// access to any previous token by index.\n//\n// <p>\n// This token stream ignores the value of {@link Token//getChannel}. If your\n// parser requires the token stream filter tokens to only those on a particular\n// channel, such as {@link Token//DEFAULT_CHANNEL} or\n// {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a\n// {@link CommonTokenStream}.</p>\n\nvar Token = (__webpack_require__(/*! ./Token */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Token.js\").Token);\nvar Lexer = (__webpack_require__(/*! ./Lexer */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Lexer.js\").Lexer);\nvar Interval = (__webpack_require__(/*! ./IntervalSet */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/IntervalSet.js\").Interval);\n\n// this is just to keep meaningful parameter types to Parser\nfunction TokenStream() {\n\treturn this;\n}\n\nfunction BufferedTokenStream(tokenSource) {\n\n\tTokenStream.call(this);\n\t// The {@link TokenSource} from which tokens for this stream are fetched.\n\tthis.tokenSource = tokenSource;\n\n\t// A collection of all tokens fetched from the token source. The list is\n\t// considered a complete view of the input once {@link //fetchedEOF} is set\n\t// to {@code true}.\n\tthis.tokens = [];\n\n\t// The index into {@link //tokens} of the current token (next token to\n\t// {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should\n\t// be\n\t// {@link //LT LT(1)}.\n\t//\n\t// <p>This field is set to -1 when the stream is first constructed or when\n\t// {@link //setTokenSource} is called, indicating that the first token has\n\t// not yet been fetched from the token source. For additional information,\n\t// see the documentation of {@link IntStream} for a description of\n\t// Initializing Methods.</p>\n\tthis.index = -1;\n\n\t// Indicates whether the {@link Token//EOF} token has been fetched from\n\t// {@link //tokenSource} and added to {@link //tokens}. This field improves\n\t// performance for the following cases:\n\t//\n\t// <ul>\n\t// <li>{@link //consume}: The lookahead check in {@link //consume} to\n\t// prevent\n\t// consuming the EOF symbol is optimized by checking the values of\n\t// {@link //fetchedEOF} and {@link //p} instead of calling {@link\n\t// //LA}.</li>\n\t// <li>{@link //fetch}: The check to prevent adding multiple EOF symbols\n\t// into\n\t// {@link //tokens} is trivial with this field.</li>\n\t// <ul>\n\tthis.fetchedEOF = false;\n\treturn this;\n}\n\nBufferedTokenStream.prototype = Object.create(TokenStream.prototype);\nBufferedTokenStream.prototype.constructor = BufferedTokenStream;\n\nBufferedTokenStream.prototype.mark = function () {\n\treturn 0;\n};\n\nBufferedTokenStream.prototype.release = function (marker) {\n\t// no resources to release\n};\n\nBufferedTokenStream.prototype.reset = function () {\n\tthis.seek(0);\n};\n\nBufferedTokenStream.prototype.seek = function (index) {\n\tthis.lazyInit();\n\tthis.index = this.adjustSeekIndex(index);\n};\n\nBufferedTokenStream.prototype.get = function (index) {\n\tthis.lazyInit();\n\treturn this.tokens[index];\n};\n\nBufferedTokenStream.prototype.consume = function () {\n\tvar skipEofCheck = false;\n\tif (this.index >= 0) {\n\t\tif (this.fetchedEOF) {\n\t\t\t// the last token in tokens is EOF. skip check if p indexes any\n\t\t\t// fetched token except the last.\n\t\t\tskipEofCheck = this.index < this.tokens.length - 1;\n\t\t} else {\n\t\t\t// no EOF token in tokens. skip check if p indexes a fetched token.\n\t\t\tskipEofCheck = this.index < this.tokens.length;\n\t\t}\n\t} else {\n\t\t// not yet initialized\n\t\tskipEofCheck = false;\n\t}\n\tif (!skipEofCheck && this.LA(1) === Token.EOF) {\n\t\tthrow \"cannot consume EOF\";\n\t}\n\tif (this.sync(this.index + 1)) {\n\t\tthis.index = this.adjustSeekIndex(this.index + 1);\n\t}\n};\n\n// Make sure index {@code i} in tokens has a token.\n//\n// @return {@code true} if a token is located at index {@code i}, otherwise\n// {@code false}.\n// @see //get(int i)\n// /\nBufferedTokenStream.prototype.sync = function (i) {\n\tvar n = i - this.tokens.length + 1; // how many more elements we need?\n\tif (n > 0) {\n\t\tvar fetched = this.fetch(n);\n\t\treturn fetched >= n;\n\t}\n\treturn true;\n};\n\n// Add {@code n} elements to buffer.\n//\n// @return The actual number of elements added to the buffer.\n// /\nBufferedTokenStream.prototype.fetch = function (n) {\n\tif (this.fetchedEOF) {\n\t\treturn 0;\n\t}\n\tfor (var i = 0; i < n; i++) {\n\t\tvar t = this.tokenSource.nextToken();\n\t\tt.tokenIndex = this.tokens.length;\n\t\tthis.tokens.push(t);\n\t\tif (t.type === Token.EOF) {\n\t\t\tthis.fetchedEOF = true;\n\t\t\treturn i + 1;\n\t\t}\n\t}\n\treturn n;\n};\n\n// Get all tokens from start..stop inclusively///\nBufferedTokenStream.prototype.getTokens = function (start, stop, types) {\n\tif (types === undefined) {\n\t\ttypes = null;\n\t}\n\tif (start < 0 || stop < 0) {\n\t\treturn null;\n\t}\n\tthis.lazyInit();\n\tvar subset = [];\n\tif (stop >= this.tokens.length) {\n\t\tstop = this.tokens.length - 1;\n\t}\n\tfor (var i = start; i < stop; i++) {\n\t\tvar t = this.tokens[i];\n\t\tif (t.type === Token.EOF) {\n\t\t\tbreak;\n\t\t}\n\t\tif (types === null || types.contains(t.type)) {\n\t\t\tsubset.push(t);\n\t\t}\n\t}\n\treturn subset;\n};\n\nBufferedTokenStream.prototype.LA = function (i) {\n\treturn this.LT(i).type;\n};\n\nBufferedTokenStream.prototype.LB = function (k) {\n\tif (this.index - k < 0) {\n\t\treturn null;\n\t}\n\treturn this.tokens[this.index - k];\n};\n\nBufferedTokenStream.prototype.LT = function (k) {\n\tthis.lazyInit();\n\tif (k === 0) {\n\t\treturn null;\n\t}\n\tif (k < 0) {\n\t\treturn this.LB(-k);\n\t}\n\tvar i = this.index + k - 1;\n\tthis.sync(i);\n\tif (i >= this.tokens.length) {\n\t\t// return EOF token\n\t\t// EOF must be last token\n\t\treturn this.tokens[this.tokens.length - 1];\n\t}\n\treturn this.tokens[i];\n};\n\n// Allowed derived classes to modify the behavior of operations which change\n// the current stream position by adjusting the target token index of a seek\n// operation. The default implementation simply returns {@code i}. If an\n// exception is thrown in this method, the current stream index should not be\n// changed.\n//\n// <p>For example, {@link CommonTokenStream} overrides this method to ensure\n// that\n// the seek target is always an on-channel token.</p>\n//\n// @param i The target token index.\n// @return The adjusted target token index.\n\nBufferedTokenStream.prototype.adjustSeekIndex = function (i) {\n\treturn i;\n};\n\nBufferedTokenStream.prototype.lazyInit = function () {\n\tif (this.index === -1) {\n\t\tthis.setup();\n\t}\n};\n\nBufferedTokenStream.prototype.setup = function () {\n\tthis.sync(0);\n\tthis.index = this.adjustSeekIndex(0);\n};\n\n// Reset this token stream by setting its token source.///\nBufferedTokenStream.prototype.setTokenSource = function (tokenSource) {\n\tthis.tokenSource = tokenSource;\n\tthis.tokens = [];\n\tthis.index = -1;\n\tthis.fetchedEOF = false;\n};\n\n// Given a starting index, return the index of the next token on channel.\n// Return i if tokens[i] is on channel. Return -1 if there are no tokens\n// on channel between i and EOF.\n// /\nBufferedTokenStream.prototype.nextTokenOnChannel = function (i, channel) {\n\tthis.sync(i);\n\tif (i >= this.tokens.length) {\n\t\treturn -1;\n\t}\n\tvar token = this.tokens[i];\n\twhile (token.channel !== this.channel) {\n\t\tif (token.type === Token.EOF) {\n\t\t\treturn -1;\n\t\t}\n\t\ti += 1;\n\t\tthis.sync(i);\n\t\ttoken = this.tokens[i];\n\t}\n\treturn i;\n};\n\n// Given a starting index, return the index of the previous token on channel.\n// Return i if tokens[i] is on channel. Return -1 if there are no tokens\n// on channel between i and 0.\nBufferedTokenStream.prototype.previousTokenOnChannel = function (i, channel) {\n\twhile (i >= 0 && this.tokens[i].channel !== channel) {\n\t\ti -= 1;\n\t}\n\treturn i;\n};\n\n// Collect all tokens on specified channel to the right of\n// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or\n// EOF. If channel is -1, find any non default channel token.\nBufferedTokenStream.prototype.getHiddenTokensToRight = function (tokenIndex, channel) {\n\tif (channel === undefined) {\n\t\tchannel = -1;\n\t}\n\tthis.lazyInit();\n\tif (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n\t\tthrow \"\" + tokenIndex + \" not in 0..\" + this.tokens.length - 1;\n\t}\n\tvar nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL);\n\tvar from_ = tokenIndex + 1;\n\t// if none onchannel to right, nextOnChannel=-1 so set to = last token\n\tvar to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;\n\treturn this.filterForChannel(from_, to, channel);\n};\n\n// Collect all tokens on specified channel to the left of\n// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.\n// If channel is -1, find any non default channel token.\nBufferedTokenStream.prototype.getHiddenTokensToLeft = function (tokenIndex, channel) {\n\tif (channel === undefined) {\n\t\tchannel = -1;\n\t}\n\tthis.lazyInit();\n\tif (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n\t\tthrow \"\" + tokenIndex + \" not in 0..\" + this.tokens.length - 1;\n\t}\n\tvar prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);\n\tif (prevOnChannel === tokenIndex - 1) {\n\t\treturn null;\n\t}\n\t// if none on channel to left, prevOnChannel=-1 then from=0\n\tvar from_ = prevOnChannel + 1;\n\tvar to = tokenIndex - 1;\n\treturn this.filterForChannel(from_, to, channel);\n};\n\nBufferedTokenStream.prototype.filterForChannel = function (left, right, channel) {\n\tvar hidden = [];\n\tfor (var i = left; i < right + 1; i++) {\n\t\tvar t = this.tokens[i];\n\t\tif (channel === -1) {\n\t\t\tif (t.channel !== Lexer.DEFAULT_TOKEN_CHANNEL) {\n\t\t\t\thidden.push(t);\n\t\t\t}\n\t\t} else if (t.channel === channel) {\n\t\t\thidden.push(t);\n\t\t}\n\t}\n\tif (hidden.length === 0) {\n\t\treturn null;\n\t}\n\treturn hidden;\n};\n\nBufferedTokenStream.prototype.getSourceName = function () {\n\treturn this.tokenSource.getSourceName();\n};\n\n// Get the text of all tokens in this buffer.///\nBufferedTokenStream.prototype.getText = function (interval) {\n\tthis.lazyInit();\n\tthis.fill();\n\tif (interval === undefined || interval === null) {\n\t\tinterval = new Interval(0, this.tokens.length - 1);\n\t}\n\tvar start = interval.start;\n\tif (start instanceof Token) {\n\t\tstart = start.tokenIndex;\n\t}\n\tvar stop = interval.stop;\n\tif (stop instanceof Token) {\n\t\tstop = stop.tokenIndex;\n\t}\n\tif (start === null || stop === null || start < 0 || stop < 0) {\n\t\treturn \"\";\n\t}\n\tif (stop >= this.tokens.length) {\n\t\tstop = this.tokens.length - 1;\n\t}\n\tvar s = \"\";\n\tfor (var i = start; i < stop + 1; i++) {\n\t\tvar t = this.tokens[i];\n\t\tif (t.type === Token.EOF) {\n\t\t\tbreak;\n\t\t}\n\t\ts = s + t.text;\n\t}\n\treturn s;\n};\n\n// Get all tokens from lexer until EOF///\nBufferedTokenStream.prototype.fill = function () {\n\tthis.lazyInit();\n\twhile (this.fetch(1000) === 1000) {\n\t\tcontinue;\n\t}\n};\n\nexports.BufferedTokenStream = BufferedTokenStream;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/BufferedTokenStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/CharStreams.js":
/*!***********************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/CharStreams.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\nvar InputStream = (__webpack_require__(/*! ./InputStream */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/InputStream.js\").InputStream);\n\nvar isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';\nvar fs = isNodeJs ? __webpack_require__(/*! fs */ \"fs\") : null;\n\n// Utility functions to create InputStreams from various sources.\n//\n// All returned InputStreams support the full range of Unicode\n// up to U+10FFFF (the default behavior of InputStream only supports\n// code points up to U+FFFF).\nvar CharStreams = {\n  // Creates an InputStream from a string.\n  fromString: function fromString(str) {\n    return new InputStream(str, true);\n  },\n\n  // Asynchronously creates an InputStream from a blob given the\n  // encoding of the bytes in that blob (defaults to 'utf8' if\n  // encoding is null).\n  //\n  // Invokes onLoad(result) on success, onError(error) on\n  // failure.\n  fromBlob: function fromBlob(blob, encoding, onLoad, onError) {\n    var reader = FileReader();\n    reader.onload = function (e) {\n      var is = new InputStream(e.target.result, true);\n      onLoad(is);\n    };\n    reader.onerror = onError;\n    reader.readAsText(blob, encoding);\n  },\n\n  // Creates an InputStream from a Buffer given the\n  // encoding of the bytes in that buffer (defaults to 'utf8' if\n  // encoding is null).\n  fromBuffer: function fromBuffer(buffer, encoding) {\n    return new InputStream(buffer.toString(encoding), true);\n  },\n\n  // Asynchronously creates an InputStream from a file on disk given\n  // the encoding of the bytes in that file (defaults to 'utf8' if\n  // encoding is null).\n  //\n  // Invokes callback(error, result) on completion.\n  fromPath: function fromPath(path, encoding, callback) {\n    fs.readFile(path, encoding, function (err, data) {\n      var is = null;\n      if (data !== null) {\n        is = new InputStream(data, true);\n      }\n      callback(err, is);\n    });\n  },\n\n  // Synchronously creates an InputStream given a path to a file\n  // on disk and the encoding of the bytes in that file (defaults to\n  // 'utf8' if encoding is null).\n  fromPathSync: function fromPathSync(path, encoding) {\n    var data = fs.readFileSync(path, encoding);\n    return new InputStream(data, true);\n  }\n};\n\nexports.CharStreams = CharStreams;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L0NoYXJTdHJlYW1zLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IsK0hBQW9DOztBQUV0RDtBQUNBLG9CQUFvQixtQkFBTyxDQUFDLGNBQUk7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWMvZmxvd3BvcnQvbm9kZV9tb2R1bGVzL3NvbGlkaXR5LXBhcnNlci1hbnRsci9kaXN0L2FudGxyNC9DaGFyU3RyZWFtcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vXG4vKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG4vL1xuXG52YXIgSW5wdXRTdHJlYW0gPSByZXF1aXJlKCcuL0lucHV0U3RyZWFtJykuSW5wdXRTdHJlYW07XG5cbnZhciBpc05vZGVKcyA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBpbXBvcnRTY3JpcHRzID09PSAndW5kZWZpbmVkJztcbnZhciBmcyA9IGlzTm9kZUpzID8gcmVxdWlyZShcImZzXCIpIDogbnVsbDtcblxuLy8gVXRpbGl0eSBmdW5jdGlvbnMgdG8gY3JlYXRlIElucHV0U3RyZWFtcyBmcm9tIHZhcmlvdXMgc291cmNlcy5cbi8vXG4vLyBBbGwgcmV0dXJuZWQgSW5wdXRTdHJlYW1zIHN1cHBvcnQgdGhlIGZ1bGwgcmFuZ2Ugb2YgVW5pY29kZVxuLy8gdXAgdG8gVSsxMEZGRkYgKHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIElucHV0U3RyZWFtIG9ubHkgc3VwcG9ydHNcbi8vIGNvZGUgcG9pbnRzIHVwIHRvIFUrRkZGRikuXG52YXIgQ2hhclN0cmVhbXMgPSB7XG4gIC8vIENyZWF0ZXMgYW4gSW5wdXRTdHJlYW0gZnJvbSBhIHN0cmluZy5cbiAgZnJvbVN0cmluZzogZnVuY3Rpb24gZnJvbVN0cmluZyhzdHIpIHtcbiAgICByZXR1cm4gbmV3IElucHV0U3RyZWFtKHN0ciwgdHJ1ZSk7XG4gIH0sXG5cbiAgLy8gQXN5bmNocm9ub3VzbHkgY3JlYXRlcyBhbiBJbnB1dFN0cmVhbSBmcm9tIGEgYmxvYiBnaXZlbiB0aGVcbiAgLy8gZW5jb2Rpbmcgb2YgdGhlIGJ5dGVzIGluIHRoYXQgYmxvYiAoZGVmYXVsdHMgdG8gJ3V0ZjgnIGlmXG4gIC8vIGVuY29kaW5nIGlzIG51bGwpLlxuICAvL1xuICAvLyBJbnZva2VzIG9uTG9hZChyZXN1bHQpIG9uIHN1Y2Nlc3MsIG9uRXJyb3IoZXJyb3IpIG9uXG4gIC8vIGZhaWx1cmUuXG4gIGZyb21CbG9iOiBmdW5jdGlvbiBmcm9tQmxvYihibG9iLCBlbmNvZGluZywgb25Mb2FkLCBvbkVycm9yKSB7XG4gICAgdmFyIHJlYWRlciA9IEZpbGVSZWFkZXIoKTtcbiAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBpcyA9IG5ldyBJbnB1dFN0cmVhbShlLnRhcmdldC5yZXN1bHQsIHRydWUpO1xuICAgICAgb25Mb2FkKGlzKTtcbiAgICB9O1xuICAgIHJlYWRlci5vbmVycm9yID0gb25FcnJvcjtcbiAgICByZWFkZXIucmVhZEFzVGV4dChibG9iLCBlbmNvZGluZyk7XG4gIH0sXG5cbiAgLy8gQ3JlYXRlcyBhbiBJbnB1dFN0cmVhbSBmcm9tIGEgQnVmZmVyIGdpdmVuIHRoZVxuICAvLyBlbmNvZGluZyBvZiB0aGUgYnl0ZXMgaW4gdGhhdCBidWZmZXIgKGRlZmF1bHRzIHRvICd1dGY4JyBpZlxuICAvLyBlbmNvZGluZyBpcyBudWxsKS5cbiAgZnJvbUJ1ZmZlcjogZnVuY3Rpb24gZnJvbUJ1ZmZlcihidWZmZXIsIGVuY29kaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBJbnB1dFN0cmVhbShidWZmZXIudG9TdHJpbmcoZW5jb2RpbmcpLCB0cnVlKTtcbiAgfSxcblxuICAvLyBBc3luY2hyb25vdXNseSBjcmVhdGVzIGFuIElucHV0U3RyZWFtIGZyb20gYSBmaWxlIG9uIGRpc2sgZ2l2ZW5cbiAgLy8gdGhlIGVuY29kaW5nIG9mIHRoZSBieXRlcyBpbiB0aGF0IGZpbGUgKGRlZmF1bHRzIHRvICd1dGY4JyBpZlxuICAvLyBlbmNvZGluZyBpcyBudWxsKS5cbiAgLy9cbiAgLy8gSW52b2tlcyBjYWxsYmFjayhlcnJvciwgcmVzdWx0KSBvbiBjb21wbGV0aW9uLlxuICBmcm9tUGF0aDogZnVuY3Rpb24gZnJvbVBhdGgocGF0aCwgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gICAgZnMucmVhZEZpbGUocGF0aCwgZW5jb2RpbmcsIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbiAgICAgIHZhciBpcyA9IG51bGw7XG4gICAgICBpZiAoZGF0YSAhPT0gbnVsbCkge1xuICAgICAgICBpcyA9IG5ldyBJbnB1dFN0cmVhbShkYXRhLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrKGVyciwgaXMpO1xuICAgIH0pO1xuICB9LFxuXG4gIC8vIFN5bmNocm9ub3VzbHkgY3JlYXRlcyBhbiBJbnB1dFN0cmVhbSBnaXZlbiBhIHBhdGggdG8gYSBmaWxlXG4gIC8vIG9uIGRpc2sgYW5kIHRoZSBlbmNvZGluZyBvZiB0aGUgYnl0ZXMgaW4gdGhhdCBmaWxlIChkZWZhdWx0cyB0b1xuICAvLyAndXRmOCcgaWYgZW5jb2RpbmcgaXMgbnVsbCkuXG4gIGZyb21QYXRoU3luYzogZnVuY3Rpb24gZnJvbVBhdGhTeW5jKHBhdGgsIGVuY29kaW5nKSB7XG4gICAgdmFyIGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMocGF0aCwgZW5jb2RpbmcpO1xuICAgIHJldHVybiBuZXcgSW5wdXRTdHJlYW0oZGF0YSwgdHJ1ZSk7XG4gIH1cbn07XG5cbmV4cG9ydHMuQ2hhclN0cmVhbXMgPSBDaGFyU3RyZWFtczsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/CharStreams.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/CommonTokenFactory.js":
/*!******************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/CommonTokenFactory.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\n//\n// This default implementation of {@link TokenFactory} creates\n// {@link CommonToken} objects.\n//\n\nvar CommonToken = (__webpack_require__(/*! ./Token */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Token.js\").CommonToken);\n\nfunction TokenFactory() {\n    return this;\n}\n\nfunction CommonTokenFactory(copyText) {\n    TokenFactory.call(this);\n    // Indicates whether {@link CommonToken//setText} should be called after\n    // constructing tokens to explicitly set the text. This is useful for cases\n    // where the input stream might not be able to provide arbitrary substrings\n    // of text from the input after the lexer creates a token (e.g. the\n    // implementation of {@link CharStream//getText} in\n    // {@link UnbufferedCharStream} throws an\n    // {@link UnsupportedOperationException}). Explicitly setting the token text\n    // allows {@link Token//getText} to be called at any time regardless of the\n    // input stream implementation.\n    //\n    // <p>\n    // The default value is {@code false} to avoid the performance and memory\n    // overhead of copying text for every token unless explicitly requested.</p>\n    //\n    this.copyText = copyText === undefined ? false : copyText;\n    return this;\n}\n\nCommonTokenFactory.prototype = Object.create(TokenFactory.prototype);\nCommonTokenFactory.prototype.constructor = CommonTokenFactory;\n\n//\n// The default {@link CommonTokenFactory} instance.\n//\n// <p>\n// This token factory does not explicitly copy token text when constructing\n// tokens.</p>\n//\nCommonTokenFactory.DEFAULT = new CommonTokenFactory();\n\nCommonTokenFactory.prototype.create = function (source, type, text, channel, start, stop, line, column) {\n    var t = new CommonToken(source, type, channel, start, stop);\n    t.line = line;\n    t.column = column;\n    if (text !== null) {\n        t.text = text;\n    } else if (this.copyText && source[1] !== null) {\n        t.text = source[1].getText(start, stop);\n    }\n    return t;\n};\n\nCommonTokenFactory.prototype.createThin = function (type, text) {\n    var t = new CommonToken(null, type);\n    t.text = text;\n    return t;\n};\n\nexports.CommonTokenFactory = CommonTokenFactory;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L0NvbW1vblRva2VuRmFjdG9yeS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQ0FBbUMsb0JBQW9CO0FBQ3ZELElBQUksbUJBQW1CO0FBQ3ZCOztBQUVBLGtCQUFrQixtSEFBOEI7O0FBRWhEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMEJBQTBCLDRCQUE0QjtBQUN0RDtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsMkJBQTJCO0FBQ3JELFFBQVEsNEJBQTRCO0FBQ3BDLFFBQVEsb0NBQW9DO0FBQzVDLGVBQWUsc0JBQXNCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixhQUFhO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQiwwQkFBMEI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBCQUEwQiIsInNvdXJjZXMiOlsiL1VzZXJzL21hYy9mbG93cG9ydC9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L0NvbW1vblRva2VuRmFjdG9yeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vXG4vKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG4vL1xuXG4vL1xuLy8gVGhpcyBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIHtAbGluayBUb2tlbkZhY3Rvcnl9IGNyZWF0ZXNcbi8vIHtAbGluayBDb21tb25Ub2tlbn0gb2JqZWN0cy5cbi8vXG5cbnZhciBDb21tb25Ub2tlbiA9IHJlcXVpcmUoJy4vVG9rZW4nKS5Db21tb25Ub2tlbjtcblxuZnVuY3Rpb24gVG9rZW5GYWN0b3J5KCkge1xuICAgIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBDb21tb25Ub2tlbkZhY3RvcnkoY29weVRleHQpIHtcbiAgICBUb2tlbkZhY3RvcnkuY2FsbCh0aGlzKTtcbiAgICAvLyBJbmRpY2F0ZXMgd2hldGhlciB7QGxpbmsgQ29tbW9uVG9rZW4vL3NldFRleHR9IHNob3VsZCBiZSBjYWxsZWQgYWZ0ZXJcbiAgICAvLyBjb25zdHJ1Y3RpbmcgdG9rZW5zIHRvIGV4cGxpY2l0bHkgc2V0IHRoZSB0ZXh0LiBUaGlzIGlzIHVzZWZ1bCBmb3IgY2FzZXNcbiAgICAvLyB3aGVyZSB0aGUgaW5wdXQgc3RyZWFtIG1pZ2h0IG5vdCBiZSBhYmxlIHRvIHByb3ZpZGUgYXJiaXRyYXJ5IHN1YnN0cmluZ3NcbiAgICAvLyBvZiB0ZXh0IGZyb20gdGhlIGlucHV0IGFmdGVyIHRoZSBsZXhlciBjcmVhdGVzIGEgdG9rZW4gKGUuZy4gdGhlXG4gICAgLy8gaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIENoYXJTdHJlYW0vL2dldFRleHR9IGluXG4gICAgLy8ge0BsaW5rIFVuYnVmZmVyZWRDaGFyU3RyZWFtfSB0aHJvd3MgYW5cbiAgICAvLyB7QGxpbmsgVW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb259KS4gRXhwbGljaXRseSBzZXR0aW5nIHRoZSB0b2tlbiB0ZXh0XG4gICAgLy8gYWxsb3dzIHtAbGluayBUb2tlbi8vZ2V0VGV4dH0gdG8gYmUgY2FsbGVkIGF0IGFueSB0aW1lIHJlZ2FyZGxlc3Mgb2YgdGhlXG4gICAgLy8gaW5wdXQgc3RyZWFtIGltcGxlbWVudGF0aW9uLlxuICAgIC8vXG4gICAgLy8gPHA+XG4gICAgLy8gVGhlIGRlZmF1bHQgdmFsdWUgaXMge0Bjb2RlIGZhbHNlfSB0byBhdm9pZCB0aGUgcGVyZm9ybWFuY2UgYW5kIG1lbW9yeVxuICAgIC8vIG92ZXJoZWFkIG9mIGNvcHlpbmcgdGV4dCBmb3IgZXZlcnkgdG9rZW4gdW5sZXNzIGV4cGxpY2l0bHkgcmVxdWVzdGVkLjwvcD5cbiAgICAvL1xuICAgIHRoaXMuY29weVRleHQgPSBjb3B5VGV4dCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBjb3B5VGV4dDtcbiAgICByZXR1cm4gdGhpcztcbn1cblxuQ29tbW9uVG9rZW5GYWN0b3J5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoVG9rZW5GYWN0b3J5LnByb3RvdHlwZSk7XG5Db21tb25Ub2tlbkZhY3RvcnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29tbW9uVG9rZW5GYWN0b3J5O1xuXG4vL1xuLy8gVGhlIGRlZmF1bHQge0BsaW5rIENvbW1vblRva2VuRmFjdG9yeX0gaW5zdGFuY2UuXG4vL1xuLy8gPHA+XG4vLyBUaGlzIHRva2VuIGZhY3RvcnkgZG9lcyBub3QgZXhwbGljaXRseSBjb3B5IHRva2VuIHRleHQgd2hlbiBjb25zdHJ1Y3Rpbmdcbi8vIHRva2Vucy48L3A+XG4vL1xuQ29tbW9uVG9rZW5GYWN0b3J5LkRFRkFVTFQgPSBuZXcgQ29tbW9uVG9rZW5GYWN0b3J5KCk7XG5cbkNvbW1vblRva2VuRmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKHNvdXJjZSwgdHlwZSwgdGV4dCwgY2hhbm5lbCwgc3RhcnQsIHN0b3AsIGxpbmUsIGNvbHVtbikge1xuICAgIHZhciB0ID0gbmV3IENvbW1vblRva2VuKHNvdXJjZSwgdHlwZSwgY2hhbm5lbCwgc3RhcnQsIHN0b3ApO1xuICAgIHQubGluZSA9IGxpbmU7XG4gICAgdC5jb2x1bW4gPSBjb2x1bW47XG4gICAgaWYgKHRleHQgIT09IG51bGwpIHtcbiAgICAgICAgdC50ZXh0ID0gdGV4dDtcbiAgICB9IGVsc2UgaWYgKHRoaXMuY29weVRleHQgJiYgc291cmNlWzFdICE9PSBudWxsKSB7XG4gICAgICAgIHQudGV4dCA9IHNvdXJjZVsxXS5nZXRUZXh0KHN0YXJ0LCBzdG9wKTtcbiAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuXG5Db21tb25Ub2tlbkZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZVRoaW4gPSBmdW5jdGlvbiAodHlwZSwgdGV4dCkge1xuICAgIHZhciB0ID0gbmV3IENvbW1vblRva2VuKG51bGwsIHR5cGUpO1xuICAgIHQudGV4dCA9IHRleHQ7XG4gICAgcmV0dXJuIHQ7XG59O1xuXG5leHBvcnRzLkNvbW1vblRva2VuRmFjdG9yeSA9IENvbW1vblRva2VuRmFjdG9yeTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/CommonTokenFactory.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/CommonTokenStream.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/CommonTokenStream.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\n//\n// This class extends {@link BufferedTokenStream} with functionality to filter\n// token streams to tokens on a particular channel (tokens where\n// {@link Token//getChannel} returns a particular value).\n//\n// <p>\n// This token stream provides access to all tokens by index or when calling\n// methods like {@link //getText}. The channel filtering is only used for code\n// accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and\n// {@link //LB}.</p>\n//\n// <p>\n// By default, tokens are placed on the default channel\n// ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the\n// {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to\n// call {@link Lexer//setChannel}.\n// </p>\n//\n// <p>\n// Note: lexer rules which use the {@code ->skip} lexer command or call\n// {@link Lexer//skip} do not produce tokens at all, so input text matched by\n// such a rule will not be available as part of the token stream, regardless of\n// channel.</p>\n///\n\nvar Token = (__webpack_require__(/*! ./Token */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Token.js\").Token);\nvar BufferedTokenStream = (__webpack_require__(/*! ./BufferedTokenStream */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/BufferedTokenStream.js\").BufferedTokenStream);\n\nfunction CommonTokenStream(lexer, channel) {\n    BufferedTokenStream.call(this, lexer);\n    this.channel = channel === undefined ? Token.DEFAULT_CHANNEL : channel;\n    return this;\n}\n\nCommonTokenStream.prototype = Object.create(BufferedTokenStream.prototype);\nCommonTokenStream.prototype.constructor = CommonTokenStream;\n\nCommonTokenStream.prototype.adjustSeekIndex = function (i) {\n    return this.nextTokenOnChannel(i, this.channel);\n};\n\nCommonTokenStream.prototype.LB = function (k) {\n    if (k === 0 || this.index - k < 0) {\n        return null;\n    }\n    var i = this.index;\n    var n = 1;\n    // find k good tokens looking backwards\n    while (n <= k) {\n        // skip off-channel tokens\n        i = this.previousTokenOnChannel(i - 1, this.channel);\n        n += 1;\n    }\n    if (i < 0) {\n        return null;\n    }\n    return this.tokens[i];\n};\n\nCommonTokenStream.prototype.LT = function (k) {\n    this.lazyInit();\n    if (k === 0) {\n        return null;\n    }\n    if (k < 0) {\n        return this.LB(-k);\n    }\n    var i = this.index;\n    var n = 1; // we know tokens[pos] is a good one\n    // find k good tokens\n    while (n < k) {\n        // skip off-channel tokens, but make sure to not look past EOF\n        if (this.sync(i + 1)) {\n            i = this.nextTokenOnChannel(i + 1, this.channel);\n        }\n        n += 1;\n    }\n    return this.tokens[i];\n};\n\n// Count EOF just once.///\nCommonTokenStream.prototype.getNumberOfOnChannelTokens = function () {\n    var n = 0;\n    this.fill();\n    for (var i = 0; i < this.tokens.length; i++) {\n        var t = this.tokens[i];\n        if (t.channel === this.channel) {\n            n += 1;\n        }\n        if (t.type === Token.EOF) {\n            break;\n        }\n    }\n    return n;\n};\n\nexports.CommonTokenStream = CommonTokenStream;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L0NvbW1vblRva2VuU3RyZWFtLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVCQUF1QiwyQkFBMkI7QUFDbEQ7QUFDQSxJQUFJLHlCQUF5QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsZ0JBQWdCO0FBQ2pDLCtDQUErQyxXQUFXLEdBQUcsV0FBVztBQUN4RSxJQUFJLFdBQVc7QUFDZjtBQUNBO0FBQ0E7QUFDQSxLQUFLLDZCQUE2QjtBQUNsQyxJQUFJLHlCQUF5QjtBQUM3QixTQUFTLHdCQUF3QjtBQUNqQztBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsY0FBYztBQUNsRCxJQUFJLG1CQUFtQjtBQUN2QjtBQUNBO0FBQ0E7O0FBRUEsWUFBWSw2R0FBd0I7QUFDcEMsMEJBQTBCLHVKQUFvRDs7QUFFOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix3QkFBd0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEseUJBQXlCIiwic291cmNlcyI6WyIvVXNlcnMvbWFjL2Zsb3dwb3J0L25vZGVfbW9kdWxlcy9zb2xpZGl0eS1wYXJzZXItYW50bHIvZGlzdC9hbnRscjQvQ29tbW9uVG9rZW5TdHJlYW0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vL1xuLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuLy8vXG5cbi8vXG4vLyBUaGlzIGNsYXNzIGV4dGVuZHMge0BsaW5rIEJ1ZmZlcmVkVG9rZW5TdHJlYW19IHdpdGggZnVuY3Rpb25hbGl0eSB0byBmaWx0ZXJcbi8vIHRva2VuIHN0cmVhbXMgdG8gdG9rZW5zIG9uIGEgcGFydGljdWxhciBjaGFubmVsICh0b2tlbnMgd2hlcmVcbi8vIHtAbGluayBUb2tlbi8vZ2V0Q2hhbm5lbH0gcmV0dXJucyBhIHBhcnRpY3VsYXIgdmFsdWUpLlxuLy9cbi8vIDxwPlxuLy8gVGhpcyB0b2tlbiBzdHJlYW0gcHJvdmlkZXMgYWNjZXNzIHRvIGFsbCB0b2tlbnMgYnkgaW5kZXggb3Igd2hlbiBjYWxsaW5nXG4vLyBtZXRob2RzIGxpa2Uge0BsaW5rIC8vZ2V0VGV4dH0uIFRoZSBjaGFubmVsIGZpbHRlcmluZyBpcyBvbmx5IHVzZWQgZm9yIGNvZGVcbi8vIGFjY2Vzc2luZyB0b2tlbnMgdmlhIHRoZSBsb29rYWhlYWQgbWV0aG9kcyB7QGxpbmsgLy9MQX0sIHtAbGluayAvL0xUfSwgYW5kXG4vLyB7QGxpbmsgLy9MQn0uPC9wPlxuLy9cbi8vIDxwPlxuLy8gQnkgZGVmYXVsdCwgdG9rZW5zIGFyZSBwbGFjZWQgb24gdGhlIGRlZmF1bHQgY2hhbm5lbFxuLy8gKHtAbGluayBUb2tlbi8vREVGQVVMVF9DSEFOTkVMfSksIGJ1dCBtYXkgYmUgcmVhc3NpZ25lZCBieSB1c2luZyB0aGVcbi8vIHtAY29kZSAtPmNoYW5uZWwoSElEREVOKX0gbGV4ZXIgY29tbWFuZCwgb3IgYnkgdXNpbmcgYW4gZW1iZWRkZWQgYWN0aW9uIHRvXG4vLyBjYWxsIHtAbGluayBMZXhlci8vc2V0Q2hhbm5lbH0uXG4vLyA8L3A+XG4vL1xuLy8gPHA+XG4vLyBOb3RlOiBsZXhlciBydWxlcyB3aGljaCB1c2UgdGhlIHtAY29kZSAtPnNraXB9IGxleGVyIGNvbW1hbmQgb3IgY2FsbFxuLy8ge0BsaW5rIExleGVyLy9za2lwfSBkbyBub3QgcHJvZHVjZSB0b2tlbnMgYXQgYWxsLCBzbyBpbnB1dCB0ZXh0IG1hdGNoZWQgYnlcbi8vIHN1Y2ggYSBydWxlIHdpbGwgbm90IGJlIGF2YWlsYWJsZSBhcyBwYXJ0IG9mIHRoZSB0b2tlbiBzdHJlYW0sIHJlZ2FyZGxlc3Mgb2Zcbi8vIGNoYW5uZWwuPC9wPlxuLy8vXG5cbnZhciBUb2tlbiA9IHJlcXVpcmUoJy4vVG9rZW4nKS5Ub2tlbjtcbnZhciBCdWZmZXJlZFRva2VuU3RyZWFtID0gcmVxdWlyZSgnLi9CdWZmZXJlZFRva2VuU3RyZWFtJykuQnVmZmVyZWRUb2tlblN0cmVhbTtcblxuZnVuY3Rpb24gQ29tbW9uVG9rZW5TdHJlYW0obGV4ZXIsIGNoYW5uZWwpIHtcbiAgICBCdWZmZXJlZFRva2VuU3RyZWFtLmNhbGwodGhpcywgbGV4ZXIpO1xuICAgIHRoaXMuY2hhbm5lbCA9IGNoYW5uZWwgPT09IHVuZGVmaW5lZCA/IFRva2VuLkRFRkFVTFRfQ0hBTk5FTCA6IGNoYW5uZWw7XG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbkNvbW1vblRva2VuU3RyZWFtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQnVmZmVyZWRUb2tlblN0cmVhbS5wcm90b3R5cGUpO1xuQ29tbW9uVG9rZW5TdHJlYW0ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29tbW9uVG9rZW5TdHJlYW07XG5cbkNvbW1vblRva2VuU3RyZWFtLnByb3RvdHlwZS5hZGp1c3RTZWVrSW5kZXggPSBmdW5jdGlvbiAoaSkge1xuICAgIHJldHVybiB0aGlzLm5leHRUb2tlbk9uQ2hhbm5lbChpLCB0aGlzLmNoYW5uZWwpO1xufTtcblxuQ29tbW9uVG9rZW5TdHJlYW0ucHJvdG90eXBlLkxCID0gZnVuY3Rpb24gKGspIHtcbiAgICBpZiAoayA9PT0gMCB8fCB0aGlzLmluZGV4IC0gayA8IDApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBpID0gdGhpcy5pbmRleDtcbiAgICB2YXIgbiA9IDE7XG4gICAgLy8gZmluZCBrIGdvb2QgdG9rZW5zIGxvb2tpbmcgYmFja3dhcmRzXG4gICAgd2hpbGUgKG4gPD0gaykge1xuICAgICAgICAvLyBza2lwIG9mZi1jaGFubmVsIHRva2Vuc1xuICAgICAgICBpID0gdGhpcy5wcmV2aW91c1Rva2VuT25DaGFubmVsKGkgLSAxLCB0aGlzLmNoYW5uZWwpO1xuICAgICAgICBuICs9IDE7XG4gICAgfVxuICAgIGlmIChpIDwgMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudG9rZW5zW2ldO1xufTtcblxuQ29tbW9uVG9rZW5TdHJlYW0ucHJvdG90eXBlLkxUID0gZnVuY3Rpb24gKGspIHtcbiAgICB0aGlzLmxhenlJbml0KCk7XG4gICAgaWYgKGsgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChrIDwgMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5MQigtayk7XG4gICAgfVxuICAgIHZhciBpID0gdGhpcy5pbmRleDtcbiAgICB2YXIgbiA9IDE7IC8vIHdlIGtub3cgdG9rZW5zW3Bvc10gaXMgYSBnb29kIG9uZVxuICAgIC8vIGZpbmQgayBnb29kIHRva2Vuc1xuICAgIHdoaWxlIChuIDwgaykge1xuICAgICAgICAvLyBza2lwIG9mZi1jaGFubmVsIHRva2VucywgYnV0IG1ha2Ugc3VyZSB0byBub3QgbG9vayBwYXN0IEVPRlxuICAgICAgICBpZiAodGhpcy5zeW5jKGkgKyAxKSkge1xuICAgICAgICAgICAgaSA9IHRoaXMubmV4dFRva2VuT25DaGFubmVsKGkgKyAxLCB0aGlzLmNoYW5uZWwpO1xuICAgICAgICB9XG4gICAgICAgIG4gKz0gMTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudG9rZW5zW2ldO1xufTtcblxuLy8gQ291bnQgRU9GIGp1c3Qgb25jZS4vLy9cbkNvbW1vblRva2VuU3RyZWFtLnByb3RvdHlwZS5nZXROdW1iZXJPZk9uQ2hhbm5lbFRva2VucyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbiA9IDA7XG4gICAgdGhpcy5maWxsKCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdCA9IHRoaXMudG9rZW5zW2ldO1xuICAgICAgICBpZiAodC5jaGFubmVsID09PSB0aGlzLmNoYW5uZWwpIHtcbiAgICAgICAgICAgIG4gKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodC50eXBlID09PSBUb2tlbi5FT0YpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuO1xufTtcblxuZXhwb3J0cy5Db21tb25Ub2tlblN0cmVhbSA9IENvbW1vblRva2VuU3RyZWFtOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/CommonTokenStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/FileStream.js":
/*!**********************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/FileStream.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\n//\n//  This is an InputStream that is loaded from a file all at once\n//  when you construct the object.\n//\nvar InputStream = (__webpack_require__(/*! ./InputStream */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/InputStream.js\").InputStream);\nvar isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';\nvar fs = isNodeJs ? __webpack_require__(/*! fs */ \"fs\") : null;\n\nfunction FileStream(fileName, decodeToUnicodeCodePoints) {\n\tvar data = fs.readFileSync(fileName, \"utf8\");\n\tInputStream.call(this, data, decodeToUnicodeCodePoints);\n\tthis.fileName = fileName;\n\treturn this;\n}\n\nFileStream.prototype = Object.create(InputStream.prototype);\nFileStream.prototype.constructor = FileStream;\n\nexports.FileStream = FileStream;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L0ZpbGVTdHJlYW0uanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLCtIQUFvQztBQUN0RDtBQUNBLG9CQUFvQixtQkFBTyxDQUFDLGNBQUk7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGtCQUFrQiIsInNvdXJjZXMiOlsiL1VzZXJzL21hYy9mbG93cG9ydC9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L0ZpbGVTdHJlYW0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vL1xuLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuLy9cblxuLy9cbi8vICBUaGlzIGlzIGFuIElucHV0U3RyZWFtIHRoYXQgaXMgbG9hZGVkIGZyb20gYSBmaWxlIGFsbCBhdCBvbmNlXG4vLyAgd2hlbiB5b3UgY29uc3RydWN0IHRoZSBvYmplY3QuXG4vL1xudmFyIElucHV0U3RyZWFtID0gcmVxdWlyZSgnLi9JbnB1dFN0cmVhbScpLklucHV0U3RyZWFtO1xudmFyIGlzTm9kZUpzID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGltcG9ydFNjcmlwdHMgPT09ICd1bmRlZmluZWQnO1xudmFyIGZzID0gaXNOb2RlSnMgPyByZXF1aXJlKFwiZnNcIikgOiBudWxsO1xuXG5mdW5jdGlvbiBGaWxlU3RyZWFtKGZpbGVOYW1lLCBkZWNvZGVUb1VuaWNvZGVDb2RlUG9pbnRzKSB7XG5cdHZhciBkYXRhID0gZnMucmVhZEZpbGVTeW5jKGZpbGVOYW1lLCBcInV0ZjhcIik7XG5cdElucHV0U3RyZWFtLmNhbGwodGhpcywgZGF0YSwgZGVjb2RlVG9Vbmljb2RlQ29kZVBvaW50cyk7XG5cdHRoaXMuZmlsZU5hbWUgPSBmaWxlTmFtZTtcblx0cmV0dXJuIHRoaXM7XG59XG5cbkZpbGVTdHJlYW0ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJbnB1dFN0cmVhbS5wcm90b3R5cGUpO1xuRmlsZVN0cmVhbS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBGaWxlU3RyZWFtO1xuXG5leHBvcnRzLkZpbGVTdHJlYW0gPSBGaWxlU3RyZWFtOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/FileStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/InputStream.js":
/*!***********************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/InputStream.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\nvar Token = (__webpack_require__(/*! ./Token */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Token.js\").Token);\n__webpack_require__(/*! ./polyfills/codepointat */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/polyfills/codepointat.js\");\n__webpack_require__(/*! ./polyfills/fromcodepoint */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/polyfills/fromcodepoint.js\");\n\n// Vacuum all input from a string and then treat it like a buffer.\n\nfunction _loadString(stream, decodeToUnicodeCodePoints) {\n\tstream._index = 0;\n\tstream.data = [];\n\tif (stream.decodeToUnicodeCodePoints) {\n\t\tfor (var i = 0; i < stream.strdata.length;) {\n\t\t\tvar codePoint = stream.strdata.codePointAt(i);\n\t\t\tstream.data.push(codePoint);\n\t\t\ti += codePoint <= 0xFFFF ? 1 : 2;\n\t\t}\n\t} else {\n\t\tfor (var i = 0; i < stream.strdata.length; i++) {\n\t\t\tvar codeUnit = stream.strdata.charCodeAt(i);\n\t\t\tstream.data.push(codeUnit);\n\t\t}\n\t}\n\tstream._size = stream.data.length;\n}\n\n// If decodeToUnicodeCodePoints is true, the input is treated\n// as a series of Unicode code points.\n//\n// Otherwise, the input is treated as a series of 16-bit UTF-16 code\n// units.\nfunction InputStream(data, decodeToUnicodeCodePoints) {\n\tthis.name = \"<empty>\";\n\tthis.strdata = data;\n\tthis.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false;\n\t_loadString(this);\n\treturn this;\n}\n\nObject.defineProperty(InputStream.prototype, \"index\", {\n\tget: function get() {\n\t\treturn this._index;\n\t}\n});\n\nObject.defineProperty(InputStream.prototype, \"size\", {\n\tget: function get() {\n\t\treturn this._size;\n\t}\n});\n\n// Reset the stream so that it's in the same state it was\n// when the object was created *except* the data array is not\n// touched.\n//\nInputStream.prototype.reset = function () {\n\tthis._index = 0;\n};\n\nInputStream.prototype.consume = function () {\n\tif (this._index >= this._size) {\n\t\t// assert this.LA(1) == Token.EOF\n\t\tthrow \"cannot consume EOF\";\n\t}\n\tthis._index += 1;\n};\n\nInputStream.prototype.LA = function (offset) {\n\tif (offset === 0) {\n\t\treturn 0; // undefined\n\t}\n\tif (offset < 0) {\n\t\toffset += 1; // e.g., translate LA(-1) to use offset=0\n\t}\n\tvar pos = this._index + offset - 1;\n\tif (pos < 0 || pos >= this._size) {\n\t\t// invalid\n\t\treturn Token.EOF;\n\t}\n\treturn this.data[pos];\n};\n\nInputStream.prototype.LT = function (offset) {\n\treturn this.LA(offset);\n};\n\n// mark/release do nothing; we have entire buffer\nInputStream.prototype.mark = function () {\n\treturn -1;\n};\n\nInputStream.prototype.release = function (marker) {};\n\n// consume() ahead until p==_index; can't just set p=_index as we must\n// update line and column. If we seek backwards, just set p\n//\nInputStream.prototype.seek = function (_index) {\n\tif (_index <= this._index) {\n\t\tthis._index = _index; // just jump; don't update stream state (line,\n\t\t// ...)\n\t\treturn;\n\t}\n\t// seek forward\n\tthis._index = Math.min(_index, this._size);\n};\n\nInputStream.prototype.getText = function (start, stop) {\n\tif (stop >= this._size) {\n\t\tstop = this._size - 1;\n\t}\n\tif (start >= this._size) {\n\t\treturn \"\";\n\t} else {\n\t\tif (this.decodeToUnicodeCodePoints) {\n\t\t\tvar result = \"\";\n\t\t\tfor (var i = start; i <= stop; i++) {\n\t\t\t\tresult += String.fromCodePoint(this.data[i]);\n\t\t\t}\n\t\t\treturn result;\n\t\t} else {\n\t\t\treturn this.strdata.slice(start, stop + 1);\n\t\t}\n\t}\n};\n\nInputStream.prototype.toString = function () {\n\treturn this.strdata;\n};\n\nexports.InputStream = InputStream;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L0lucHV0U3RyZWFtLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxZQUFZLDZHQUF3QjtBQUNwQyxtQkFBTyxDQUFDLGdIQUF5QjtBQUNqQyxtQkFBTyxDQUFDLG9IQUEyQjs7QUFFbkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsMEJBQTBCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILGtCQUFrQiwyQkFBMkI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBOztBQUVBOztBQUVBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixjQUFjO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLHVCQUF1QixXQUFXO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CIiwic291cmNlcyI6WyIvVXNlcnMvbWFjL2Zsb3dwb3J0L25vZGVfbW9kdWxlcy9zb2xpZGl0eS1wYXJzZXItYW50bHIvZGlzdC9hbnRscjQvSW5wdXRTdHJlYW0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vL1xuLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuLy9cblxudmFyIFRva2VuID0gcmVxdWlyZSgnLi9Ub2tlbicpLlRva2VuO1xucmVxdWlyZSgnLi9wb2x5ZmlsbHMvY29kZXBvaW50YXQnKTtcbnJlcXVpcmUoJy4vcG9seWZpbGxzL2Zyb21jb2RlcG9pbnQnKTtcblxuLy8gVmFjdXVtIGFsbCBpbnB1dCBmcm9tIGEgc3RyaW5nIGFuZCB0aGVuIHRyZWF0IGl0IGxpa2UgYSBidWZmZXIuXG5cbmZ1bmN0aW9uIF9sb2FkU3RyaW5nKHN0cmVhbSwgZGVjb2RlVG9Vbmljb2RlQ29kZVBvaW50cykge1xuXHRzdHJlYW0uX2luZGV4ID0gMDtcblx0c3RyZWFtLmRhdGEgPSBbXTtcblx0aWYgKHN0cmVhbS5kZWNvZGVUb1VuaWNvZGVDb2RlUG9pbnRzKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHJlYW0uc3RyZGF0YS5sZW5ndGg7KSB7XG5cdFx0XHR2YXIgY29kZVBvaW50ID0gc3RyZWFtLnN0cmRhdGEuY29kZVBvaW50QXQoaSk7XG5cdFx0XHRzdHJlYW0uZGF0YS5wdXNoKGNvZGVQb2ludCk7XG5cdFx0XHRpICs9IGNvZGVQb2ludCA8PSAweEZGRkYgPyAxIDogMjtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHJlYW0uc3RyZGF0YS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGNvZGVVbml0ID0gc3RyZWFtLnN0cmRhdGEuY2hhckNvZGVBdChpKTtcblx0XHRcdHN0cmVhbS5kYXRhLnB1c2goY29kZVVuaXQpO1xuXHRcdH1cblx0fVxuXHRzdHJlYW0uX3NpemUgPSBzdHJlYW0uZGF0YS5sZW5ndGg7XG59XG5cbi8vIElmIGRlY29kZVRvVW5pY29kZUNvZGVQb2ludHMgaXMgdHJ1ZSwgdGhlIGlucHV0IGlzIHRyZWF0ZWRcbi8vIGFzIGEgc2VyaWVzIG9mIFVuaWNvZGUgY29kZSBwb2ludHMuXG4vL1xuLy8gT3RoZXJ3aXNlLCB0aGUgaW5wdXQgaXMgdHJlYXRlZCBhcyBhIHNlcmllcyBvZiAxNi1iaXQgVVRGLTE2IGNvZGVcbi8vIHVuaXRzLlxuZnVuY3Rpb24gSW5wdXRTdHJlYW0oZGF0YSwgZGVjb2RlVG9Vbmljb2RlQ29kZVBvaW50cykge1xuXHR0aGlzLm5hbWUgPSBcIjxlbXB0eT5cIjtcblx0dGhpcy5zdHJkYXRhID0gZGF0YTtcblx0dGhpcy5kZWNvZGVUb1VuaWNvZGVDb2RlUG9pbnRzID0gZGVjb2RlVG9Vbmljb2RlQ29kZVBvaW50cyB8fCBmYWxzZTtcblx0X2xvYWRTdHJpbmcodGhpcyk7XG5cdHJldHVybiB0aGlzO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSW5wdXRTdHJlYW0ucHJvdG90eXBlLCBcImluZGV4XCIsIHtcblx0Z2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2luZGV4O1xuXHR9XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KElucHV0U3RyZWFtLnByb3RvdHlwZSwgXCJzaXplXCIsIHtcblx0Z2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3NpemU7XG5cdH1cbn0pO1xuXG4vLyBSZXNldCB0aGUgc3RyZWFtIHNvIHRoYXQgaXQncyBpbiB0aGUgc2FtZSBzdGF0ZSBpdCB3YXNcbi8vIHdoZW4gdGhlIG9iamVjdCB3YXMgY3JlYXRlZCAqZXhjZXB0KiB0aGUgZGF0YSBhcnJheSBpcyBub3Rcbi8vIHRvdWNoZWQuXG4vL1xuSW5wdXRTdHJlYW0ucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuXHR0aGlzLl9pbmRleCA9IDA7XG59O1xuXG5JbnB1dFN0cmVhbS5wcm90b3R5cGUuY29uc3VtZSA9IGZ1bmN0aW9uICgpIHtcblx0aWYgKHRoaXMuX2luZGV4ID49IHRoaXMuX3NpemUpIHtcblx0XHQvLyBhc3NlcnQgdGhpcy5MQSgxKSA9PSBUb2tlbi5FT0Zcblx0XHR0aHJvdyBcImNhbm5vdCBjb25zdW1lIEVPRlwiO1xuXHR9XG5cdHRoaXMuX2luZGV4ICs9IDE7XG59O1xuXG5JbnB1dFN0cmVhbS5wcm90b3R5cGUuTEEgPSBmdW5jdGlvbiAob2Zmc2V0KSB7XG5cdGlmIChvZmZzZXQgPT09IDApIHtcblx0XHRyZXR1cm4gMDsgLy8gdW5kZWZpbmVkXG5cdH1cblx0aWYgKG9mZnNldCA8IDApIHtcblx0XHRvZmZzZXQgKz0gMTsgLy8gZS5nLiwgdHJhbnNsYXRlIExBKC0xKSB0byB1c2Ugb2Zmc2V0PTBcblx0fVxuXHR2YXIgcG9zID0gdGhpcy5faW5kZXggKyBvZmZzZXQgLSAxO1xuXHRpZiAocG9zIDwgMCB8fCBwb3MgPj0gdGhpcy5fc2l6ZSkge1xuXHRcdC8vIGludmFsaWRcblx0XHRyZXR1cm4gVG9rZW4uRU9GO1xuXHR9XG5cdHJldHVybiB0aGlzLmRhdGFbcG9zXTtcbn07XG5cbklucHV0U3RyZWFtLnByb3RvdHlwZS5MVCA9IGZ1bmN0aW9uIChvZmZzZXQpIHtcblx0cmV0dXJuIHRoaXMuTEEob2Zmc2V0KTtcbn07XG5cbi8vIG1hcmsvcmVsZWFzZSBkbyBub3RoaW5nOyB3ZSBoYXZlIGVudGlyZSBidWZmZXJcbklucHV0U3RyZWFtLnByb3RvdHlwZS5tYXJrID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gLTE7XG59O1xuXG5JbnB1dFN0cmVhbS5wcm90b3R5cGUucmVsZWFzZSA9IGZ1bmN0aW9uIChtYXJrZXIpIHt9O1xuXG4vLyBjb25zdW1lKCkgYWhlYWQgdW50aWwgcD09X2luZGV4OyBjYW4ndCBqdXN0IHNldCBwPV9pbmRleCBhcyB3ZSBtdXN0XG4vLyB1cGRhdGUgbGluZSBhbmQgY29sdW1uLiBJZiB3ZSBzZWVrIGJhY2t3YXJkcywganVzdCBzZXQgcFxuLy9cbklucHV0U3RyZWFtLnByb3RvdHlwZS5zZWVrID0gZnVuY3Rpb24gKF9pbmRleCkge1xuXHRpZiAoX2luZGV4IDw9IHRoaXMuX2luZGV4KSB7XG5cdFx0dGhpcy5faW5kZXggPSBfaW5kZXg7IC8vIGp1c3QganVtcDsgZG9uJ3QgdXBkYXRlIHN0cmVhbSBzdGF0ZSAobGluZSxcblx0XHQvLyAuLi4pXG5cdFx0cmV0dXJuO1xuXHR9XG5cdC8vIHNlZWsgZm9yd2FyZFxuXHR0aGlzLl9pbmRleCA9IE1hdGgubWluKF9pbmRleCwgdGhpcy5fc2l6ZSk7XG59O1xuXG5JbnB1dFN0cmVhbS5wcm90b3R5cGUuZ2V0VGV4dCA9IGZ1bmN0aW9uIChzdGFydCwgc3RvcCkge1xuXHRpZiAoc3RvcCA+PSB0aGlzLl9zaXplKSB7XG5cdFx0c3RvcCA9IHRoaXMuX3NpemUgLSAxO1xuXHR9XG5cdGlmIChzdGFydCA+PSB0aGlzLl9zaXplKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH0gZWxzZSB7XG5cdFx0aWYgKHRoaXMuZGVjb2RlVG9Vbmljb2RlQ29kZVBvaW50cykge1xuXHRcdFx0dmFyIHJlc3VsdCA9IFwiXCI7XG5cdFx0XHRmb3IgKHZhciBpID0gc3RhcnQ7IGkgPD0gc3RvcDsgaSsrKSB7XG5cdFx0XHRcdHJlc3VsdCArPSBTdHJpbmcuZnJvbUNvZGVQb2ludCh0aGlzLmRhdGFbaV0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMuc3RyZGF0YS5zbGljZShzdGFydCwgc3RvcCArIDEpO1xuXHRcdH1cblx0fVxufTtcblxuSW5wdXRTdHJlYW0ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gdGhpcy5zdHJkYXRhO1xufTtcblxuZXhwb3J0cy5JbnB1dFN0cmVhbSA9IElucHV0U3RyZWFtOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/InputStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/IntervalSet.js":
/*!***********************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/IntervalSet.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/*jslint smarttabs:true */\n\nvar Token = (__webpack_require__(/*! ./Token */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Token.js\").Token);\n\n/* stop is not included! */\nfunction Interval(start, stop) {\n\tthis.start = start;\n\tthis.stop = stop;\n\treturn this;\n}\n\nInterval.prototype.contains = function (item) {\n\treturn item >= this.start && item < this.stop;\n};\n\nInterval.prototype.toString = function () {\n\tif (this.start === this.stop - 1) {\n\t\treturn this.start.toString();\n\t} else {\n\t\treturn this.start.toString() + \"..\" + (this.stop - 1).toString();\n\t}\n};\n\nObject.defineProperty(Interval.prototype, \"length\", {\n\tget: function get() {\n\t\treturn this.stop - this.start;\n\t}\n});\n\nfunction IntervalSet() {\n\tthis.intervals = null;\n\tthis.readOnly = false;\n}\n\nIntervalSet.prototype.first = function (v) {\n\tif (this.intervals === null || this.intervals.length === 0) {\n\t\treturn Token.INVALID_TYPE;\n\t} else {\n\t\treturn this.intervals[0].start;\n\t}\n};\n\nIntervalSet.prototype.addOne = function (v) {\n\tthis.addInterval(new Interval(v, v + 1));\n};\n\nIntervalSet.prototype.addRange = function (l, h) {\n\tthis.addInterval(new Interval(l, h + 1));\n};\n\nIntervalSet.prototype.addInterval = function (v) {\n\tif (this.intervals === null) {\n\t\tthis.intervals = [];\n\t\tthis.intervals.push(v);\n\t} else {\n\t\t// find insert pos\n\t\tfor (var k = 0; k < this.intervals.length; k++) {\n\t\t\tvar i = this.intervals[k];\n\t\t\t// distinct range -> insert\n\t\t\tif (v.stop < i.start) {\n\t\t\t\tthis.intervals.splice(k, 0, v);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// contiguous range -> adjust\n\t\t\telse if (v.stop === i.start) {\n\t\t\t\t\tthis.intervals[k].start = v.start;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// overlapping range -> adjust and reduce\n\t\t\t\telse if (v.start <= i.stop) {\n\t\t\t\t\t\tthis.intervals[k] = new Interval(Math.min(i.start, v.start), Math.max(i.stop, v.stop));\n\t\t\t\t\t\tthis.reduce(k);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t}\n\t\t// greater than any existing\n\t\tthis.intervals.push(v);\n\t}\n};\n\nIntervalSet.prototype.addSet = function (other) {\n\tif (other.intervals !== null) {\n\t\tfor (var k = 0; k < other.intervals.length; k++) {\n\t\t\tvar i = other.intervals[k];\n\t\t\tthis.addInterval(new Interval(i.start, i.stop));\n\t\t}\n\t}\n\treturn this;\n};\n\nIntervalSet.prototype.reduce = function (k) {\n\t// only need to reduce if k is not the last\n\tif (k < this.intervalslength - 1) {\n\t\tvar l = this.intervals[k];\n\t\tvar r = this.intervals[k + 1];\n\t\t// if r contained in l\n\t\tif (l.stop >= r.stop) {\n\t\t\tthis.intervals.pop(k + 1);\n\t\t\tthis.reduce(k);\n\t\t} else if (l.stop >= r.start) {\n\t\t\tthis.intervals[k] = new Interval(l.start, r.stop);\n\t\t\tthis.intervals.pop(k + 1);\n\t\t}\n\t}\n};\n\nIntervalSet.prototype.complement = function (start, stop) {\n\tvar result = new IntervalSet();\n\tresult.addInterval(new Interval(start, stop + 1));\n\tfor (var i = 0; i < this.intervals.length; i++) {\n\t\tresult.removeRange(this.intervals[i]);\n\t}\n\treturn result;\n};\n\nIntervalSet.prototype.contains = function (item) {\n\tif (this.intervals === null) {\n\t\treturn false;\n\t} else {\n\t\tfor (var k = 0; k < this.intervals.length; k++) {\n\t\t\tif (this.intervals[k].contains(item)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n};\n\nObject.defineProperty(IntervalSet.prototype, \"length\", {\n\tget: function get() {\n\t\tvar len = 0;\n\t\tthis.intervals.map(function (i) {\n\t\t\tlen += i.length;\n\t\t});\n\t\treturn len;\n\t}\n});\n\nIntervalSet.prototype.removeRange = function (v) {\n\tif (v.start === v.stop - 1) {\n\t\tthis.removeOne(v.start);\n\t} else if (this.intervals !== null) {\n\t\tvar k = 0;\n\t\tfor (var n = 0; n < this.intervals.length; n++) {\n\t\t\tvar i = this.intervals[k];\n\t\t\t// intervals are ordered\n\t\t\tif (v.stop <= i.start) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// check for including range, split it\n\t\t\telse if (v.start > i.start && v.stop < i.stop) {\n\t\t\t\t\tthis.intervals[k] = new Interval(i.start, v.start);\n\t\t\t\t\tvar x = new Interval(v.stop, i.stop);\n\t\t\t\t\tthis.intervals.splice(k, 0, x);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for included range, remove it\n\t\t\t\telse if (v.start <= i.start && v.stop >= i.stop) {\n\t\t\t\t\t\tthis.intervals.splice(k, 1);\n\t\t\t\t\t\tk = k - 1; // need another pass\n\t\t\t\t\t}\n\t\t\t\t\t// check for lower boundary\n\t\t\t\t\telse if (v.start < i.stop) {\n\t\t\t\t\t\t\tthis.intervals[k] = new Interval(i.start, v.start);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// check for upper boundary\n\t\t\t\t\t\telse if (v.stop < i.stop) {\n\t\t\t\t\t\t\t\tthis.intervals[k] = new Interval(v.stop, i.stop);\n\t\t\t\t\t\t\t}\n\t\t\tk += 1;\n\t\t}\n\t}\n};\n\nIntervalSet.prototype.removeOne = function (v) {\n\tif (this.intervals !== null) {\n\t\tfor (var k = 0; k < this.intervals.length; k++) {\n\t\t\tvar i = this.intervals[k];\n\t\t\t// intervals is ordered\n\t\t\tif (v < i.start) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// check for single value range\n\t\t\telse if (v === i.start && v === i.stop - 1) {\n\t\t\t\t\tthis.intervals.splice(k, 1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for lower boundary\n\t\t\t\telse if (v === i.start) {\n\t\t\t\t\t\tthis.intervals[k] = new Interval(i.start + 1, i.stop);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// check for upper boundary\n\t\t\t\t\telse if (v === i.stop - 1) {\n\t\t\t\t\t\t\tthis.intervals[k] = new Interval(i.start, i.stop - 1);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// split existing range\n\t\t\t\t\t\telse if (v < i.stop - 1) {\n\t\t\t\t\t\t\t\tvar x = new Interval(i.start, v);\n\t\t\t\t\t\t\t\ti.start = v + 1;\n\t\t\t\t\t\t\t\tthis.intervals.splice(k, 0, x);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t}\n\t}\n};\n\nIntervalSet.prototype.toString = function (literalNames, symbolicNames, elemsAreChar) {\n\tliteralNames = literalNames || null;\n\tsymbolicNames = symbolicNames || null;\n\telemsAreChar = elemsAreChar || false;\n\tif (this.intervals === null) {\n\t\treturn \"{}\";\n\t} else if (literalNames !== null || symbolicNames !== null) {\n\t\treturn this.toTokenString(literalNames, symbolicNames);\n\t} else if (elemsAreChar) {\n\t\treturn this.toCharString();\n\t} else {\n\t\treturn this.toIndexString();\n\t}\n};\n\nIntervalSet.prototype.toCharString = function () {\n\tvar names = [];\n\tfor (var i = 0; i < this.intervals.length; i++) {\n\t\tvar v = this.intervals[i];\n\t\tif (v.stop === v.start + 1) {\n\t\t\tif (v.start === Token.EOF) {\n\t\t\t\tnames.push(\"<EOF>\");\n\t\t\t} else {\n\t\t\t\tnames.push(\"'\" + String.fromCharCode(v.start) + \"'\");\n\t\t\t}\n\t\t} else {\n\t\t\tnames.push(\"'\" + String.fromCharCode(v.start) + \"'..'\" + String.fromCharCode(v.stop - 1) + \"'\");\n\t\t}\n\t}\n\tif (names.length > 1) {\n\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t} else {\n\t\treturn names[0];\n\t}\n};\n\nIntervalSet.prototype.toIndexString = function () {\n\tvar names = [];\n\tfor (var i = 0; i < this.intervals.length; i++) {\n\t\tvar v = this.intervals[i];\n\t\tif (v.stop === v.start + 1) {\n\t\t\tif (v.start === Token.EOF) {\n\t\t\t\tnames.push(\"<EOF>\");\n\t\t\t} else {\n\t\t\t\tnames.push(v.start.toString());\n\t\t\t}\n\t\t} else {\n\t\t\tnames.push(v.start.toString() + \"..\" + (v.stop - 1).toString());\n\t\t}\n\t}\n\tif (names.length > 1) {\n\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t} else {\n\t\treturn names[0];\n\t}\n};\n\nIntervalSet.prototype.toTokenString = function (literalNames, symbolicNames) {\n\tvar names = [];\n\tfor (var i = 0; i < this.intervals.length; i++) {\n\t\tvar v = this.intervals[i];\n\t\tfor (var j = v.start; j < v.stop; j++) {\n\t\t\tnames.push(this.elementName(literalNames, symbolicNames, j));\n\t\t}\n\t}\n\tif (names.length > 1) {\n\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t} else {\n\t\treturn names[0];\n\t}\n};\n\nIntervalSet.prototype.elementName = function (literalNames, symbolicNames, a) {\n\tif (a === Token.EOF) {\n\t\treturn \"<EOF>\";\n\t} else if (a === Token.EPSILON) {\n\t\treturn \"<EPSILON>\";\n\t} else {\n\t\treturn literalNames[a] || symbolicNames[a];\n\t}\n};\n\nexports.Interval = Interval;\nexports.IntervalSet = IntervalSet;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/IntervalSet.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/LL1Analyzer.js":
/*!***********************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/LL1Analyzer.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\nvar Set = (__webpack_require__(/*! ./Utils */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Utils.js\").Set);\nvar BitSet = (__webpack_require__(/*! ./Utils */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Utils.js\").BitSet);\nvar Token = (__webpack_require__(/*! ./Token */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Token.js\").Token);\nvar ATNConfig = (__webpack_require__(/*! ./atn/ATNConfig */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNConfig.js\").ATNConfig);\nvar Interval = (__webpack_require__(/*! ./IntervalSet */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/IntervalSet.js\").Interval);\nvar IntervalSet = (__webpack_require__(/*! ./IntervalSet */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/IntervalSet.js\").IntervalSet);\nvar RuleStopState = (__webpack_require__(/*! ./atn/ATNState */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNState.js\").RuleStopState);\nvar RuleTransition = (__webpack_require__(/*! ./atn/Transition */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/Transition.js\").RuleTransition);\nvar NotSetTransition = (__webpack_require__(/*! ./atn/Transition */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/Transition.js\").NotSetTransition);\nvar WildcardTransition = (__webpack_require__(/*! ./atn/Transition */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/Transition.js\").WildcardTransition);\nvar AbstractPredicateTransition = (__webpack_require__(/*! ./atn/Transition */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/Transition.js\").AbstractPredicateTransition);\n\nvar pc = __webpack_require__(/*! ./PredictionContext */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/PredictionContext.js\");\nvar predictionContextFromRuleContext = pc.predictionContextFromRuleContext;\nvar PredictionContext = pc.PredictionContext;\nvar SingletonPredictionContext = pc.SingletonPredictionContext;\n\nfunction LL1Analyzer(atn) {\n    this.atn = atn;\n}\n\n//* Special value added to the lookahead sets to indicate that we hit\n//  a predicate during analysis if {@code seeThruPreds==false}.\n///\nLL1Analyzer.HIT_PRED = Token.INVALID_TYPE;\n\n//*\n// Calculates the SLL(1) expected lookahead set for each outgoing transition\n// of an {@link ATNState}. The returned array has one element for each\n// outgoing transition in {@code s}. If the closure from transition\n// <em>i</em> leads to a semantic predicate before matching a symbol, the\n// element at index <em>i</em> of the result will be {@code null}.\n//\n// @param s the ATN state\n// @return the expected symbols for each outgoing transition of {@code s}.\n///\nLL1Analyzer.prototype.getDecisionLookahead = function (s) {\n    if (s === null) {\n        return null;\n    }\n    var count = s.transitions.length;\n    var look = [];\n    for (var alt = 0; alt < count; alt++) {\n        look[alt] = new IntervalSet();\n        var lookBusy = new Set();\n        var seeThruPreds = false; // fail to get lookahead upon pred\n        this._LOOK(s.transition(alt).target, null, PredictionContext.EMPTY, look[alt], lookBusy, new BitSet(), seeThruPreds, false);\n        // Wipe out lookahead for this alternative if we found nothing\n        // or we had a predicate when we !seeThruPreds\n        if (look[alt].length === 0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {\n            look[alt] = null;\n        }\n    }\n    return look;\n};\n\n//*\n// Compute set of tokens that can follow {@code s} in the ATN in the\n// specified {@code ctx}.\n//\n// <p>If {@code ctx} is {@code null} and the end of the rule containing\n// {@code s} is reached, {@link Token//EPSILON} is added to the result set.\n// If {@code ctx} is not {@code null} and the end of the outermost rule is\n// reached, {@link Token//EOF} is added to the result set.</p>\n//\n// @param s the ATN state\n// @param stopState the ATN state to stop at. This can be a\n// {@link BlockEndState} to detect epsilon paths through a closure.\n// @param ctx the complete parser context, or {@code null} if the context\n// should be ignored\n//\n// @return The set of tokens that can follow {@code s} in the ATN in the\n// specified {@code ctx}.\n///\nLL1Analyzer.prototype.LOOK = function (s, stopState, ctx) {\n    var r = new IntervalSet();\n    var seeThruPreds = true; // ignore preds; get all lookahead\n    ctx = ctx || null;\n    var lookContext = ctx !== null ? predictionContextFromRuleContext(s.atn, ctx) : null;\n    this._LOOK(s, stopState, lookContext, r, new Set(), new BitSet(), seeThruPreds, true);\n    return r;\n};\n\n//*\n// Compute set of tokens that can follow {@code s} in the ATN in the\n// specified {@code ctx}.\n//\n// <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the\n// rule containing {@code s} is reached, {@link Token//EPSILON} is added to\n// the result set. If {@code ctx} is not {@code null} and {@code addEOF} is\n// {@code true} and {@code stopState} or the end of the outermost rule is\n// reached, {@link Token//EOF} is added to the result set.</p>\n//\n// @param s the ATN state.\n// @param stopState the ATN state to stop at. This can be a\n// {@link BlockEndState} to detect epsilon paths through a closure.\n// @param ctx The outer context, or {@code null} if the outer context should\n// not be used.\n// @param look The result lookahead set.\n// @param lookBusy A set used for preventing epsilon closures in the ATN\n// from causing a stack overflow. Outside code should pass\n// {@code new Set<ATNConfig>} for this argument.\n// @param calledRuleStack A set used for preventing left recursion in the\n// ATN from causing a stack overflow. Outside code should pass\n// {@code new BitSet()} for this argument.\n// @param seeThruPreds {@code true} to true semantic predicates as\n// implicitly {@code true} and \"see through them\", otherwise {@code false}\n// to treat semantic predicates as opaque and add {@link //HIT_PRED} to the\n// result if one is encountered.\n// @param addEOF Add {@link Token//EOF} to the result if the end of the\n// outermost context is reached. This parameter has no effect if {@code ctx}\n// is {@code null}.\n///\nLL1Analyzer.prototype._LOOK = function (s, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {\n    var c = new ATNConfig({ state: s, alt: 0, context: ctx }, null);\n    if (lookBusy.contains(c)) {\n        return;\n    }\n    lookBusy.add(c);\n    if (s === stopState) {\n        if (ctx === null) {\n            look.addOne(Token.EPSILON);\n            return;\n        } else if (ctx.isEmpty() && addEOF) {\n            look.addOne(Token.EOF);\n            return;\n        }\n    }\n    if (s instanceof RuleStopState) {\n        if (ctx === null) {\n            look.addOne(Token.EPSILON);\n            return;\n        } else if (ctx.isEmpty() && addEOF) {\n            look.addOne(Token.EOF);\n            return;\n        }\n        if (ctx !== PredictionContext.EMPTY) {\n            // run thru all possible stack tops in ctx\n            for (var i = 0; i < ctx.length; i++) {\n                var returnState = this.atn.states[ctx.getReturnState(i)];\n                var removed = calledRuleStack.contains(returnState.ruleIndex);\n                try {\n                    calledRuleStack.remove(returnState.ruleIndex);\n                    this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n                } finally {\n                    if (removed) {\n                        calledRuleStack.add(returnState.ruleIndex);\n                    }\n                }\n            }\n            return;\n        }\n    }\n    for (var j = 0; j < s.transitions.length; j++) {\n        var t = s.transitions[j];\n        if (t.constructor === RuleTransition) {\n            if (calledRuleStack.contains(t.target.ruleIndex)) {\n                continue;\n            }\n            var newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber);\n            try {\n                calledRuleStack.add(t.target.ruleIndex);\n                this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n            } finally {\n                calledRuleStack.remove(t.target.ruleIndex);\n            }\n        } else if (t instanceof AbstractPredicateTransition) {\n            if (seeThruPreds) {\n                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n            } else {\n                look.addOne(LL1Analyzer.HIT_PRED);\n            }\n        } else if (t.isEpsilon) {\n            this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n        } else if (t.constructor === WildcardTransition) {\n            look.addRange(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);\n        } else {\n            var set = t.label;\n            if (set !== null) {\n                if (t instanceof NotSetTransition) {\n                    set = set.complement(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);\n                }\n                look.addSet(set);\n            }\n        }\n    }\n};\n\nexports.LL1Analyzer = LL1Analyzer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/LL1Analyzer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Lexer.js":
/*!*****************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/Lexer.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\n// A lexer is recognizer that draws input symbols from a character stream.\n//  lexer grammars result in a subclass of this object. A Lexer object\n//  uses simplified match() and error recovery mechanisms in the interest of speed.\n\nvar Token = (__webpack_require__(/*! ./Token */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Token.js\").Token);\nvar Recognizer = (__webpack_require__(/*! ./Recognizer */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Recognizer.js\").Recognizer);\nvar CommonTokenFactory = (__webpack_require__(/*! ./CommonTokenFactory */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/CommonTokenFactory.js\").CommonTokenFactory);\nvar RecognitionException = (__webpack_require__(/*! ./error/Errors */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/Errors.js\").RecognitionException);\nvar LexerNoViableAltException = (__webpack_require__(/*! ./error/Errors */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/Errors.js\").LexerNoViableAltException);\n\nfunction TokenSource() {\n\treturn this;\n}\n\nfunction Lexer(input) {\n\tRecognizer.call(this);\n\tthis._input = input;\n\tthis._factory = CommonTokenFactory.DEFAULT;\n\tthis._tokenFactorySourcePair = [this, input];\n\n\tthis._interp = null; // child classes must populate this\n\n\t// The goal of all lexer rules/methods is to create a token object.\n\t// this is an instance variable as multiple rules may collaborate to\n\t// create a single token. nextToken will return this object after\n\t// matching lexer rule(s). If you subclass to allow multiple token\n\t// emissions, then set this to the last token to be matched or\n\t// something nonnull so that the auto token emit mechanism will not\n\t// emit another token.\n\tthis._token = null;\n\n\t// What character index in the stream did the current token start at?\n\t// Needed, for example, to get the text for current token. Set at\n\t// the start of nextToken.\n\tthis._tokenStartCharIndex = -1;\n\n\t// The line on which the first character of the token resides///\n\tthis._tokenStartLine = -1;\n\n\t// The character position of first character within the line///\n\tthis._tokenStartColumn = -1;\n\n\t// Once we see EOF on char stream, next token will be EOF.\n\t// If you have DONE : EOF ; then you see DONE EOF.\n\tthis._hitEOF = false;\n\n\t// The channel number for the current token///\n\tthis._channel = Token.DEFAULT_CHANNEL;\n\n\t// The token type for the current token///\n\tthis._type = Token.INVALID_TYPE;\n\n\tthis._modeStack = [];\n\tthis._mode = Lexer.DEFAULT_MODE;\n\n\t// You can set the text for the current token to override what is in\n\t// the input char buffer. Use setText() or can set this instance var.\n\t// /\n\tthis._text = null;\n\n\treturn this;\n}\n\nLexer.prototype = Object.create(Recognizer.prototype);\nLexer.prototype.constructor = Lexer;\n\nLexer.DEFAULT_MODE = 0;\nLexer.MORE = -2;\nLexer.SKIP = -3;\n\nLexer.DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL;\nLexer.HIDDEN = Token.HIDDEN_CHANNEL;\nLexer.MIN_CHAR_VALUE = 0x0000;\nLexer.MAX_CHAR_VALUE = 0x10FFFF;\n\nLexer.prototype.reset = function () {\n\t// wack Lexer state variables\n\tif (this._input !== null) {\n\t\tthis._input.seek(0); // rewind the input\n\t}\n\tthis._token = null;\n\tthis._type = Token.INVALID_TYPE;\n\tthis._channel = Token.DEFAULT_CHANNEL;\n\tthis._tokenStartCharIndex = -1;\n\tthis._tokenStartColumn = -1;\n\tthis._tokenStartLine = -1;\n\tthis._text = null;\n\n\tthis._hitEOF = false;\n\tthis._mode = Lexer.DEFAULT_MODE;\n\tthis._modeStack = [];\n\n\tthis._interp.reset();\n};\n\n// Return a token from this source; i.e., match a token on the char stream.\nLexer.prototype.nextToken = function () {\n\tif (this._input === null) {\n\t\tthrow \"nextToken requires a non-null input stream.\";\n\t}\n\n\t// Mark start location in char stream so unbuffered streams are\n\t// guaranteed at least have text of current token\n\tvar tokenStartMarker = this._input.mark();\n\ttry {\n\t\twhile (true) {\n\t\t\tif (this._hitEOF) {\n\t\t\t\tthis.emitEOF();\n\t\t\t\treturn this._token;\n\t\t\t}\n\t\t\tthis._token = null;\n\t\t\tthis._channel = Token.DEFAULT_CHANNEL;\n\t\t\tthis._tokenStartCharIndex = this._input.index;\n\t\t\tthis._tokenStartColumn = this._interp.column;\n\t\t\tthis._tokenStartLine = this._interp.line;\n\t\t\tthis._text = null;\n\t\t\tvar continueOuter = false;\n\t\t\twhile (true) {\n\t\t\t\tthis._type = Token.INVALID_TYPE;\n\t\t\t\tvar ttype = Lexer.SKIP;\n\t\t\t\ttry {\n\t\t\t\t\tttype = this._interp.match(this._input, this._mode);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (e instanceof RecognitionException) {\n\t\t\t\t\t\tthis.notifyListeners(e); // report error\n\t\t\t\t\t\tthis.recover(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(e.stack);\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this._input.LA(1) === Token.EOF) {\n\t\t\t\t\tthis._hitEOF = true;\n\t\t\t\t}\n\t\t\t\tif (this._type === Token.INVALID_TYPE) {\n\t\t\t\t\tthis._type = ttype;\n\t\t\t\t}\n\t\t\t\tif (this._type === Lexer.SKIP) {\n\t\t\t\t\tcontinueOuter = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (this._type !== Lexer.MORE) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (continueOuter) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (this._token === null) {\n\t\t\t\tthis.emit();\n\t\t\t}\n\t\t\treturn this._token;\n\t\t}\n\t} finally {\n\t\t// make sure we release marker after match or\n\t\t// unbuffered char stream will keep buffering\n\t\tthis._input.release(tokenStartMarker);\n\t}\n};\n\n// Instruct the lexer to skip creating a token for current lexer rule\n// and look for another token. nextToken() knows to keep looking when\n// a lexer rule finishes with token set to SKIP_TOKEN. Recall that\n// if token==null at end of any token rule, it creates one for you\n// and emits it.\n// /\nLexer.prototype.skip = function () {\n\tthis._type = Lexer.SKIP;\n};\n\nLexer.prototype.more = function () {\n\tthis._type = Lexer.MORE;\n};\n\nLexer.prototype.mode = function (m) {\n\tthis._mode = m;\n};\n\nLexer.prototype.pushMode = function (m) {\n\tif (this._interp.debug) {\n\t\tconsole.log(\"pushMode \" + m);\n\t}\n\tthis._modeStack.push(this._mode);\n\tthis.mode(m);\n};\n\nLexer.prototype.popMode = function () {\n\tif (this._modeStack.length === 0) {\n\t\tthrow \"Empty Stack\";\n\t}\n\tif (this._interp.debug) {\n\t\tconsole.log(\"popMode back to \" + this._modeStack.slice(0, -1));\n\t}\n\tthis.mode(this._modeStack.pop());\n\treturn this._mode;\n};\n\n// Set the char stream and reset the lexer\nObject.defineProperty(Lexer.prototype, \"inputStream\", {\n\tget: function get() {\n\t\treturn this._input;\n\t},\n\tset: function set(input) {\n\t\tthis._input = null;\n\t\tthis._tokenFactorySourcePair = [this, this._input];\n\t\tthis.reset();\n\t\tthis._input = input;\n\t\tthis._tokenFactorySourcePair = [this, this._input];\n\t}\n});\n\nObject.defineProperty(Lexer.prototype, \"sourceName\", {\n\tget: function sourceName() {\n\t\treturn this._input.sourceName;\n\t}\n});\n\n// By default does not support multiple emits per nextToken invocation\n// for efficiency reasons. Subclass and override this method, nextToken,\n// and getToken (to push tokens into a list and pull from that list\n// rather than a single variable as this implementation does).\n// /\nLexer.prototype.emitToken = function (token) {\n\tthis._token = token;\n};\n\n// The standard method called to automatically emit a token at the\n// outermost lexical rule. The token object should point into the\n// char buffer start..stop. If there is a text override in 'text',\n// use that to set the token's text. Override this method to emit\n// custom Token objects or provide a new factory.\n// /\nLexer.prototype.emit = function () {\n\tvar t = this._factory.create(this._tokenFactorySourcePair, this._type, this._text, this._channel, this._tokenStartCharIndex, this.getCharIndex() - 1, this._tokenStartLine, this._tokenStartColumn);\n\tthis.emitToken(t);\n\treturn t;\n};\n\nLexer.prototype.emitEOF = function () {\n\tvar cpos = this.column;\n\tvar lpos = this.line;\n\tvar eof = this._factory.create(this._tokenFactorySourcePair, Token.EOF, null, Token.DEFAULT_CHANNEL, this._input.index, this._input.index - 1, lpos, cpos);\n\tthis.emitToken(eof);\n\treturn eof;\n};\n\nObject.defineProperty(Lexer.prototype, \"type\", {\n\tget: function get() {\n\t\treturn this.type;\n\t},\n\tset: function set(type) {\n\t\tthis._type = type;\n\t}\n});\n\nObject.defineProperty(Lexer.prototype, \"line\", {\n\tget: function get() {\n\t\treturn this._interp.line;\n\t},\n\tset: function set(line) {\n\t\tthis._interp.line = line;\n\t}\n});\n\nObject.defineProperty(Lexer.prototype, \"column\", {\n\tget: function get() {\n\t\treturn this._interp.column;\n\t},\n\tset: function set(column) {\n\t\tthis._interp.column = column;\n\t}\n});\n\n// What is the index of the current character of lookahead?///\nLexer.prototype.getCharIndex = function () {\n\treturn this._input.index;\n};\n\n// Return the text matched so far for the current token or any text override.\n//Set the complete text of this token; it wipes any previous changes to the text.\nObject.defineProperty(Lexer.prototype, \"text\", {\n\tget: function get() {\n\t\tif (this._text !== null) {\n\t\t\treturn this._text;\n\t\t} else {\n\t\t\treturn this._interp.getText(this._input);\n\t\t}\n\t},\n\tset: function set(text) {\n\t\tthis._text = text;\n\t}\n});\n// Return a list of all Token objects in input char stream.\n// Forces load of all tokens. Does not include EOF token.\n// /\nLexer.prototype.getAllTokens = function () {\n\tvar tokens = [];\n\tvar t = this.nextToken();\n\twhile (t.type !== Token.EOF) {\n\t\ttokens.push(t);\n\t\tt = this.nextToken();\n\t}\n\treturn tokens;\n};\n\nLexer.prototype.notifyListeners = function (e) {\n\tvar start = this._tokenStartCharIndex;\n\tvar stop = this._input.index;\n\tvar text = this._input.getText(start, stop);\n\tvar msg = \"token recognition error at: '\" + this.getErrorDisplay(text) + \"'\";\n\tvar listener = this.getErrorListenerDispatch();\n\tlistener.syntaxError(this, null, this._tokenStartLine, this._tokenStartColumn, msg, e);\n};\n\nLexer.prototype.getErrorDisplay = function (s) {\n\tvar d = [];\n\tfor (var i = 0; i < s.length; i++) {\n\t\td.push(s[i]);\n\t}\n\treturn d.join('');\n};\n\nLexer.prototype.getErrorDisplayForChar = function (c) {\n\tif (c.charCodeAt(0) === Token.EOF) {\n\t\treturn \"<EOF>\";\n\t} else if (c === '\\n') {\n\t\treturn \"\\\\n\";\n\t} else if (c === '\\t') {\n\t\treturn \"\\\\t\";\n\t} else if (c === '\\r') {\n\t\treturn \"\\\\r\";\n\t} else {\n\t\treturn c;\n\t}\n};\n\nLexer.prototype.getCharErrorDisplay = function (c) {\n\treturn \"'\" + this.getErrorDisplayForChar(c) + \"'\";\n};\n\n// Lexers can normally match any char in it's vocabulary after matching\n// a token, so do the easy thing and just kill a character and hope\n// it all works out. You can instead use the rule invocation stack\n// to do sophisticated error recovery if you are in a fragment rule.\n// /\nLexer.prototype.recover = function (re) {\n\tif (this._input.LA(1) !== Token.EOF) {\n\t\tif (re instanceof LexerNoViableAltException) {\n\t\t\t// skip a char and try again\n\t\t\tthis._interp.consume(this._input);\n\t\t} else {\n\t\t\t// TODO: Do we lose character or line position information?\n\t\t\tthis._input.consume();\n\t\t}\n\t}\n};\n\nexports.Lexer = Lexer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Lexer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Parser.js":
/*!******************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/Parser.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nvar Token = (__webpack_require__(/*! ./Token */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Token.js\").Token);\nvar ParseTreeListener = (__webpack_require__(/*! ./tree/Tree */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/tree/Tree.js\").ParseTreeListener);\nvar Recognizer = (__webpack_require__(/*! ./Recognizer */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Recognizer.js\").Recognizer);\nvar DefaultErrorStrategy = (__webpack_require__(/*! ./error/ErrorStrategy */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/ErrorStrategy.js\").DefaultErrorStrategy);\nvar ATNDeserializer = (__webpack_require__(/*! ./atn/ATNDeserializer */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNDeserializer.js\").ATNDeserializer);\nvar ATNDeserializationOptions = (__webpack_require__(/*! ./atn/ATNDeserializationOptions */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNDeserializationOptions.js\").ATNDeserializationOptions);\nvar TerminalNode = (__webpack_require__(/*! ./tree/Tree */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/tree/Tree.js\").TerminalNode);\nvar ErrorNode = (__webpack_require__(/*! ./tree/Tree */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/tree/Tree.js\").ErrorNode);\n\nfunction TraceListener(parser) {\n\tParseTreeListener.call(this);\n\tthis.parser = parser;\n\treturn this;\n}\n\nTraceListener.prototype = Object.create(ParseTreeListener.prototype);\nTraceListener.prototype.constructor = TraceListener;\n\nTraceListener.prototype.enterEveryRule = function (ctx) {\n\tconsole.log(\"enter   \" + this.parser.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n};\n\nTraceListener.prototype.visitTerminal = function (node) {\n\tconsole.log(\"consume \" + node.symbol + \" rule \" + this.parser.ruleNames[this.parser._ctx.ruleIndex]);\n};\n\nTraceListener.prototype.exitEveryRule = function (ctx) {\n\tconsole.log(\"exit    \" + this.parser.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n};\n\n// this is all the parsing support code essentially; most of it is error\n// recovery stuff.//\nfunction Parser(input) {\n\tRecognizer.call(this);\n\t// The input stream.\n\tthis._input = null;\n\t// The error handling strategy for the parser. The default value is a new\n\t// instance of {@link DefaultErrorStrategy}.\n\tthis._errHandler = new DefaultErrorStrategy();\n\tthis._precedenceStack = [];\n\tthis._precedenceStack.push(0);\n\t// The {@link ParserRuleContext} object for the currently executing rule.\n\t// this is always non-null during the parsing process.\n\tthis._ctx = null;\n\t// Specifies whether or not the parser should construct a parse tree during\n\t// the parsing process. The default value is {@code true}.\n\tthis.buildParseTrees = true;\n\t// When {@link //setTrace}{@code (true)} is called, a reference to the\n\t// {@link TraceListener} is stored here so it can be easily removed in a\n\t// later call to {@link //setTrace}{@code (false)}. The listener itself is\n\t// implemented as a parser listener so this field is not directly used by\n\t// other parser methods.\n\tthis._tracer = null;\n\t// The list of {@link ParseTreeListener} listeners registered to receive\n\t// events during the parse.\n\tthis._parseListeners = null;\n\t// The number of syntax errors reported during parsing. this value is\n\t// incremented each time {@link //notifyErrorListeners} is called.\n\tthis._syntaxErrors = 0;\n\tthis.setInputStream(input);\n\treturn this;\n}\n\nParser.prototype = Object.create(Recognizer.prototype);\nParser.prototype.contructor = Parser;\n\n// this field maps from the serialized ATN string to the deserialized {@link\n// ATN} with\n// bypass alternatives.\n//\n// @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()\n//\nParser.bypassAltsAtnCache = {};\n\n// reset the parser's state//\nParser.prototype.reset = function () {\n\tif (this._input !== null) {\n\t\tthis._input.seek(0);\n\t}\n\tthis._errHandler.reset(this);\n\tthis._ctx = null;\n\tthis._syntaxErrors = 0;\n\tthis.setTrace(false);\n\tthis._precedenceStack = [];\n\tthis._precedenceStack.push(0);\n\tif (this._interp !== null) {\n\t\tthis._interp.reset();\n\t}\n};\n\n// Match current input symbol against {@code ttype}. If the symbol type\n// matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are\n// called to complete the match process.\n//\n// <p>If the symbol type does not match,\n// {@link ANTLRErrorStrategy//recoverInline} is called on the current error\n// strategy to attempt recovery. If {@link //getBuildParseTree} is\n// {@code true} and the token index of the symbol returned by\n// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to\n// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>\n//\n// @param ttype the token type to match\n// @return the matched symbol\n// @throws RecognitionException if the current input symbol did not match\n// {@code ttype} and the error strategy could not recover from the\n// mismatched symbol\n\nParser.prototype.match = function (ttype) {\n\tvar t = this.getCurrentToken();\n\tif (t.type === ttype) {\n\t\tthis._errHandler.reportMatch(this);\n\t\tthis.consume();\n\t} else {\n\t\tt = this._errHandler.recoverInline(this);\n\t\tif (this.buildParseTrees && t.tokenIndex === -1) {\n\t\t\t// we must have conjured up a new token during single token\n\t\t\t// insertion\n\t\t\t// if it's not the current symbol\n\t\t\tthis._ctx.addErrorNode(t);\n\t\t}\n\t}\n\treturn t;\n};\n// Match current input symbol as a wildcard. If the symbol type matches\n// (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}\n// and {@link //consume} are called to complete the match process.\n//\n// <p>If the symbol type does not match,\n// {@link ANTLRErrorStrategy//recoverInline} is called on the current error\n// strategy to attempt recovery. If {@link //getBuildParseTree} is\n// {@code true} and the token index of the symbol returned by\n// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to\n// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>\n//\n// @return the matched symbol\n// @throws RecognitionException if the current input symbol did not match\n// a wildcard and the error strategy could not recover from the mismatched\n// symbol\n\nParser.prototype.matchWildcard = function () {\n\tvar t = this.getCurrentToken();\n\tif (t.type > 0) {\n\t\tthis._errHandler.reportMatch(this);\n\t\tthis.consume();\n\t} else {\n\t\tt = this._errHandler.recoverInline(this);\n\t\tif (this._buildParseTrees && t.tokenIndex === -1) {\n\t\t\t// we must have conjured up a new token during single token\n\t\t\t// insertion\n\t\t\t// if it's not the current symbol\n\t\t\tthis._ctx.addErrorNode(t);\n\t\t}\n\t}\n\treturn t;\n};\n\nParser.prototype.getParseListeners = function () {\n\treturn this._parseListeners || [];\n};\n\n// Registers {@code listener} to receive events during the parsing process.\n//\n// <p>To support output-preserving grammar transformations (including but not\n// limited to left-recursion removal, automated left-factoring, and\n// optimized code generation), calls to listener methods during the parse\n// may differ substantially from calls made by\n// {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In\n// particular, rule entry and exit events may occur in a different order\n// during the parse than after the parser. In addition, calls to certain\n// rule entry methods may be omitted.</p>\n//\n// <p>With the following specific exceptions, calls to listener events are\n// <em>deterministic</em>, i.e. for identical input the calls to listener\n// methods will be the same.</p>\n//\n// <ul>\n// <li>Alterations to the grammar used to generate code may change the\n// behavior of the listener calls.</li>\n// <li>Alterations to the command line options passed to ANTLR 4 when\n// generating the parser may change the behavior of the listener calls.</li>\n// <li>Changing the version of the ANTLR Tool used to generate the parser\n// may change the behavior of the listener calls.</li>\n// </ul>\n//\n// @param listener the listener to add\n//\n// @throws NullPointerException if {@code} listener is {@code null}\n//\nParser.prototype.addParseListener = function (listener) {\n\tif (listener === null) {\n\t\tthrow \"listener\";\n\t}\n\tif (this._parseListeners === null) {\n\t\tthis._parseListeners = [];\n\t}\n\tthis._parseListeners.push(listener);\n};\n\n//\n// Remove {@code listener} from the list of parse listeners.\n//\n// <p>If {@code listener} is {@code null} or has not been added as a parse\n// listener, this method does nothing.</p>\n// @param listener the listener to remove\n//\nParser.prototype.removeParseListener = function (listener) {\n\tif (this._parseListeners !== null) {\n\t\tvar idx = this._parseListeners.indexOf(listener);\n\t\tif (idx >= 0) {\n\t\t\tthis._parseListeners.splice(idx, 1);\n\t\t}\n\t\tif (this._parseListeners.length === 0) {\n\t\t\tthis._parseListeners = null;\n\t\t}\n\t}\n};\n\n// Remove all parse listeners.\nParser.prototype.removeParseListeners = function () {\n\tthis._parseListeners = null;\n};\n\n// Notify any parse listeners of an enter rule event.\nParser.prototype.triggerEnterRuleEvent = function () {\n\tif (this._parseListeners !== null) {\n\t\tvar ctx = this._ctx;\n\t\tthis._parseListeners.map(function (listener) {\n\t\t\tlistener.enterEveryRule(ctx);\n\t\t\tctx.enterRule(listener);\n\t\t});\n\t}\n};\n\n//\n// Notify any parse listeners of an exit rule event.\n//\n// @see //addParseListener\n//\nParser.prototype.triggerExitRuleEvent = function () {\n\tif (this._parseListeners !== null) {\n\t\t// reverse order walk of listeners\n\t\tvar ctx = this._ctx;\n\t\tthis._parseListeners.slice(0).reverse().map(function (listener) {\n\t\t\tctx.exitRule(listener);\n\t\t\tlistener.exitEveryRule(ctx);\n\t\t});\n\t}\n};\n\nParser.prototype.getTokenFactory = function () {\n\treturn this._input.tokenSource._factory;\n};\n\n// Tell our token source and error strategy about a new way to create tokens.//\nParser.prototype.setTokenFactory = function (factory) {\n\tthis._input.tokenSource._factory = factory;\n};\n\n// The ATN with bypass alternatives is expensive to create so we create it\n// lazily.\n//\n// @throws UnsupportedOperationException if the current parser does not\n// implement the {@link //getSerializedATN()} method.\n//\nParser.prototype.getATNWithBypassAlts = function () {\n\tvar serializedAtn = this.getSerializedATN();\n\tif (serializedAtn === null) {\n\t\tthrow \"The current parser does not support an ATN with bypass alternatives.\";\n\t}\n\tvar result = this.bypassAltsAtnCache[serializedAtn];\n\tif (result === null) {\n\t\tvar deserializationOptions = new ATNDeserializationOptions();\n\t\tdeserializationOptions.generateRuleBypassTransitions = true;\n\t\tresult = new ATNDeserializer(deserializationOptions).deserialize(serializedAtn);\n\t\tthis.bypassAltsAtnCache[serializedAtn] = result;\n\t}\n\treturn result;\n};\n\n// The preferred method of getting a tree pattern. For example, here's a\n// sample use:\n//\n// <pre>\n// ParseTree t = parser.expr();\n// ParseTreePattern p = parser.compileParseTreePattern(\"&lt;ID&gt;+0\",\n// MyParser.RULE_expr);\n// ParseTreeMatch m = p.match(t);\n// String id = m.get(\"ID\");\n// </pre>\n\nvar Lexer = (__webpack_require__(/*! ./Lexer */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Lexer.js\").Lexer);\n\nParser.prototype.compileParseTreePattern = function (pattern, patternRuleIndex, lexer) {\n\tlexer = lexer || null;\n\tif (lexer === null) {\n\t\tif (this.getTokenStream() !== null) {\n\t\t\tvar tokenSource = this.getTokenStream().tokenSource;\n\t\t\tif (tokenSource instanceof Lexer) {\n\t\t\t\tlexer = tokenSource;\n\t\t\t}\n\t\t}\n\t}\n\tif (lexer === null) {\n\t\tthrow \"Parser can't discover a lexer to use\";\n\t}\n\tvar m = new ParseTreePatternMatcher(lexer, this);\n\treturn m.compile(pattern, patternRuleIndex);\n};\n\nParser.prototype.getInputStream = function () {\n\treturn this.getTokenStream();\n};\n\nParser.prototype.setInputStream = function (input) {\n\tthis.setTokenStream(input);\n};\n\nParser.prototype.getTokenStream = function () {\n\treturn this._input;\n};\n\n// Set the token stream and reset the parser.//\nParser.prototype.setTokenStream = function (input) {\n\tthis._input = null;\n\tthis.reset();\n\tthis._input = input;\n};\n\n// Match needs to return the current input symbol, which gets put\n// into the label for the associated token ref; e.g., x=ID.\n//\nParser.prototype.getCurrentToken = function () {\n\treturn this._input.LT(1);\n};\n\nParser.prototype.notifyErrorListeners = function (msg, offendingToken, err) {\n\toffendingToken = offendingToken || null;\n\terr = err || null;\n\tif (offendingToken === null) {\n\t\toffendingToken = this.getCurrentToken();\n\t}\n\tthis._syntaxErrors += 1;\n\tvar line = offendingToken.line;\n\tvar column = offendingToken.column;\n\tvar listener = this.getErrorListenerDispatch();\n\tlistener.syntaxError(this, offendingToken, line, column, msg, err);\n};\n\n//\n// Consume and return the {@linkplain //getCurrentToken current symbol}.\n//\n// <p>E.g., given the following input with {@code A} being the current\n// lookahead symbol, this function moves the cursor to {@code B} and returns\n// {@code A}.</p>\n//\n// <pre>\n// A B\n// ^\n// </pre>\n//\n// If the parser is not in error recovery mode, the consumed symbol is added\n// to the parse tree using {@link ParserRuleContext//addChild(Token)}, and\n// {@link ParseTreeListener//visitTerminal} is called on any parse listeners.\n// If the parser <em>is</em> in error recovery mode, the consumed symbol is\n// added to the parse tree using\n// {@link ParserRuleContext//addErrorNode(Token)}, and\n// {@link ParseTreeListener//visitErrorNode} is called on any parse\n// listeners.\n//\nParser.prototype.consume = function () {\n\tvar o = this.getCurrentToken();\n\tif (o.type !== Token.EOF) {\n\t\tthis.getInputStream().consume();\n\t}\n\tvar hasListener = this._parseListeners !== null && this._parseListeners.length > 0;\n\tif (this.buildParseTrees || hasListener) {\n\t\tvar node;\n\t\tif (this._errHandler.inErrorRecoveryMode(this)) {\n\t\t\tnode = this._ctx.addErrorNode(o);\n\t\t} else {\n\t\t\tnode = this._ctx.addTokenNode(o);\n\t\t}\n\t\tnode.invokingState = this.state;\n\t\tif (hasListener) {\n\t\t\tthis._parseListeners.map(function (listener) {\n\t\t\t\tif (node instanceof ErrorNode || node.isErrorNode !== undefined && node.isErrorNode()) {\n\t\t\t\t\tlistener.visitErrorNode(node);\n\t\t\t\t} else if (node instanceof TerminalNode) {\n\t\t\t\t\tlistener.visitTerminal(node);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\treturn o;\n};\n\nParser.prototype.addContextToParseTree = function () {\n\t// add current context to parent if we have a parent\n\tif (this._ctx.parentCtx !== null) {\n\t\tthis._ctx.parentCtx.addChild(this._ctx);\n\t}\n};\n\n// Always called by generated parsers upon entry to a rule. Access field\n// {@link //_ctx} get the current context.\n\nParser.prototype.enterRule = function (localctx, state, ruleIndex) {\n\tthis.state = state;\n\tthis._ctx = localctx;\n\tthis._ctx.start = this._input.LT(1);\n\tif (this.buildParseTrees) {\n\t\tthis.addContextToParseTree();\n\t}\n\tif (this._parseListeners !== null) {\n\t\tthis.triggerEnterRuleEvent();\n\t}\n};\n\nParser.prototype.exitRule = function () {\n\tthis._ctx.stop = this._input.LT(-1);\n\t// trigger event on _ctx, before it reverts to parent\n\tif (this._parseListeners !== null) {\n\t\tthis.triggerExitRuleEvent();\n\t}\n\tthis.state = this._ctx.invokingState;\n\tthis._ctx = this._ctx.parentCtx;\n};\n\nParser.prototype.enterOuterAlt = function (localctx, altNum) {\n\tlocalctx.setAltNumber(altNum);\n\t// if we have new localctx, make sure we replace existing ctx\n\t// that is previous child of parse tree\n\tif (this.buildParseTrees && this._ctx !== localctx) {\n\t\tif (this._ctx.parentCtx !== null) {\n\t\t\tthis._ctx.parentCtx.removeLastChild();\n\t\t\tthis._ctx.parentCtx.addChild(localctx);\n\t\t}\n\t}\n\tthis._ctx = localctx;\n};\n\n// Get the precedence level for the top-most precedence rule.\n//\n// @return The precedence level for the top-most precedence rule, or -1 if\n// the parser context is not nested within a precedence rule.\n\nParser.prototype.getPrecedence = function () {\n\tif (this._precedenceStack.length === 0) {\n\t\treturn -1;\n\t} else {\n\t\treturn this._precedenceStack[this._precedenceStack.length - 1];\n\t}\n};\n\nParser.prototype.enterRecursionRule = function (localctx, state, ruleIndex, precedence) {\n\tthis.state = state;\n\tthis._precedenceStack.push(precedence);\n\tthis._ctx = localctx;\n\tthis._ctx.start = this._input.LT(1);\n\tif (this._parseListeners !== null) {\n\t\tthis.triggerEnterRuleEvent(); // simulates rule entry for\n\t\t// left-recursive rules\n\t}\n};\n\n//\n// Like {@link //enterRule} but for recursive rules.\n\nParser.prototype.pushNewRecursionContext = function (localctx, state, ruleIndex) {\n\tvar previous = this._ctx;\n\tprevious.parentCtx = localctx;\n\tprevious.invokingState = state;\n\tprevious.stop = this._input.LT(-1);\n\n\tthis._ctx = localctx;\n\tthis._ctx.start = previous.start;\n\tif (this.buildParseTrees) {\n\t\tthis._ctx.addChild(previous);\n\t}\n\tif (this._parseListeners !== null) {\n\t\tthis.triggerEnterRuleEvent(); // simulates rule entry for\n\t\t// left-recursive rules\n\t}\n};\n\nParser.prototype.unrollRecursionContexts = function (parentCtx) {\n\tthis._precedenceStack.pop();\n\tthis._ctx.stop = this._input.LT(-1);\n\tvar retCtx = this._ctx; // save current ctx (return value)\n\t// unroll so _ctx is as it was before call to recursive method\n\tif (this._parseListeners !== null) {\n\t\twhile (this._ctx !== parentCtx) {\n\t\t\tthis.triggerExitRuleEvent();\n\t\t\tthis._ctx = this._ctx.parentCtx;\n\t\t}\n\t} else {\n\t\tthis._ctx = parentCtx;\n\t}\n\t// hook into tree\n\tretCtx.parentCtx = parentCtx;\n\tif (this.buildParseTrees && parentCtx !== null) {\n\t\t// add return ctx into invoking rule's tree\n\t\tparentCtx.addChild(retCtx);\n\t}\n};\n\nParser.prototype.getInvokingContext = function (ruleIndex) {\n\tvar ctx = this._ctx;\n\twhile (ctx !== null) {\n\t\tif (ctx.ruleIndex === ruleIndex) {\n\t\t\treturn ctx;\n\t\t}\n\t\tctx = ctx.parentCtx;\n\t}\n\treturn null;\n};\n\nParser.prototype.precpred = function (localctx, precedence) {\n\treturn precedence >= this._precedenceStack[this._precedenceStack.length - 1];\n};\n\nParser.prototype.inContext = function (context) {\n\t// TODO: useful in parser?\n\treturn false;\n};\n\n//\n// Checks whether or not {@code symbol} can follow the current state in the\n// ATN. The behavior of this method is equivalent to the following, but is\n// implemented such that the complete context-sensitive follow set does not\n// need to be explicitly constructed.\n//\n// <pre>\n// return getExpectedTokens().contains(symbol);\n// </pre>\n//\n// @param symbol the symbol type to check\n// @return {@code true} if {@code symbol} can follow the current state in\n// the ATN, otherwise {@code false}.\n\nParser.prototype.isExpectedToken = function (symbol) {\n\tvar atn = this._interp.atn;\n\tvar ctx = this._ctx;\n\tvar s = atn.states[this.state];\n\tvar following = atn.nextTokens(s);\n\tif (following.contains(symbol)) {\n\t\treturn true;\n\t}\n\tif (!following.contains(Token.EPSILON)) {\n\t\treturn false;\n\t}\n\twhile (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {\n\t\tvar invokingState = atn.states[ctx.invokingState];\n\t\tvar rt = invokingState.transitions[0];\n\t\tfollowing = atn.nextTokens(rt.followState);\n\t\tif (following.contains(symbol)) {\n\t\t\treturn true;\n\t\t}\n\t\tctx = ctx.parentCtx;\n\t}\n\tif (following.contains(Token.EPSILON) && symbol === Token.EOF) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\n\n// Computes the set of input symbols which could follow the current parser\n// state and context, as given by {@link //getState} and {@link //getContext},\n// respectively.\n//\n// @see ATN//getExpectedTokens(int, RuleContext)\n//\nParser.prototype.getExpectedTokens = function () {\n\treturn this._interp.atn.getExpectedTokens(this.state, this._ctx);\n};\n\nParser.prototype.getExpectedTokensWithinCurrentRule = function () {\n\tvar atn = this._interp.atn;\n\tvar s = atn.states[this.state];\n\treturn atn.nextTokens(s);\n};\n\n// Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.//\nParser.prototype.getRuleIndex = function (ruleName) {\n\tvar ruleIndex = this.getRuleIndexMap()[ruleName];\n\tif (ruleIndex !== null) {\n\t\treturn ruleIndex;\n\t} else {\n\t\treturn -1;\n\t}\n};\n\n// Return List&lt;String&gt; of the rule names in your parser instance\n// leading up to a call to the current rule. You could override if\n// you want more details such as the file/line info of where\n// in the ATN a rule is invoked.\n//\n// this is very useful for error messages.\n//\nParser.prototype.getRuleInvocationStack = function (p) {\n\tp = p || null;\n\tif (p === null) {\n\t\tp = this._ctx;\n\t}\n\tvar stack = [];\n\twhile (p !== null) {\n\t\t// compute what follows who invoked us\n\t\tvar ruleIndex = p.ruleIndex;\n\t\tif (ruleIndex < 0) {\n\t\t\tstack.push(\"n/a\");\n\t\t} else {\n\t\t\tstack.push(this.ruleNames[ruleIndex]);\n\t\t}\n\t\tp = p.parentCtx;\n\t}\n\treturn stack;\n};\n\n// For debugging and other purposes.//\nParser.prototype.getDFAStrings = function () {\n\treturn this._interp.decisionToDFA.toString();\n};\n// For debugging and other purposes.//\nParser.prototype.dumpDFA = function () {\n\tvar seenOne = false;\n\tfor (var i = 0; i < this._interp.decisionToDFA.length; i++) {\n\t\tvar dfa = this._interp.decisionToDFA[i];\n\t\tif (dfa.states.length > 0) {\n\t\t\tif (seenOne) {\n\t\t\t\tconsole.log();\n\t\t\t}\n\t\t\tthis.printer.println(\"Decision \" + dfa.decision + \":\");\n\t\t\tthis.printer.print(dfa.toString(this.literalNames, this.symbolicNames));\n\t\t\tseenOne = true;\n\t\t}\n\t}\n};\n\n/*\n\"\t\t\tprinter = function() {\\r\\n\" +\n\"\t\t\t\tthis.println = function(s) { document.getElementById('output') += s + '\\\\n'; }\\r\\n\" +\n\"\t\t\t\tthis.print = function(s) { document.getElementById('output') += s; }\\r\\n\" +\n\"\t\t\t};\\r\\n\" +\n*/\n\nParser.prototype.getSourceName = function () {\n\treturn this._input.sourceName;\n};\n\n// During a parse is sometimes useful to listen in on the rule entry and exit\n// events as well as token matches. this is for quick and dirty debugging.\n//\nParser.prototype.setTrace = function (trace) {\n\tif (!trace) {\n\t\tthis.removeParseListener(this._tracer);\n\t\tthis._tracer = null;\n\t} else {\n\t\tif (this._tracer !== null) {\n\t\t\tthis.removeParseListener(this._tracer);\n\t\t}\n\t\tthis._tracer = new TraceListener(this);\n\t\tthis.addParseListener(this._tracer);\n\t}\n};\n\nexports.Parser = Parser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/ParserRuleContext.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/ParserRuleContext.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n//* A rule invocation record for parsing.\n//\n//  Contains all of the information about the current rule not stored in the\n//  RuleContext. It handles parse tree children list, Any ATN state\n//  tracing, and the default values available for rule indications:\n//  start, stop, rule index, current alt number, current\n//  ATN state.\n//\n//  Subclasses made for each rule and grammar track the parameters,\n//  return values, locals, and labels specific to that rule. These\n//  are the objects that are returned from rules.\n//\n//  Note text is not an actual field of a rule return value; it is computed\n//  from start and stop using the input stream's toString() method.  I\n//  could add a ctor to this so that we can pass in and store the input\n//  stream, but I'm not sure we want to do that.  It would seem to be undefined\n//  to get the .text property anyway if the rule matches tokens from multiple\n//  input streams.\n//\n//  I do not use getters for fields of objects that are used simply to\n//  group values such as this aggregate.  The getters/setters are there to\n//  satisfy the superclass interface.\n\nvar RuleContext = (__webpack_require__(/*! ./RuleContext */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/RuleContext.js\").RuleContext);\nvar Tree = __webpack_require__(/*! ./tree/Tree */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/tree/Tree.js\");\nvar INVALID_INTERVAL = Tree.INVALID_INTERVAL;\nvar TerminalNode = Tree.TerminalNode;\nvar TerminalNodeImpl = Tree.TerminalNodeImpl;\nvar ErrorNodeImpl = Tree.ErrorNodeImpl;\nvar Interval = (__webpack_require__(/*! ./IntervalSet */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/IntervalSet.js\").Interval);\n\nfunction ParserRuleContext(parent, invokingStateNumber) {\n  parent = parent || null;\n  invokingStateNumber = invokingStateNumber || null;\n  RuleContext.call(this, parent, invokingStateNumber);\n  this.ruleIndex = -1;\n  // * If we are debugging or building a parse tree for a visitor,\n  // we need to track all of the tokens and rule invocations associated\n  // with this rule's context. This is empty for parsing w/o tree constr.\n  // operation because we don't the need to track the details about\n  // how we parse this rule.\n  // /\n  this.children = null;\n  this.start = null;\n  this.stop = null;\n  // The exception that forced this rule to return. If the rule successfully\n  // completed, this is {@code null}.\n  this.exception = null;\n}\n\nParserRuleContext.prototype = Object.create(RuleContext.prototype);\nParserRuleContext.prototype.constructor = ParserRuleContext;\n\n// * COPY a ctx (I'm deliberately not using copy constructor)///\nParserRuleContext.prototype.copyFrom = function (ctx) {\n  // from RuleContext\n  this.parentCtx = ctx.parentCtx;\n  this.invokingState = ctx.invokingState;\n  this.children = null;\n  this.start = ctx.start;\n  this.stop = ctx.stop;\n  // copy any error nodes to alt label node\n  if (ctx.children) {\n    this.children = [];\n    // reset parent pointer for any error nodes\n    ctx.children.map(function (child) {\n      if (child instanceof ErrorNodeImpl) {\n        this.children.push(child);\n        child.parentCtx = this;\n      }\n    }, this);\n  }\n};\n\n// Double dispatch methods for listeners\nParserRuleContext.prototype.enterRule = function (listener) {};\n\nParserRuleContext.prototype.exitRule = function (listener) {};\n\n// * Does not set parent link; other add methods do that///\nParserRuleContext.prototype.addChild = function (child) {\n  if (this.children === null) {\n    this.children = [];\n  }\n  this.children.push(child);\n  return child;\n};\n\n// * Used by enterOuterAlt to toss out a RuleContext previously added as\n// we entered a rule. If we have // label, we will need to remove\n// generic ruleContext object.\n// /\nParserRuleContext.prototype.removeLastChild = function () {\n  if (this.children !== null) {\n    this.children.pop();\n  }\n};\n\nParserRuleContext.prototype.addTokenNode = function (token) {\n  var node = new TerminalNodeImpl(token);\n  this.addChild(node);\n  node.parentCtx = this;\n  return node;\n};\n\nParserRuleContext.prototype.addErrorNode = function (badToken) {\n  var node = new ErrorNodeImpl(badToken);\n  this.addChild(node);\n  node.parentCtx = this;\n  return node;\n};\n\nParserRuleContext.prototype.getChild = function (i, type) {\n  type = type || null;\n  if (this.children === null || i < 0 || i >= this.children.length) {\n    return null;\n  }\n  if (type === null) {\n    return this.children[i];\n  } else {\n    for (var j = 0; j < this.children.length; j++) {\n      var child = this.children[j];\n      if (child instanceof type) {\n        if (i === 0) {\n          return child;\n        } else {\n          i -= 1;\n        }\n      }\n    }\n    return null;\n  }\n};\n\nParserRuleContext.prototype.getToken = function (ttype, i) {\n  if (this.children === null || i < 0 || i >= this.children.length) {\n    return null;\n  }\n  for (var j = 0; j < this.children.length; j++) {\n    var child = this.children[j];\n    if (child instanceof TerminalNode) {\n      if (child.symbol.type === ttype) {\n        if (i === 0) {\n          return child;\n        } else {\n          i -= 1;\n        }\n      }\n    }\n  }\n  return null;\n};\n\nParserRuleContext.prototype.getTokens = function (ttype) {\n  if (this.children === null) {\n    return [];\n  } else {\n    var tokens = [];\n    for (var j = 0; j < this.children.length; j++) {\n      var child = this.children[j];\n      if (child instanceof TerminalNode) {\n        if (child.symbol.type === ttype) {\n          tokens.push(child);\n        }\n      }\n    }\n    return tokens;\n  }\n};\n\nParserRuleContext.prototype.getTypedRuleContext = function (ctxType, i) {\n  return this.getChild(i, ctxType);\n};\n\nParserRuleContext.prototype.getTypedRuleContexts = function (ctxType) {\n  if (this.children === null) {\n    return [];\n  } else {\n    var contexts = [];\n    for (var j = 0; j < this.children.length; j++) {\n      var child = this.children[j];\n      if (child instanceof ctxType) {\n        contexts.push(child);\n      }\n    }\n    return contexts;\n  }\n};\n\nParserRuleContext.prototype.getChildCount = function () {\n  if (this.children === null) {\n    return 0;\n  } else {\n    return this.children.length;\n  }\n};\n\nParserRuleContext.prototype.getSourceInterval = function () {\n  if (this.start === null || this.stop === null) {\n    return INVALID_INTERVAL;\n  } else {\n    return new Interval(this.start.tokenIndex, this.stop.tokenIndex);\n  }\n};\n\nRuleContext.EMPTY = new ParserRuleContext();\n\nfunction InterpreterRuleContext(parent, invokingStateNumber, ruleIndex) {\n  ParserRuleContext.call(parent, invokingStateNumber);\n  this.ruleIndex = ruleIndex;\n  return this;\n}\n\nInterpreterRuleContext.prototype = Object.create(ParserRuleContext.prototype);\nInterpreterRuleContext.prototype.constructor = InterpreterRuleContext;\n\nexports.ParserRuleContext = ParserRuleContext;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/ParserRuleContext.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/PredictionContext.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/PredictionContext.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\nvar RuleContext = (__webpack_require__(/*! ./RuleContext */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/RuleContext.js\").RuleContext);\nvar Hash = (__webpack_require__(/*! ./Utils */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Utils.js\").Hash);\n\nfunction PredictionContext(cachedHashCode) {\n\tthis.cachedHashCode = cachedHashCode;\n}\n\n// Represents {@code $} in local context prediction, which means wildcard.\n// {@code//+x =//}.\n// /\nPredictionContext.EMPTY = null;\n\n// Represents {@code $} in an array in full context mode, when {@code $}\n// doesn't mean wildcard: {@code $ + x = [$,x]}. Here,\n// {@code $} = {@link //EMPTY_RETURN_STATE}.\n// /\nPredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;\n\nPredictionContext.globalNodeCount = 1;\nPredictionContext.id = PredictionContext.globalNodeCount;\n\n// Stores the computed hash code of this {@link PredictionContext}. The hash\n// code is computed in parts to match the following reference algorithm.\n//\n// <pre>\n// private int referenceHashCode() {\n// int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link\n// //INITIAL_HASH});\n//\n// for (int i = 0; i &lt; {@link //size()}; i++) {\n// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent\n// getParent}(i));\n// }\n//\n// for (int i = 0; i &lt; {@link //size()}; i++) {\n// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link\n// //getReturnState getReturnState}(i));\n// }\n//\n// hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link\n// //size()});\n// return hash;\n// }\n// </pre>\n// /\n\n// This means only the {@link //EMPTY} context is in set.\nPredictionContext.prototype.isEmpty = function () {\n\treturn this === PredictionContext.EMPTY;\n};\n\nPredictionContext.prototype.hasEmptyPath = function () {\n\treturn this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;\n};\n\nPredictionContext.prototype.hashCode = function () {\n\treturn this.cachedHashCode;\n};\n\nPredictionContext.prototype.updateHashCode = function (hash) {\n\thash.update(this.cachedHashCode);\n};\n/*\nfunction calculateHashString(parent, returnState) {\n\treturn \"\" + parent + returnState;\n}\n*/\n\n// Used to cache {@link PredictionContext} objects. Its used for the shared\n// context cash associated with contexts in DFA states. This cache\n// can be used for both lexers and parsers.\n\nfunction PredictionContextCache() {\n\tthis.cache = {};\n\treturn this;\n}\n\n// Add a context to the cache and return it. If the context already exists,\n// return that one instead and do not add a new context to the cache.\n// Protect shared cache from unsafe thread access.\n//\nPredictionContextCache.prototype.add = function (ctx) {\n\tif (ctx === PredictionContext.EMPTY) {\n\t\treturn PredictionContext.EMPTY;\n\t}\n\tvar existing = this.cache[ctx] || null;\n\tif (existing !== null) {\n\t\treturn existing;\n\t}\n\tthis.cache[ctx] = ctx;\n\treturn ctx;\n};\n\nPredictionContextCache.prototype.get = function (ctx) {\n\treturn this.cache[ctx] || null;\n};\n\nObject.defineProperty(PredictionContextCache.prototype, \"length\", {\n\tget: function get() {\n\t\treturn this.cache.length;\n\t}\n});\n\nfunction SingletonPredictionContext(parent, returnState) {\n\tvar hashCode = 0;\n\tif (parent !== null) {\n\t\tvar hash = new Hash();\n\t\thash.update(parent, returnState);\n\t\thashCode = hash.finish();\n\t}\n\tPredictionContext.call(this, hashCode);\n\tthis.parentCtx = parent;\n\tthis.returnState = returnState;\n}\n\nSingletonPredictionContext.prototype = Object.create(PredictionContext.prototype);\nSingletonPredictionContext.prototype.contructor = SingletonPredictionContext;\n\nSingletonPredictionContext.create = function (parent, returnState) {\n\tif (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {\n\t\t// someone can pass in the bits of an array ctx that mean $\n\t\treturn PredictionContext.EMPTY;\n\t} else {\n\t\treturn new SingletonPredictionContext(parent, returnState);\n\t}\n};\n\nObject.defineProperty(SingletonPredictionContext.prototype, \"length\", {\n\tget: function get() {\n\t\treturn 1;\n\t}\n});\n\nSingletonPredictionContext.prototype.getParent = function (index) {\n\treturn this.parentCtx;\n};\n\nSingletonPredictionContext.prototype.getReturnState = function (index) {\n\treturn this.returnState;\n};\n\nSingletonPredictionContext.prototype.equals = function (other) {\n\tif (this === other) {\n\t\treturn true;\n\t} else if (!(other instanceof SingletonPredictionContext)) {\n\t\treturn false;\n\t} else if (this.hashCode() !== other.hashCode()) {\n\t\treturn false; // can't be same if hash is different\n\t} else {\n\t\tif (this.returnState !== other.returnState) return false;else if (this.parentCtx == null) return other.parentCtx == null;else return this.parentCtx.equals(other.parentCtx);\n\t}\n};\n\nSingletonPredictionContext.prototype.toString = function () {\n\tvar up = this.parentCtx === null ? \"\" : this.parentCtx.toString();\n\tif (up.length === 0) {\n\t\tif (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {\n\t\t\treturn \"$\";\n\t\t} else {\n\t\t\treturn \"\" + this.returnState;\n\t\t}\n\t} else {\n\t\treturn \"\" + this.returnState + \" \" + up;\n\t}\n};\n\nfunction EmptyPredictionContext() {\n\tSingletonPredictionContext.call(this, null, PredictionContext.EMPTY_RETURN_STATE);\n\treturn this;\n}\n\nEmptyPredictionContext.prototype = Object.create(SingletonPredictionContext.prototype);\nEmptyPredictionContext.prototype.constructor = EmptyPredictionContext;\n\nEmptyPredictionContext.prototype.isEmpty = function () {\n\treturn true;\n};\n\nEmptyPredictionContext.prototype.getParent = function (index) {\n\treturn null;\n};\n\nEmptyPredictionContext.prototype.getReturnState = function (index) {\n\treturn this.returnState;\n};\n\nEmptyPredictionContext.prototype.equals = function (other) {\n\treturn this === other;\n};\n\nEmptyPredictionContext.prototype.toString = function () {\n\treturn \"$\";\n};\n\nPredictionContext.EMPTY = new EmptyPredictionContext();\n\nfunction ArrayPredictionContext(parents, returnStates) {\n\t// Parent can be null only if full ctx mode and we make an array\n\t// from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using\n\t// null parent and\n\t// returnState == {@link //EMPTY_RETURN_STATE}.\n\tvar h = new Hash();\n\th.update(parents, returnStates);\n\tvar hashCode = h.finish();\n\tPredictionContext.call(this, hashCode);\n\tthis.parents = parents;\n\tthis.returnStates = returnStates;\n\treturn this;\n}\n\nArrayPredictionContext.prototype = Object.create(PredictionContext.prototype);\nArrayPredictionContext.prototype.constructor = ArrayPredictionContext;\n\nArrayPredictionContext.prototype.isEmpty = function () {\n\t// since EMPTY_RETURN_STATE can only appear in the last position, we\n\t// don't need to verify that size==1\n\treturn this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;\n};\n\nObject.defineProperty(ArrayPredictionContext.prototype, \"length\", {\n\tget: function get() {\n\t\treturn this.returnStates.length;\n\t}\n});\n\nArrayPredictionContext.prototype.getParent = function (index) {\n\treturn this.parents[index];\n};\n\nArrayPredictionContext.prototype.getReturnState = function (index) {\n\treturn this.returnStates[index];\n};\n\nArrayPredictionContext.prototype.equals = function (other) {\n\tif (this === other) {\n\t\treturn true;\n\t} else if (!(other instanceof ArrayPredictionContext)) {\n\t\treturn false;\n\t} else if (this.hashCode() !== other.hashCode()) {\n\t\treturn false; // can't be same if hash is different\n\t} else {\n\t\treturn this.returnStates === other.returnStates && this.parents === other.parents;\n\t}\n};\n\nArrayPredictionContext.prototype.toString = function () {\n\tif (this.isEmpty()) {\n\t\treturn \"[]\";\n\t} else {\n\t\tvar s = \"[\";\n\t\tfor (var i = 0; i < this.returnStates.length; i++) {\n\t\t\tif (i > 0) {\n\t\t\t\ts = s + \", \";\n\t\t\t}\n\t\t\tif (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {\n\t\t\t\ts = s + \"$\";\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\ts = s + this.returnStates[i];\n\t\t\tif (this.parents[i] !== null) {\n\t\t\t\ts = s + \" \" + this.parents[i];\n\t\t\t} else {\n\t\t\t\ts = s + \"null\";\n\t\t\t}\n\t\t}\n\t\treturn s + \"]\";\n\t}\n};\n\n// Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.\n// Return {@link //EMPTY} if {@code outerContext} is empty or null.\n// /\nfunction predictionContextFromRuleContext(atn, outerContext) {\n\tif (outerContext === undefined || outerContext === null) {\n\t\touterContext = RuleContext.EMPTY;\n\t}\n\t// if we are in RuleContext of start rule, s, then PredictionContext\n\t// is EMPTY. Nobody called us. (if we are empty, return empty)\n\tif (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {\n\t\treturn PredictionContext.EMPTY;\n\t}\n\t// If we have a parent, convert it to a PredictionContext graph\n\tvar parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);\n\tvar state = atn.states[outerContext.invokingState];\n\tvar transition = state.transitions[0];\n\treturn SingletonPredictionContext.create(parent, transition.followState.stateNumber);\n}\n/*\nfunction calculateListsHashString(parents, returnStates) {\n\tvar s = \"\";\n\tparents.map(function(p) {\n\t\ts = s + p;\n\t});\n\treturnStates.map(function(r) {\n\t\ts = s + r;\n\t});\n\treturn s;\n}\n*/\nfunction merge(a, b, rootIsWildcard, mergeCache) {\n\t// share same graph if both same\n\tif (a === b) {\n\t\treturn a;\n\t}\n\tif (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {\n\t\treturn mergeSingletons(a, b, rootIsWildcard, mergeCache);\n\t}\n\t// At least one of a or b is array\n\t// If one is $ and rootIsWildcard, return $ as// wildcard\n\tif (rootIsWildcard) {\n\t\tif (a instanceof EmptyPredictionContext) {\n\t\t\treturn a;\n\t\t}\n\t\tif (b instanceof EmptyPredictionContext) {\n\t\t\treturn b;\n\t\t}\n\t}\n\t// convert singleton so both are arrays to normalize\n\tif (a instanceof SingletonPredictionContext) {\n\t\ta = new ArrayPredictionContext([a.getParent()], [a.returnState]);\n\t}\n\tif (b instanceof SingletonPredictionContext) {\n\t\tb = new ArrayPredictionContext([b.getParent()], [b.returnState]);\n\t}\n\treturn mergeArrays(a, b, rootIsWildcard, mergeCache);\n}\n\n//\n// Merge two {@link SingletonPredictionContext} instances.\n//\n// <p>Stack tops equal, parents merge is same; return left graph.<br>\n// <embed src=\"images/SingletonMerge_SameRootSamePar.svg\"\n// type=\"image/svg+xml\"/></p>\n//\n// <p>Same stack top, parents differ; merge parents giving array node, then\n// remainders of those graphs. A new root node is created to point to the\n// merged parents.<br>\n// <embed src=\"images/SingletonMerge_SameRootDiffPar.svg\"\n// type=\"image/svg+xml\"/></p>\n//\n// <p>Different stack tops pointing to same parent. Make array node for the\n// root where both element in the root point to the same (original)\n// parent.<br>\n// <embed src=\"images/SingletonMerge_DiffRootSamePar.svg\"\n// type=\"image/svg+xml\"/></p>\n//\n// <p>Different stack tops pointing to different parents. Make array node for\n// the root where each element points to the corresponding original\n// parent.<br>\n// <embed src=\"images/SingletonMerge_DiffRootDiffPar.svg\"\n// type=\"image/svg+xml\"/></p>\n//\n// @param a the first {@link SingletonPredictionContext}\n// @param b the second {@link SingletonPredictionContext}\n// @param rootIsWildcard {@code true} if this is a local-context merge,\n// otherwise false to indicate a full-context merge\n// @param mergeCache\n// /\nfunction mergeSingletons(a, b, rootIsWildcard, mergeCache) {\n\tif (mergeCache !== null) {\n\t\tvar previous = mergeCache.get(a, b);\n\t\tif (previous !== null) {\n\t\t\treturn previous;\n\t\t}\n\t\tprevious = mergeCache.get(b, a);\n\t\tif (previous !== null) {\n\t\t\treturn previous;\n\t\t}\n\t}\n\n\tvar rootMerge = mergeRoot(a, b, rootIsWildcard);\n\tif (rootMerge !== null) {\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, rootMerge);\n\t\t}\n\t\treturn rootMerge;\n\t}\n\tif (a.returnState === b.returnState) {\n\t\tvar parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);\n\t\t// if parent is same as existing a or b parent or reduced to a parent,\n\t\t// return it\n\t\tif (parent === a.parentCtx) {\n\t\t\treturn a; // ax + bx = ax, if a=b\n\t\t}\n\t\tif (parent === b.parentCtx) {\n\t\t\treturn b; // ax + bx = bx, if a=b\n\t\t}\n\t\t// else: ax + ay = a'[x,y]\n\t\t// merge parents x and y, giving array node with x,y then remainders\n\t\t// of those graphs. dup a, a' points at merged array\n\t\t// new joined parent so create new singleton pointing to it, a'\n\t\tvar spc = SingletonPredictionContext.create(parent, a.returnState);\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, spc);\n\t\t}\n\t\treturn spc;\n\t} else {\n\t\t// a != b payloads differ\n\t\t// see if we can collapse parents due to $+x parents if local ctx\n\t\tvar singleParent = null;\n\t\tif (a === b || a.parentCtx !== null && a.parentCtx === b.parentCtx) {\n\t\t\t// ax +\n\t\t\t// bx =\n\t\t\t// [a,b]x\n\t\t\tsingleParent = a.parentCtx;\n\t\t}\n\t\tif (singleParent !== null) {\n\t\t\t// parents are same\n\t\t\t// sort payloads and use same parent\n\t\t\tvar payloads = [a.returnState, b.returnState];\n\t\t\tif (a.returnState > b.returnState) {\n\t\t\t\tpayloads[0] = b.returnState;\n\t\t\t\tpayloads[1] = a.returnState;\n\t\t\t}\n\t\t\tvar parents = [singleParent, singleParent];\n\t\t\tvar apc = new ArrayPredictionContext(parents, payloads);\n\t\t\tif (mergeCache !== null) {\n\t\t\t\tmergeCache.set(a, b, apc);\n\t\t\t}\n\t\t\treturn apc;\n\t\t}\n\t\t// parents differ and can't merge them. Just pack together\n\t\t// into array; can't merge.\n\t\t// ax + by = [ax,by]\n\t\tvar payloads = [a.returnState, b.returnState];\n\t\tvar parents = [a.parentCtx, b.parentCtx];\n\t\tif (a.returnState > b.returnState) {\n\t\t\t// sort by payload\n\t\t\tpayloads[0] = b.returnState;\n\t\t\tpayloads[1] = a.returnState;\n\t\t\tparents = [b.parentCtx, a.parentCtx];\n\t\t}\n\t\tvar a_ = new ArrayPredictionContext(parents, payloads);\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, a_);\n\t\t}\n\t\treturn a_;\n\t}\n}\n\n//\n// Handle case where at least one of {@code a} or {@code b} is\n// {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used\n// to represent {@link //EMPTY}.\n//\n// <h2>Local-Context Merges</h2>\n//\n// <p>These local-context merge operations are used when {@code rootIsWildcard}\n// is true.</p>\n//\n// <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>\n// <embed src=\"images/LocalMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is\n// {@code //EMPTY}; return left graph.<br>\n// <embed src=\"images/LocalMerge_EmptyParent.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p>Special case of last merge if local context.<br>\n// <embed src=\"images/LocalMerge_DiffRoots.svg\" type=\"image/svg+xml\"/></p>\n//\n// <h2>Full-Context Merges</h2>\n//\n// <p>These full-context merge operations are used when {@code rootIsWildcard}\n// is false.</p>\n//\n// <p><embed src=\"images/FullMerge_EmptyRoots.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and\n// null parent).<br>\n// <embed src=\"images/FullMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p><embed src=\"images/FullMerge_SameRoot.svg\" type=\"image/svg+xml\"/></p>\n//\n// @param a the first {@link SingletonPredictionContext}\n// @param b the second {@link SingletonPredictionContext}\n// @param rootIsWildcard {@code true} if this is a local-context merge,\n// otherwise false to indicate a full-context merge\n// /\nfunction mergeRoot(a, b, rootIsWildcard) {\n\tif (rootIsWildcard) {\n\t\tif (a === PredictionContext.EMPTY) {\n\t\t\treturn PredictionContext.EMPTY; // // + b =//\n\t\t}\n\t\tif (b === PredictionContext.EMPTY) {\n\t\t\treturn PredictionContext.EMPTY; // a +// =//\n\t\t}\n\t} else {\n\t\tif (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {\n\t\t\treturn PredictionContext.EMPTY; // $ + $ = $\n\t\t} else if (a === PredictionContext.EMPTY) {\n\t\t\t// $ + x = [$,x]\n\t\t\tvar payloads = [b.returnState, PredictionContext.EMPTY_RETURN_STATE];\n\t\t\tvar parents = [b.parentCtx, null];\n\t\t\treturn new ArrayPredictionContext(parents, payloads);\n\t\t} else if (b === PredictionContext.EMPTY) {\n\t\t\t// x + $ = [$,x] ($ is always first if present)\n\t\t\tvar payloads = [a.returnState, PredictionContext.EMPTY_RETURN_STATE];\n\t\t\tvar parents = [a.parentCtx, null];\n\t\t\treturn new ArrayPredictionContext(parents, payloads);\n\t\t}\n\t}\n\treturn null;\n}\n\n//\n// Merge two {@link ArrayPredictionContext} instances.\n//\n// <p>Different tops, different parents.<br>\n// <embed src=\"images/ArrayMerge_DiffTopDiffPar.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p>Shared top, same parents.<br>\n// <embed src=\"images/ArrayMerge_ShareTopSamePar.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p>Shared top, different parents.<br>\n// <embed src=\"images/ArrayMerge_ShareTopDiffPar.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p>Shared top, all shared parents.<br>\n// <embed src=\"images/ArrayMerge_ShareTopSharePar.svg\"\n// type=\"image/svg+xml\"/></p>\n//\n// <p>Equal tops, merge parents and reduce top to\n// {@link SingletonPredictionContext}.<br>\n// <embed src=\"images/ArrayMerge_EqualTop.svg\" type=\"image/svg+xml\"/></p>\n// /\nfunction mergeArrays(a, b, rootIsWildcard, mergeCache) {\n\tif (mergeCache !== null) {\n\t\tvar previous = mergeCache.get(a, b);\n\t\tif (previous !== null) {\n\t\t\treturn previous;\n\t\t}\n\t\tprevious = mergeCache.get(b, a);\n\t\tif (previous !== null) {\n\t\t\treturn previous;\n\t\t}\n\t}\n\t// merge sorted payloads a + b => M\n\tvar i = 0; // walks a\n\tvar j = 0; // walks b\n\tvar k = 0; // walks target M array\n\n\tvar mergedReturnStates = [];\n\tvar mergedParents = [];\n\t// walk and merge to yield mergedParents, mergedReturnStates\n\twhile (i < a.returnStates.length && j < b.returnStates.length) {\n\t\tvar a_parent = a.parents[i];\n\t\tvar b_parent = b.parents[j];\n\t\tif (a.returnStates[i] === b.returnStates[j]) {\n\t\t\t// same payload (stack tops are equal), must yield merged singleton\n\t\t\tvar payload = a.returnStates[i];\n\t\t\t// $+$ = $\n\t\t\tvar bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE && a_parent === null && b_parent === null;\n\t\t\tvar ax_ax = a_parent !== null && b_parent !== null && a_parent === b_parent; // ax+ax\n\t\t\t// ->\n\t\t\t// ax\n\t\t\tif (bothDollars || ax_ax) {\n\t\t\t\tmergedParents[k] = a_parent; // choose left\n\t\t\t\tmergedReturnStates[k] = payload;\n\t\t\t} else {\n\t\t\t\t// ax+ay -> a'[x,y]\n\t\t\t\tvar mergedParent = merge(a_parent, b_parent, rootIsWildcard, mergeCache);\n\t\t\t\tmergedParents[k] = mergedParent;\n\t\t\t\tmergedReturnStates[k] = payload;\n\t\t\t}\n\t\t\ti += 1; // hop over left one as usual\n\t\t\tj += 1; // but also skip one in right side since we merge\n\t\t} else if (a.returnStates[i] < b.returnStates[j]) {\n\t\t\t// copy a[i] to M\n\t\t\tmergedParents[k] = a_parent;\n\t\t\tmergedReturnStates[k] = a.returnStates[i];\n\t\t\ti += 1;\n\t\t} else {\n\t\t\t// b > a, copy b[j] to M\n\t\t\tmergedParents[k] = b_parent;\n\t\t\tmergedReturnStates[k] = b.returnStates[j];\n\t\t\tj += 1;\n\t\t}\n\t\tk += 1;\n\t}\n\t// copy over any payloads remaining in either array\n\tif (i < a.returnStates.length) {\n\t\tfor (var p = i; p < a.returnStates.length; p++) {\n\t\t\tmergedParents[k] = a.parents[p];\n\t\t\tmergedReturnStates[k] = a.returnStates[p];\n\t\t\tk += 1;\n\t\t}\n\t} else {\n\t\tfor (var p = j; p < b.returnStates.length; p++) {\n\t\t\tmergedParents[k] = b.parents[p];\n\t\t\tmergedReturnStates[k] = b.returnStates[p];\n\t\t\tk += 1;\n\t\t}\n\t}\n\t// trim merged if we combined a few that had same stack tops\n\tif (k < mergedParents.length) {\n\t\t// write index < last position; trim\n\t\tif (k === 1) {\n\t\t\t// for just one merged element, return singleton top\n\t\t\tvar a_ = SingletonPredictionContext.create(mergedParents[0], mergedReturnStates[0]);\n\t\t\tif (mergeCache !== null) {\n\t\t\t\tmergeCache.set(a, b, a_);\n\t\t\t}\n\t\t\treturn a_;\n\t\t}\n\t\tmergedParents = mergedParents.slice(0, k);\n\t\tmergedReturnStates = mergedReturnStates.slice(0, k);\n\t}\n\n\tvar M = new ArrayPredictionContext(mergedParents, mergedReturnStates);\n\n\t// if we created same array as a or b, return that instead\n\t// TODO: track whether this is possible above during merge sort for speed\n\tif (M === a) {\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, a);\n\t\t}\n\t\treturn a;\n\t}\n\tif (M === b) {\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, b);\n\t\t}\n\t\treturn b;\n\t}\n\tcombineCommonParents(mergedParents);\n\n\tif (mergeCache !== null) {\n\t\tmergeCache.set(a, b, M);\n\t}\n\treturn M;\n}\n\n//\n// Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}\n// ones.\n// /\nfunction combineCommonParents(parents) {\n\tvar uniqueParents = {};\n\n\tfor (var p = 0; p < parents.length; p++) {\n\t\tvar parent = parents[p];\n\t\tif (!(parent in uniqueParents)) {\n\t\t\tuniqueParents[parent] = parent;\n\t\t}\n\t}\n\tfor (var q = 0; q < parents.length; q++) {\n\t\tparents[q] = uniqueParents[parents[q]];\n\t}\n}\n\nfunction getCachedPredictionContext(context, contextCache, visited) {\n\tif (context.isEmpty()) {\n\t\treturn context;\n\t}\n\tvar existing = visited[context] || null;\n\tif (existing !== null) {\n\t\treturn existing;\n\t}\n\texisting = contextCache.get(context);\n\tif (existing !== null) {\n\t\tvisited[context] = existing;\n\t\treturn existing;\n\t}\n\tvar changed = false;\n\tvar parents = [];\n\tfor (var i = 0; i < parents.length; i++) {\n\t\tvar parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);\n\t\tif (changed || parent !== context.getParent(i)) {\n\t\t\tif (!changed) {\n\t\t\t\tparents = [];\n\t\t\t\tfor (var j = 0; j < context.length; j++) {\n\t\t\t\t\tparents[j] = context.getParent(j);\n\t\t\t\t}\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tparents[i] = parent;\n\t\t}\n\t}\n\tif (!changed) {\n\t\tcontextCache.add(context);\n\t\tvisited[context] = context;\n\t\treturn context;\n\t}\n\tvar updated = null;\n\tif (parents.length === 0) {\n\t\tupdated = PredictionContext.EMPTY;\n\t} else if (parents.length === 1) {\n\t\tupdated = SingletonPredictionContext.create(parents[0], context.getReturnState(0));\n\t} else {\n\t\tupdated = new ArrayPredictionContext(parents, context.returnStates);\n\t}\n\tcontextCache.add(updated);\n\tvisited[updated] = updated;\n\tvisited[context] = updated;\n\n\treturn updated;\n}\n\n// ter's recursive version of Sam's getAllNodes()\nfunction getAllContextNodes(context, nodes, visited) {\n\tif (nodes === null) {\n\t\tnodes = [];\n\t\treturn getAllContextNodes(context, nodes, visited);\n\t} else if (visited === null) {\n\t\tvisited = {};\n\t\treturn getAllContextNodes(context, nodes, visited);\n\t} else {\n\t\tif (context === null || visited[context] !== null) {\n\t\t\treturn nodes;\n\t\t}\n\t\tvisited[context] = context;\n\t\tnodes.push(context);\n\t\tfor (var i = 0; i < context.length; i++) {\n\t\t\tgetAllContextNodes(context.getParent(i), nodes, visited);\n\t\t}\n\t\treturn nodes;\n\t}\n}\n\nexports.merge = merge;\nexports.PredictionContext = PredictionContext;\nexports.PredictionContextCache = PredictionContextCache;\nexports.SingletonPredictionContext = SingletonPredictionContext;\nexports.predictionContextFromRuleContext = predictionContextFromRuleContext;\nexports.getCachedPredictionContext = getCachedPredictionContext;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/PredictionContext.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Recognizer.js":
/*!**********************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/Recognizer.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\nvar Token = (__webpack_require__(/*! ./Token */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Token.js\").Token);\nvar ConsoleErrorListener = (__webpack_require__(/*! ./error/ErrorListener */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/ErrorListener.js\").ConsoleErrorListener);\nvar ProxyErrorListener = (__webpack_require__(/*! ./error/ErrorListener */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/ErrorListener.js\").ProxyErrorListener);\n\nfunction Recognizer() {\n    this._listeners = [ConsoleErrorListener.INSTANCE];\n    this._interp = null;\n    this._stateNumber = -1;\n    return this;\n}\n\nRecognizer.tokenTypeMapCache = {};\nRecognizer.ruleIndexMapCache = {};\n\nRecognizer.prototype.checkVersion = function (toolVersion) {\n    var runtimeVersion = \"4.7\";\n    if (runtimeVersion !== toolVersion) {\n        console.log(\"ANTLR runtime and generated code versions disagree: \" + runtimeVersion + \"!=\" + toolVersion);\n    }\n};\n\nRecognizer.prototype.addErrorListener = function (listener) {\n    this._listeners.push(listener);\n};\n\nRecognizer.prototype.removeErrorListeners = function () {\n    this._listeners = [];\n};\n\nRecognizer.prototype.getTokenTypeMap = function () {\n    var tokenNames = this.getTokenNames();\n    if (tokenNames === null) {\n        throw \"The current recognizer does not provide a list of token names.\";\n    }\n    var result = this.tokenTypeMapCache[tokenNames];\n    if (result === undefined) {\n        result = tokenNames.reduce(function (o, k, i) {\n            o[k] = i;\n        });\n        result.EOF = Token.EOF;\n        this.tokenTypeMapCache[tokenNames] = result;\n    }\n    return result;\n};\n\n// Get a map from rule names to rule indexes.\n//\n// <p>Used for XPath and tree pattern compilation.</p>\n//\nRecognizer.prototype.getRuleIndexMap = function () {\n    var ruleNames = this.ruleNames;\n    if (ruleNames === null) {\n        throw \"The current recognizer does not provide a list of rule names.\";\n    }\n    var result = this.ruleIndexMapCache[ruleNames];\n    if (result === undefined) {\n        result = ruleNames.reduce(function (o, k, i) {\n            o[k] = i;\n        });\n        this.ruleIndexMapCache[ruleNames] = result;\n    }\n    return result;\n};\n\nRecognizer.prototype.getTokenType = function (tokenName) {\n    var ttype = this.getTokenTypeMap()[tokenName];\n    if (ttype !== undefined) {\n        return ttype;\n    } else {\n        return Token.INVALID_TYPE;\n    }\n};\n\n// What is the error header, normally line/character position information?//\nRecognizer.prototype.getErrorHeader = function (e) {\n    var line = e.getOffendingToken().line;\n    var column = e.getOffendingToken().column;\n    return \"line \" + line + \":\" + column;\n};\n\n// How should a token be displayed in an error message? The default\n//  is to display just the text, but during development you might\n//  want to have a lot of information spit out.  Override in that case\n//  to use t.toString() (which, for CommonToken, dumps everything about\n//  the token). This is better than forcing you to override a method in\n//  your token objects because you don't have to go modify your lexer\n//  so that it creates a new Java type.\n//\n// @deprecated This method is not called by the ANTLR 4 Runtime. Specific\n// implementations of {@link ANTLRErrorStrategy} may provide a similar\n// feature when necessary. For example, see\n// {@link DefaultErrorStrategy//getTokenErrorDisplay}.\n//\nRecognizer.prototype.getTokenErrorDisplay = function (t) {\n    if (t === null) {\n        return \"<no token>\";\n    }\n    var s = t.text;\n    if (s === null) {\n        if (t.type === Token.EOF) {\n            s = \"<EOF>\";\n        } else {\n            s = \"<\" + t.type + \">\";\n        }\n    }\n    s = s.replace(\"\\n\", \"\\\\n\").replace(\"\\r\", \"\\\\r\").replace(\"\\t\", \"\\\\t\");\n    return \"'\" + s + \"'\";\n};\n\nRecognizer.prototype.getErrorListenerDispatch = function () {\n    return new ProxyErrorListener(this._listeners);\n};\n\n// subclass needs to override these if there are sempreds or actions\n// that the ATN interp needs to execute\nRecognizer.prototype.sempred = function (localctx, ruleIndex, actionIndex) {\n    return true;\n};\n\nRecognizer.prototype.precpred = function (localctx, precedence) {\n    return true;\n};\n\n//Indicate that the recognizer has changed internal state that is\n//consistent with the ATN state passed in.  This way we always know\n//where we are in the ATN as the parser goes along. The rule\n//context objects form a stack that lets us see the stack of\n//invoking rules. Combine this and we have complete ATN\n//configuration information.\n\nObject.defineProperty(Recognizer.prototype, \"state\", {\n    get: function get() {\n        return this._stateNumber;\n    },\n    set: function set(state) {\n        this._stateNumber = state;\n    }\n});\n\nexports.Recognizer = Recognizer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L1JlY29nbml6ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFlBQVksNkdBQXdCO0FBQ3BDLDJCQUEyQix3SkFBcUQ7QUFDaEYseUJBQXlCLHNKQUFtRDs7QUFFNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsMEJBQTBCO0FBQ2pEO0FBQ0EsSUFBSSxpREFBaUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVELGtCQUFrQiIsInNvdXJjZXMiOlsiL1VzZXJzL21hYy9mbG93cG9ydC9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L1JlY29nbml6ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vL1xuLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuLy9cblxudmFyIFRva2VuID0gcmVxdWlyZSgnLi9Ub2tlbicpLlRva2VuO1xudmFyIENvbnNvbGVFcnJvckxpc3RlbmVyID0gcmVxdWlyZSgnLi9lcnJvci9FcnJvckxpc3RlbmVyJykuQ29uc29sZUVycm9yTGlzdGVuZXI7XG52YXIgUHJveHlFcnJvckxpc3RlbmVyID0gcmVxdWlyZSgnLi9lcnJvci9FcnJvckxpc3RlbmVyJykuUHJveHlFcnJvckxpc3RlbmVyO1xuXG5mdW5jdGlvbiBSZWNvZ25pemVyKCkge1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IFtDb25zb2xlRXJyb3JMaXN0ZW5lci5JTlNUQU5DRV07XG4gICAgdGhpcy5faW50ZXJwID0gbnVsbDtcbiAgICB0aGlzLl9zdGF0ZU51bWJlciA9IC0xO1xuICAgIHJldHVybiB0aGlzO1xufVxuXG5SZWNvZ25pemVyLnRva2VuVHlwZU1hcENhY2hlID0ge307XG5SZWNvZ25pemVyLnJ1bGVJbmRleE1hcENhY2hlID0ge307XG5cblJlY29nbml6ZXIucHJvdG90eXBlLmNoZWNrVmVyc2lvbiA9IGZ1bmN0aW9uICh0b29sVmVyc2lvbikge1xuICAgIHZhciBydW50aW1lVmVyc2lvbiA9IFwiNC43XCI7XG4gICAgaWYgKHJ1bnRpbWVWZXJzaW9uICE9PSB0b29sVmVyc2lvbikge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkFOVExSIHJ1bnRpbWUgYW5kIGdlbmVyYXRlZCBjb2RlIHZlcnNpb25zIGRpc2FncmVlOiBcIiArIHJ1bnRpbWVWZXJzaW9uICsgXCIhPVwiICsgdG9vbFZlcnNpb24pO1xuICAgIH1cbn07XG5cblJlY29nbml6ZXIucHJvdG90eXBlLmFkZEVycm9yTGlzdGVuZXIgPSBmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG59O1xuXG5SZWNvZ25pemVyLnByb3RvdHlwZS5yZW1vdmVFcnJvckxpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSBbXTtcbn07XG5cblJlY29nbml6ZXIucHJvdG90eXBlLmdldFRva2VuVHlwZU1hcCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdG9rZW5OYW1lcyA9IHRoaXMuZ2V0VG9rZW5OYW1lcygpO1xuICAgIGlmICh0b2tlbk5hbWVzID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IFwiVGhlIGN1cnJlbnQgcmVjb2duaXplciBkb2VzIG5vdCBwcm92aWRlIGEgbGlzdCBvZiB0b2tlbiBuYW1lcy5cIjtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMudG9rZW5UeXBlTWFwQ2FjaGVbdG9rZW5OYW1lc107XG4gICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdCA9IHRva2VuTmFtZXMucmVkdWNlKGZ1bmN0aW9uIChvLCBrLCBpKSB7XG4gICAgICAgICAgICBvW2tdID0gaTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3VsdC5FT0YgPSBUb2tlbi5FT0Y7XG4gICAgICAgIHRoaXMudG9rZW5UeXBlTWFwQ2FjaGVbdG9rZW5OYW1lc10gPSByZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyBHZXQgYSBtYXAgZnJvbSBydWxlIG5hbWVzIHRvIHJ1bGUgaW5kZXhlcy5cbi8vXG4vLyA8cD5Vc2VkIGZvciBYUGF0aCBhbmQgdHJlZSBwYXR0ZXJuIGNvbXBpbGF0aW9uLjwvcD5cbi8vXG5SZWNvZ25pemVyLnByb3RvdHlwZS5nZXRSdWxlSW5kZXhNYXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJ1bGVOYW1lcyA9IHRoaXMucnVsZU5hbWVzO1xuICAgIGlmIChydWxlTmFtZXMgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgXCJUaGUgY3VycmVudCByZWNvZ25pemVyIGRvZXMgbm90IHByb3ZpZGUgYSBsaXN0IG9mIHJ1bGUgbmFtZXMuXCI7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSB0aGlzLnJ1bGVJbmRleE1hcENhY2hlW3J1bGVOYW1lc107XG4gICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdCA9IHJ1bGVOYW1lcy5yZWR1Y2UoZnVuY3Rpb24gKG8sIGssIGkpIHtcbiAgICAgICAgICAgIG9ba10gPSBpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5ydWxlSW5kZXhNYXBDYWNoZVtydWxlTmFtZXNdID0gcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuUmVjb2duaXplci5wcm90b3R5cGUuZ2V0VG9rZW5UeXBlID0gZnVuY3Rpb24gKHRva2VuTmFtZSkge1xuICAgIHZhciB0dHlwZSA9IHRoaXMuZ2V0VG9rZW5UeXBlTWFwKClbdG9rZW5OYW1lXTtcbiAgICBpZiAodHR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdHR5cGU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFRva2VuLklOVkFMSURfVFlQRTtcbiAgICB9XG59O1xuXG4vLyBXaGF0IGlzIHRoZSBlcnJvciBoZWFkZXIsIG5vcm1hbGx5IGxpbmUvY2hhcmFjdGVyIHBvc2l0aW9uIGluZm9ybWF0aW9uPy8vXG5SZWNvZ25pemVyLnByb3RvdHlwZS5nZXRFcnJvckhlYWRlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIGxpbmUgPSBlLmdldE9mZmVuZGluZ1Rva2VuKCkubGluZTtcbiAgICB2YXIgY29sdW1uID0gZS5nZXRPZmZlbmRpbmdUb2tlbigpLmNvbHVtbjtcbiAgICByZXR1cm4gXCJsaW5lIFwiICsgbGluZSArIFwiOlwiICsgY29sdW1uO1xufTtcblxuLy8gSG93IHNob3VsZCBhIHRva2VuIGJlIGRpc3BsYXllZCBpbiBhbiBlcnJvciBtZXNzYWdlPyBUaGUgZGVmYXVsdFxuLy8gIGlzIHRvIGRpc3BsYXkganVzdCB0aGUgdGV4dCwgYnV0IGR1cmluZyBkZXZlbG9wbWVudCB5b3UgbWlnaHRcbi8vICB3YW50IHRvIGhhdmUgYSBsb3Qgb2YgaW5mb3JtYXRpb24gc3BpdCBvdXQuICBPdmVycmlkZSBpbiB0aGF0IGNhc2Vcbi8vICB0byB1c2UgdC50b1N0cmluZygpICh3aGljaCwgZm9yIENvbW1vblRva2VuLCBkdW1wcyBldmVyeXRoaW5nIGFib3V0XG4vLyAgdGhlIHRva2VuKS4gVGhpcyBpcyBiZXR0ZXIgdGhhbiBmb3JjaW5nIHlvdSB0byBvdmVycmlkZSBhIG1ldGhvZCBpblxuLy8gIHlvdXIgdG9rZW4gb2JqZWN0cyBiZWNhdXNlIHlvdSBkb24ndCBoYXZlIHRvIGdvIG1vZGlmeSB5b3VyIGxleGVyXG4vLyAgc28gdGhhdCBpdCBjcmVhdGVzIGEgbmV3IEphdmEgdHlwZS5cbi8vXG4vLyBAZGVwcmVjYXRlZCBUaGlzIG1ldGhvZCBpcyBub3QgY2FsbGVkIGJ5IHRoZSBBTlRMUiA0IFJ1bnRpbWUuIFNwZWNpZmljXG4vLyBpbXBsZW1lbnRhdGlvbnMgb2Yge0BsaW5rIEFOVExSRXJyb3JTdHJhdGVneX0gbWF5IHByb3ZpZGUgYSBzaW1pbGFyXG4vLyBmZWF0dXJlIHdoZW4gbmVjZXNzYXJ5LiBGb3IgZXhhbXBsZSwgc2VlXG4vLyB7QGxpbmsgRGVmYXVsdEVycm9yU3RyYXRlZ3kvL2dldFRva2VuRXJyb3JEaXNwbGF5fS5cbi8vXG5SZWNvZ25pemVyLnByb3RvdHlwZS5nZXRUb2tlbkVycm9yRGlzcGxheSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgaWYgKHQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFwiPG5vIHRva2VuPlwiO1xuICAgIH1cbiAgICB2YXIgcyA9IHQudGV4dDtcbiAgICBpZiAocyA9PT0gbnVsbCkge1xuICAgICAgICBpZiAodC50eXBlID09PSBUb2tlbi5FT0YpIHtcbiAgICAgICAgICAgIHMgPSBcIjxFT0Y+XCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzID0gXCI8XCIgKyB0LnR5cGUgKyBcIj5cIjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzID0gcy5yZXBsYWNlKFwiXFxuXCIsIFwiXFxcXG5cIikucmVwbGFjZShcIlxcclwiLCBcIlxcXFxyXCIpLnJlcGxhY2UoXCJcXHRcIiwgXCJcXFxcdFwiKTtcbiAgICByZXR1cm4gXCInXCIgKyBzICsgXCInXCI7XG59O1xuXG5SZWNvZ25pemVyLnByb3RvdHlwZS5nZXRFcnJvckxpc3RlbmVyRGlzcGF0Y2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm94eUVycm9yTGlzdGVuZXIodGhpcy5fbGlzdGVuZXJzKTtcbn07XG5cbi8vIHN1YmNsYXNzIG5lZWRzIHRvIG92ZXJyaWRlIHRoZXNlIGlmIHRoZXJlIGFyZSBzZW1wcmVkcyBvciBhY3Rpb25zXG4vLyB0aGF0IHRoZSBBVE4gaW50ZXJwIG5lZWRzIHRvIGV4ZWN1dGVcblJlY29nbml6ZXIucHJvdG90eXBlLnNlbXByZWQgPSBmdW5jdGlvbiAobG9jYWxjdHgsIHJ1bGVJbmRleCwgYWN0aW9uSW5kZXgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5cblJlY29nbml6ZXIucHJvdG90eXBlLnByZWNwcmVkID0gZnVuY3Rpb24gKGxvY2FsY3R4LCBwcmVjZWRlbmNlKSB7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuXG4vL0luZGljYXRlIHRoYXQgdGhlIHJlY29nbml6ZXIgaGFzIGNoYW5nZWQgaW50ZXJuYWwgc3RhdGUgdGhhdCBpc1xuLy9jb25zaXN0ZW50IHdpdGggdGhlIEFUTiBzdGF0ZSBwYXNzZWQgaW4uICBUaGlzIHdheSB3ZSBhbHdheXMga25vd1xuLy93aGVyZSB3ZSBhcmUgaW4gdGhlIEFUTiBhcyB0aGUgcGFyc2VyIGdvZXMgYWxvbmcuIFRoZSBydWxlXG4vL2NvbnRleHQgb2JqZWN0cyBmb3JtIGEgc3RhY2sgdGhhdCBsZXRzIHVzIHNlZSB0aGUgc3RhY2sgb2Zcbi8vaW52b2tpbmcgcnVsZXMuIENvbWJpbmUgdGhpcyBhbmQgd2UgaGF2ZSBjb21wbGV0ZSBBVE5cbi8vY29uZmlndXJhdGlvbiBpbmZvcm1hdGlvbi5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlY29nbml6ZXIucHJvdG90eXBlLCBcInN0YXRlXCIsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlTnVtYmVyO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoc3RhdGUpIHtcbiAgICAgICAgdGhpcy5fc3RhdGVOdW1iZXIgPSBzdGF0ZTtcbiAgICB9XG59KTtcblxuZXhwb3J0cy5SZWNvZ25pemVyID0gUmVjb2duaXplcjsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Recognizer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/RuleContext.js":
/*!***********************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/RuleContext.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\n//  A rule context is a record of a single rule invocation. It knows\n//  which context invoked it, if any. If there is no parent context, then\n//  naturally the invoking state is not valid.  The parent link\n//  provides a chain upwards from the current rule invocation to the root\n//  of the invocation tree, forming a stack. We actually carry no\n//  information about the rule associated with this context (except\n//  when parsing). We keep only the state number of the invoking state from\n//  the ATN submachine that invoked this. Contrast this with the s\n//  pointer inside ParserRuleContext that tracks the current state\n//  being \"executed\" for the current rule.\n//\n//  The parent contexts are useful for computing lookahead sets and\n//  getting error information.\n//\n//  These objects are used during parsing and prediction.\n//  For the special case of parsers, we use the subclass\n//  ParserRuleContext.\n//\n//  @see ParserRuleContext\n///\n\nvar RuleNode = (__webpack_require__(/*! ./tree/Tree */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/tree/Tree.js\").RuleNode);\nvar INVALID_INTERVAL = (__webpack_require__(/*! ./tree/Tree */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/tree/Tree.js\").INVALID_INTERVAL);\nvar INVALID_ALT_NUMBER = (__webpack_require__(/*! ./atn/ATN */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATN.js\").INVALID_ALT_NUMBER);\n\nfunction RuleContext(parent, invokingState) {\n\tRuleNode.call(this);\n\t// What context invoked this rule?\n\tthis.parentCtx = parent || null;\n\t// What state invoked the rule associated with this context?\n\t// The \"return address\" is the followState of invokingState\n\t// If parent is null, this should be -1.\n\tthis.invokingState = invokingState || -1;\n\treturn this;\n}\n\nRuleContext.prototype = Object.create(RuleNode.prototype);\nRuleContext.prototype.constructor = RuleContext;\n\nRuleContext.prototype.depth = function () {\n\tvar n = 0;\n\tvar p = this;\n\twhile (p !== null) {\n\t\tp = p.parentCtx;\n\t\tn += 1;\n\t}\n\treturn n;\n};\n\n// A context is empty if there is no invoking state; meaning nobody call\n// current context.\nRuleContext.prototype.isEmpty = function () {\n\treturn this.invokingState === -1;\n};\n\n// satisfy the ParseTree / SyntaxTree interface\n\nRuleContext.prototype.getSourceInterval = function () {\n\treturn INVALID_INTERVAL;\n};\n\nRuleContext.prototype.getRuleContext = function () {\n\treturn this;\n};\n\nRuleContext.prototype.getPayload = function () {\n\treturn this;\n};\n\n// Return the combined text of all child nodes. This method only considers\n// tokens which have been added to the parse tree.\n// <p>\n// Since tokens on hidden channels (e.g. whitespace or comments) are not\n// added to the parse trees, they will not appear in the output of this\n// method.\n// /\nRuleContext.prototype.getText = function () {\n\tif (this.getChildCount() === 0) {\n\t\treturn \"\";\n\t} else {\n\t\treturn this.children.map(function (child) {\n\t\t\treturn child.getText();\n\t\t}).join(\"\");\n\t}\n};\n\n// For rule associated with this parse tree internal node, return\n// the outer alternative number used to match the input. Default\n// implementation does not compute nor store this alt num. Create\n// a subclass of ParserRuleContext with backing field and set\n// option contextSuperClass.\n// to set it.\nRuleContext.prototype.getAltNumber = function () {\n\treturn INVALID_ALT_NUMBER;\n};\n\n// Set the outer alternative number for this context node. Default\n// implementation does nothing to avoid backing field overhead for\n// trees that don't need it.  Create\n// a subclass of ParserRuleContext with backing field and set\n// option contextSuperClass.\nRuleContext.prototype.setAltNumber = function (altNumber) {};\n\nRuleContext.prototype.getChild = function (i) {\n\treturn null;\n};\n\nRuleContext.prototype.getChildCount = function () {\n\treturn 0;\n};\n\nRuleContext.prototype.accept = function (visitor) {\n\treturn visitor.visitChildren(this);\n};\n\n//need to manage circular dependencies, so export now\nexports.RuleContext = RuleContext;\nvar Trees = (__webpack_require__(/*! ./tree/Trees */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/tree/Trees.js\").Trees);\n\n// Print out a whole tree, not just a node, in LISP format\n// (root child1 .. childN). Print just a node if this is a leaf.\n//\n\nRuleContext.prototype.toStringTree = function (ruleNames, recog) {\n\treturn Trees.toStringTree(this, ruleNames, recog);\n};\n\nRuleContext.prototype.toString = function (ruleNames, stop) {\n\truleNames = ruleNames || null;\n\tstop = stop || null;\n\tvar p = this;\n\tvar s = \"[\";\n\twhile (p !== null && p !== stop) {\n\t\tif (ruleNames === null) {\n\t\t\tif (!p.isEmpty()) {\n\t\t\t\ts += p.invokingState;\n\t\t\t}\n\t\t} else {\n\t\t\tvar ri = p.ruleIndex;\n\t\t\tvar ruleName = ri >= 0 && ri < ruleNames.length ? ruleNames[ri] : \"\" + ri;\n\t\t\ts += ruleName;\n\t\t}\n\t\tif (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {\n\t\t\ts += \" \";\n\t\t}\n\t\tp = p.parentCtx;\n\t}\n\ts += \"]\";\n\treturn s;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/RuleContext.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Token.js":
/*!*****************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/Token.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\n// A token has properties: text, type, line, character position in the line\n// (so we can ignore tabs), token channel, index, and source from which\n// we obtained this token.\n\nfunction Token() {\n\tthis.source = null;\n\tthis.type = null; // token type of the token\n\tthis.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL\n\tthis.start = null; // optional; return -1 if not implemented.\n\tthis.stop = null; // optional; return -1 if not implemented.\n\tthis.tokenIndex = null; // from 0..n-1 of the token object in the input stream\n\tthis.line = null; // line=1..n of the 1st character\n\tthis.column = null; // beginning of the line at which it occurs, 0..n-1\n\tthis._text = null; // text of the token.\n\treturn this;\n}\n\nToken.INVALID_TYPE = 0;\n\n// During lookahead operations, this \"token\" signifies we hit rule end ATN state\n// and did not follow it despite needing to.\nToken.EPSILON = -2;\n\nToken.MIN_USER_TOKEN_TYPE = 1;\n\nToken.EOF = -1;\n\n// All tokens go to the parser (unless skip() is called in that rule)\n// on a particular \"channel\". The parser tunes to a particular channel\n// so that whitespace etc... can go to the parser on a \"hidden\" channel.\n\nToken.DEFAULT_CHANNEL = 0;\n\n// Anything on different channel than DEFAULT_CHANNEL is not parsed\n// by parser.\n\nToken.HIDDEN_CHANNEL = 1;\n\n// Explicitly set the text for this token. If {code text} is not\n// {@code null}, then {@link //getText} will return this value rather than\n// extracting the text from the input.\n//\n// @param text The explicit text of the token, or {@code null} if the text\n// should be obtained from the input along with the start and stop indexes\n// of the token.\n\nObject.defineProperty(Token.prototype, \"text\", {\n\tget: function get() {\n\t\treturn this._text;\n\t},\n\tset: function set(text) {\n\t\tthis._text = text;\n\t}\n});\n\nToken.prototype.getTokenSource = function () {\n\treturn this.source[0];\n};\n\nToken.prototype.getInputStream = function () {\n\treturn this.source[1];\n};\n\nfunction CommonToken(source, type, channel, start, stop) {\n\tToken.call(this);\n\tthis.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;\n\tthis.type = type !== undefined ? type : null;\n\tthis.channel = channel !== undefined ? channel : Token.DEFAULT_CHANNEL;\n\tthis.start = start !== undefined ? start : -1;\n\tthis.stop = stop !== undefined ? stop : -1;\n\tthis.tokenIndex = -1;\n\tif (this.source[0] !== null) {\n\t\tthis.line = source[0].line;\n\t\tthis.column = source[0].column;\n\t} else {\n\t\tthis.column = -1;\n\t}\n\treturn this;\n}\n\nCommonToken.prototype = Object.create(Token.prototype);\nCommonToken.prototype.constructor = CommonToken;\n\n// An empty {@link Pair} which is used as the default value of\n// {@link //source} for tokens that do not have a source.\nCommonToken.EMPTY_SOURCE = [null, null];\n\n// Constructs a new {@link CommonToken} as a copy of another {@link Token}.\n//\n// <p>\n// If {@code oldToken} is also a {@link CommonToken} instance, the newly\n// constructed token will share a reference to the {@link //text} field and\n// the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will\n// be assigned the result of calling {@link //getText}, and {@link //source}\n// will be constructed from the result of {@link Token//getTokenSource} and\n// {@link Token//getInputStream}.</p>\n//\n// @param oldToken The token to copy.\n//\nCommonToken.prototype.clone = function () {\n\tvar t = new CommonToken(this.source, this.type, this.channel, this.start, this.stop);\n\tt.tokenIndex = this.tokenIndex;\n\tt.line = this.line;\n\tt.column = this.column;\n\tt.text = this.text;\n\treturn t;\n};\n\nObject.defineProperty(CommonToken.prototype, \"text\", {\n\tget: function get() {\n\t\tif (this._text !== null) {\n\t\t\treturn this._text;\n\t\t}\n\t\tvar input = this.getInputStream();\n\t\tif (input === null) {\n\t\t\treturn null;\n\t\t}\n\t\tvar n = input.size;\n\t\tif (this.start < n && this.stop < n) {\n\t\t\treturn input.getText(this.start, this.stop);\n\t\t} else {\n\t\t\treturn \"<EOF>\";\n\t\t}\n\t},\n\tset: function set(text) {\n\t\tthis._text = text;\n\t}\n});\n\nCommonToken.prototype.toString = function () {\n\tvar txt = this.text;\n\tif (txt !== null) {\n\t\ttxt = txt.replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/\\t/g, \"\\\\t\");\n\t} else {\n\t\ttxt = \"<no text>\";\n\t}\n\treturn \"[@\" + this.tokenIndex + \",\" + this.start + \":\" + this.stop + \"='\" + txt + \"',<\" + this.type + \">\" + (this.channel > 0 ? \",channel=\" + this.channel : \"\") + \",\" + this.line + \":\" + this.column + \"]\";\n};\n\nexports.Token = Token;\nexports.CommonToken = CommonToken;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Token.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Utils.js":
/*!*****************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/Utils.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nfunction arrayToString(a) {\n    return \"[\" + a.join(\", \") + \"]\";\n}\n\nString.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));\n\nString.prototype.hashCode = function () {\n    var remainder,\n        bytes,\n        h1,\n        h1b,\n        c1,\n        c1b,\n        c2,\n        c2b,\n        k1,\n        i,\n        key = this.toString();\n\n    remainder = key.length & 3; // key.length % 4\n    bytes = key.length - remainder;\n    h1 = String.prototype.seed;\n    c1 = 0xcc9e2d51;\n    c2 = 0x1b873593;\n    i = 0;\n\n    while (i < bytes) {\n        k1 = key.charCodeAt(i) & 0xff | (key.charCodeAt(++i) & 0xff) << 8 | (key.charCodeAt(++i) & 0xff) << 16 | (key.charCodeAt(++i) & 0xff) << 24;\n        ++i;\n\n        k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;\n        k1 = k1 << 15 | k1 >>> 17;\n        k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;\n\n        h1 ^= k1;\n        h1 = h1 << 13 | h1 >>> 19;\n        h1b = (h1 & 0xffff) * 5 + (((h1 >>> 16) * 5 & 0xffff) << 16) & 0xffffffff;\n        h1 = (h1b & 0xffff) + 0x6b64 + (((h1b >>> 16) + 0xe654 & 0xffff) << 16);\n    }\n\n    k1 = 0;\n\n    switch (remainder) {\n        case 3:\n            k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n        case 2:\n            k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n        case 1:\n            k1 ^= key.charCodeAt(i) & 0xff;\n\n            k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;\n            k1 = k1 << 15 | k1 >>> 17;\n            k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;\n            h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n\n    h1 ^= h1 >>> 16;\n    h1 = (h1 & 0xffff) * 0x85ebca6b + (((h1 >>> 16) * 0x85ebca6b & 0xffff) << 16) & 0xffffffff;\n    h1 ^= h1 >>> 13;\n    h1 = (h1 & 0xffff) * 0xc2b2ae35 + (((h1 >>> 16) * 0xc2b2ae35 & 0xffff) << 16) & 0xffffffff;\n    h1 ^= h1 >>> 16;\n\n    return h1 >>> 0;\n};\n\nfunction standardEqualsFunction(a, b) {\n    return a.equals(b);\n}\n\nfunction standardHashCodeFunction(a) {\n    return a.hashCode();\n}\n\nfunction Set(hashFunction, equalsFunction) {\n    this.data = {};\n    this.hashFunction = hashFunction || standardHashCodeFunction;\n    this.equalsFunction = equalsFunction || standardEqualsFunction;\n    return this;\n}\n\nObject.defineProperty(Set.prototype, \"length\", {\n    get: function get() {\n        var l = 0;\n        for (var key in this.data) {\n            if (key.indexOf(\"hash_\") === 0) {\n                l = l + this.data[key].length;\n            }\n        }\n        return l;\n    }\n});\n\nSet.prototype.add = function (value) {\n    var hash = this.hashFunction(value);\n    var key = \"hash_\" + hash;\n    if (key in this.data) {\n        var values = this.data[key];\n        for (var i = 0; i < values.length; i++) {\n            if (this.equalsFunction(value, values[i])) {\n                return values[i];\n            }\n        }\n        values.push(value);\n        return value;\n    } else {\n        this.data[key] = [value];\n        return value;\n    }\n};\n\nSet.prototype.contains = function (value) {\n    return this.get(value) != null;\n};\n\nSet.prototype.get = function (value) {\n    var hash = this.hashFunction(value);\n    var key = \"hash_\" + hash;\n    if (key in this.data) {\n        var values = this.data[key];\n        for (var i = 0; i < values.length; i++) {\n            if (this.equalsFunction(value, values[i])) {\n                return values[i];\n            }\n        }\n    }\n    return null;\n};\n\nSet.prototype.values = function () {\n    var l = [];\n    for (var key in this.data) {\n        if (key.indexOf(\"hash_\") === 0) {\n            l = l.concat(this.data[key]);\n        }\n    }\n    return l;\n};\n\nSet.prototype.toString = function () {\n    return arrayToString(this.values());\n};\n\nfunction BitSet() {\n    this.data = [];\n    return this;\n}\n\nBitSet.prototype.add = function (value) {\n    this.data[value] = true;\n};\n\nBitSet.prototype.or = function (set) {\n    var bits = this;\n    Object.keys(set.data).map(function (alt) {\n        bits.add(alt);\n    });\n};\n\nBitSet.prototype.remove = function (value) {\n    delete this.data[value];\n};\n\nBitSet.prototype.contains = function (value) {\n    return this.data[value] === true;\n};\n\nBitSet.prototype.values = function () {\n    return Object.keys(this.data);\n};\n\nBitSet.prototype.minValue = function () {\n    return Math.min.apply(null, this.values());\n};\n\nBitSet.prototype.hashCode = function () {\n    var hash = new Hash();\n    hash.update(this.values());\n    return hash.finish();\n};\n\nBitSet.prototype.equals = function (other) {\n    if (!(other instanceof BitSet)) {\n        return false;\n    }\n    return this.hashCode() === other.hashCode();\n};\n\nObject.defineProperty(BitSet.prototype, \"length\", {\n    get: function get() {\n        return this.values().length;\n    }\n});\n\nBitSet.prototype.toString = function () {\n    return \"{\" + this.values().join(\", \") + \"}\";\n};\n\nfunction Map(hashFunction, equalsFunction) {\n    this.data = {};\n    this.hashFunction = hashFunction || standardHashCodeFunction;\n    this.equalsFunction = equalsFunction || standardEqualsFunction;\n    return this;\n}\n\nObject.defineProperty(Map.prototype, \"length\", {\n    get: function get() {\n        var l = 0;\n        for (var hashKey in this.data) {\n            if (hashKey.indexOf(\"hash_\") === 0) {\n                l = l + this.data[hashKey].length;\n            }\n        }\n        return l;\n    }\n});\n\nMap.prototype.put = function (key, value) {\n    var hashKey = \"hash_\" + this.hashFunction(key);\n    if (hashKey in this.data) {\n        var entries = this.data[hashKey];\n        for (var i = 0; i < entries.length; i++) {\n            var entry = entries[i];\n            if (this.equalsFunction(key, entry.key)) {\n                var oldValue = entry.value;\n                entry.value = value;\n                return oldValue;\n            }\n        }\n        entries.push({ key: key, value: value });\n        return value;\n    } else {\n        this.data[hashKey] = [{ key: key, value: value }];\n        return value;\n    }\n};\n\nMap.prototype.containsKey = function (key) {\n    var hashKey = \"hash_\" + this.hashFunction(key);\n    if (hashKey in this.data) {\n        var entries = this.data[hashKey];\n        for (var i = 0; i < entries.length; i++) {\n            var entry = entries[i];\n            if (this.equalsFunction(key, entry.key)) return true;\n        }\n    }\n    return false;\n};\n\nMap.prototype.get = function (key) {\n    var hashKey = \"hash_\" + this.hashFunction(key);\n    if (hashKey in this.data) {\n        var entries = this.data[hashKey];\n        for (var i = 0; i < entries.length; i++) {\n            var entry = entries[i];\n            if (this.equalsFunction(key, entry.key)) return entry.value;\n        }\n    }\n    return null;\n};\n\nMap.prototype.entries = function () {\n    var l = [];\n    for (var key in this.data) {\n        if (key.indexOf(\"hash_\") === 0) {\n            l = l.concat(this.data[key]);\n        }\n    }\n    return l;\n};\n\nMap.prototype.getKeys = function () {\n    return this.entries().map(function (e) {\n        return e.key;\n    });\n};\n\nMap.prototype.getValues = function () {\n    return this.entries().map(function (e) {\n        return e.value;\n    });\n};\n\nMap.prototype.toString = function () {\n    var ss = this.entries().map(function (entry) {\n        return '{' + entry.key + ':' + entry.value + '}';\n    });\n    return '[' + ss.join(\", \") + ']';\n};\n\nfunction AltDict() {\n    this.data = {};\n    return this;\n}\n\nAltDict.prototype.get = function (key) {\n    key = \"k-\" + key;\n    if (key in this.data) {\n        return this.data[key];\n    } else {\n        return null;\n    }\n};\n\nAltDict.prototype.put = function (key, value) {\n    key = \"k-\" + key;\n    this.data[key] = value;\n};\n\nAltDict.prototype.values = function () {\n    var data = this.data;\n    var keys = Object.keys(this.data);\n    return keys.map(function (key) {\n        return data[key];\n    });\n};\n\nfunction DoubleDict() {\n    return this;\n}\n\nfunction Hash() {\n    this.count = 0;\n    this.hash = 0;\n    return this;\n}\n\nHash.prototype.update = function () {\n    for (var i = 0; i < arguments.length; i++) {\n        var value = arguments[i];\n        if (value == null) continue;\n        if (Array.isArray(value)) this.update.apply(value);else {\n            var k = 0;\n            switch (typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) {\n                case 'undefined':\n                case 'function':\n                    continue;\n                case 'number':\n                case 'boolean':\n                    k = value;\n                    break;\n                case 'string':\n                    k = value.hashCode();\n                    break;\n                default:\n                    value.updateHashCode(this);\n                    continue;\n            }\n            k = k * 0xCC9E2D51;\n            k = k << 15 | k >>> 32 - 15;\n            k = k * 0x1B873593;\n            this.count = this.count + 1;\n            var hash = this.hash ^ k;\n            hash = hash << 13 | hash >>> 32 - 13;\n            hash = hash * 5 + 0xE6546B64;\n            this.hash = hash;\n        }\n    }\n};\n\nHash.prototype.finish = function () {\n    var hash = this.hash ^ this.count * 4;\n    hash = hash ^ hash >>> 16;\n    hash = hash * 0x85EBCA6B;\n    hash = hash ^ hash >>> 13;\n    hash = hash * 0xC2B2AE35;\n    hash = hash ^ hash >>> 16;\n    return hash;\n};\n\nfunction hashStuff() {\n    var hash = new Hash();\n    hash.update.apply(arguments);\n    return hash.finish();\n}\n\nDoubleDict.prototype.get = function (a, b) {\n    var d = this[a] || null;\n    return d === null ? null : d[b] || null;\n};\n\nDoubleDict.prototype.set = function (a, b, o) {\n    var d = this[a] || null;\n    if (d === null) {\n        d = {};\n        this[a] = d;\n    }\n    d[b] = o;\n};\n\nfunction escapeWhitespace(s, escapeSpaces) {\n    s = s.replace(\"\\t\", \"\\\\t\");\n    s = s.replace(\"\\n\", \"\\\\n\");\n    s = s.replace(\"\\r\", \"\\\\r\");\n    if (escapeSpaces) {\n        s = s.replace(\" \", \"\\xB7\");\n    }\n    return s;\n}\n\nfunction titleCase(str) {\n    return str.replace(/\\w\\S*/g, function (txt) {\n        return txt.charAt(0).toUpperCase() + txt.substr(1);\n    });\n};\n\nfunction equalArrays(a, b) {\n    if (!Array.isArray(a) || !Array.isArray(b)) return false;\n    if (a == b) return true;\n    if (a.length != b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n        if (a[i] == b[i]) continue;\n        if (!a[i].equals(b[i])) return false;\n    }\n    return true;\n};\n\nexports.Hash = Hash;\nexports.Set = Set;\nexports.Map = Map;\nexports.BitSet = BitSet;\nexports.AltDict = AltDict;\nexports.DoubleDict = DoubleDict;\nexports.hashStuff = hashStuff;\nexports.escapeWhitespace = escapeWhitespace;\nexports.arrayToString = arrayToString;\nexports.titleCase = titleCase;\nexports.equalArrays = equalArrays;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATN.js":
/*!*******************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATN.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nvar LL1Analyzer = (__webpack_require__(/*! ./../LL1Analyzer */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/LL1Analyzer.js\").LL1Analyzer);\nvar IntervalSet = (__webpack_require__(/*! ./../IntervalSet */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/IntervalSet.js\").IntervalSet);\n\nfunction ATN(grammarType, maxTokenType) {\n\n    // Used for runtime deserialization of ATNs from strings///\n    // The type of the ATN.\n    this.grammarType = grammarType;\n    // The maximum value for any symbol recognized by a transition in the ATN.\n    this.maxTokenType = maxTokenType;\n    this.states = [];\n    // Each subrule/rule is a decision point and we must track them so we\n    //  can go back later and build DFA predictors for them.  This includes\n    //  all the rules, subrules, optional blocks, ()+, ()* etc...\n    this.decisionToState = [];\n    // Maps from rule index to starting state number.\n    this.ruleToStartState = [];\n    // Maps from rule index to stop state number.\n    this.ruleToStopState = null;\n    this.modeNameToStartState = {};\n    // For lexer ATNs, this maps the rule index to the resulting token type.\n    // For parser ATNs, this maps the rule index to the generated bypass token\n    // type if the\n    // {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}\n    // deserialization option was specified; otherwise, this is {@code null}.\n    this.ruleToTokenType = null;\n    // For lexer ATNs, this is an array of {@link LexerAction} objects which may\n    // be referenced by action transitions in the ATN.\n    this.lexerActions = null;\n    this.modeToStartState = [];\n\n    return this;\n}\n\n// Compute the set of valid tokens that can occur starting in state {@code s}.\n//  If {@code ctx} is null, the set of tokens will not include what can follow\n//  the rule surrounding {@code s}. In other words, the set will be\n//  restricted to tokens reachable staying within {@code s}'s rule.\nATN.prototype.nextTokensInContext = function (s, ctx) {\n    var anal = new LL1Analyzer(this);\n    return anal.LOOK(s, null, ctx);\n};\n\n// Compute the set of valid tokens that can occur starting in {@code s} and\n// staying in same rule. {@link Token//EPSILON} is in set if we reach end of\n// rule.\nATN.prototype.nextTokensNoContext = function (s) {\n    if (s.nextTokenWithinRule !== null) {\n        return s.nextTokenWithinRule;\n    }\n    s.nextTokenWithinRule = this.nextTokensInContext(s, null);\n    s.nextTokenWithinRule.readOnly = true;\n    return s.nextTokenWithinRule;\n};\n\nATN.prototype.nextTokens = function (s, ctx) {\n    if (ctx === undefined) {\n        return this.nextTokensNoContext(s);\n    } else {\n        return this.nextTokensInContext(s, ctx);\n    }\n};\n\nATN.prototype.addState = function (state) {\n    if (state !== null) {\n        state.atn = this;\n        state.stateNumber = this.states.length;\n    }\n    this.states.push(state);\n};\n\nATN.prototype.removeState = function (state) {\n    this.states[state.stateNumber] = null; // just free mem, don't shift states in list\n};\n\nATN.prototype.defineDecisionState = function (s) {\n    this.decisionToState.push(s);\n    s.decision = this.decisionToState.length - 1;\n    return s.decision;\n};\n\nATN.prototype.getDecisionState = function (decision) {\n    if (this.decisionToState.length === 0) {\n        return null;\n    } else {\n        return this.decisionToState[decision];\n    }\n};\n\n// Computes the set of input symbols which could follow ATN state number\n// {@code stateNumber} in the specified full {@code context}. This method\n// considers the complete parser context, but does not evaluate semantic\n// predicates (i.e. all predicates encountered during the calculation are\n// assumed true). If a path in the ATN exists from the starting state to the\n// {@link RuleStopState} of the outermost context without matching any\n// symbols, {@link Token//EOF} is added to the returned set.\n//\n// <p>If {@code context} is {@code null}, it is treated as\n// {@link ParserRuleContext//EMPTY}.</p>\n//\n// @param stateNumber the ATN state number\n// @param context the full parse context\n// @return The set of potentially valid input symbols which could follow the\n// specified state in the specified context.\n// @throws IllegalArgumentException if the ATN does not contain a state with\n// number {@code stateNumber}\nvar Token = (__webpack_require__(/*! ./../Token */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Token.js\").Token);\n\nATN.prototype.getExpectedTokens = function (stateNumber, ctx) {\n    if (stateNumber < 0 || stateNumber >= this.states.length) {\n        throw \"Invalid state number.\";\n    }\n    var s = this.states[stateNumber];\n    var following = this.nextTokens(s);\n    if (!following.contains(Token.EPSILON)) {\n        return following;\n    }\n    var expected = new IntervalSet();\n    expected.addSet(following);\n    expected.removeOne(Token.EPSILON);\n    while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {\n        var invokingState = this.states[ctx.invokingState];\n        var rt = invokingState.transitions[0];\n        following = this.nextTokens(rt.followState);\n        expected.addSet(following);\n        expected.removeOne(Token.EPSILON);\n        ctx = ctx.parentCtx;\n    }\n    if (following.contains(Token.EPSILON)) {\n        expected.addOne(Token.EOF);\n    }\n    return expected;\n};\n\nATN.INVALID_ALT_NUMBER = 0;\n\nexports.ATN = ATN;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATN.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNConfig.js":
/*!*************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNConfig.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\n// A tuple: (ATN state, predicted alt, syntactic, semantic context).\n//  The syntactic context is a graph-structured stack node whose\n//  path(s) to the root is the rule invocation(s)\n//  chain used to arrive at the state.  The semantic context is\n//  the tree of semantic predicates encountered before reaching\n//  an ATN state.\n///\n\nvar DecisionState = (__webpack_require__(/*! ./ATNState */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNState.js\").DecisionState);\nvar SemanticContext = (__webpack_require__(/*! ./SemanticContext */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/SemanticContext.js\").SemanticContext);\nvar Hash = (__webpack_require__(/*! ../Utils */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Utils.js\").Hash);\n\nfunction checkParams(params, isCfg) {\n    if (params === null) {\n        var result = { state: null, alt: null, context: null, semanticContext: null };\n        if (isCfg) {\n            result.reachesIntoOuterContext = 0;\n        }\n        return result;\n    } else {\n        var props = {};\n        props.state = params.state || null;\n        props.alt = params.alt === undefined ? null : params.alt;\n        props.context = params.context || null;\n        props.semanticContext = params.semanticContext || null;\n        if (isCfg) {\n            props.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;\n            props.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;\n        }\n        return props;\n    }\n}\n\nfunction ATNConfig(params, config) {\n    this.checkContext(params, config);\n    params = checkParams(params);\n    config = checkParams(config, true);\n    // The ATN state associated with this configuration///\n    this.state = params.state !== null ? params.state : config.state;\n    // What alt (or lexer rule) is predicted by this configuration///\n    this.alt = params.alt !== null ? params.alt : config.alt;\n    // The stack of invoking states leading to the rule/states associated\n    //  with this config.  We track only those contexts pushed during\n    //  execution of the ATN simulator.\n    this.context = params.context !== null ? params.context : config.context;\n    this.semanticContext = params.semanticContext !== null ? params.semanticContext : config.semanticContext !== null ? config.semanticContext : SemanticContext.NONE;\n    // We cannot execute predicates dependent upon local context unless\n    // we know for sure we are in the correct context. Because there is\n    // no way to do this efficiently, we simply cannot evaluate\n    // dependent predicates unless we are in the rule that initially\n    // invokes the ATN simulator.\n    //\n    // closure() tracks the depth of how far we dip into the\n    // outer context: depth &gt; 0.  Note that it may not be totally\n    // accurate depth since I don't ever decrement. TODO: make it a boolean then\n    this.reachesIntoOuterContext = config.reachesIntoOuterContext;\n    this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;\n    return this;\n}\n\nATNConfig.prototype.checkContext = function (params, config) {\n    if ((params.context === null || params.context === undefined) && (config === null || config.context === null || config.context === undefined)) {\n        this.context = null;\n    }\n};\n\nATNConfig.prototype.hashCode = function () {\n    var hash = new Hash();\n    this.updateHashCode(hash);\n    return hash.finish();\n};\n\nATNConfig.prototype.updateHashCode = function (hash) {\n    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);\n};\n\n// An ATN configuration is equal to another if both have\n//  the same state, they predict the same alternative, and\n//  syntactic/semantic contexts are the same.\n\nATNConfig.prototype.equals = function (other) {\n    if (this === other) {\n        return true;\n    } else if (!(other instanceof ATNConfig)) {\n        return false;\n    } else {\n        return this.state.stateNumber === other.state.stateNumber && this.alt === other.alt && (this.context === null ? other.context === null : this.context.equals(other.context)) && this.semanticContext.equals(other.semanticContext) && this.precedenceFilterSuppressed === other.precedenceFilterSuppressed;\n    }\n};\n\nATNConfig.prototype.hashCodeForConfigSet = function () {\n    var hash = new Hash();\n    hash.update(this.state.stateNumber, this.alt, this.semanticContext);\n    return hash.finish();\n};\n\nATNConfig.prototype.equalsForConfigSet = function (other) {\n    if (this === other) {\n        return true;\n    } else if (!(other instanceof ATNConfig)) {\n        return false;\n    } else {\n        return this.state.stateNumber === other.state.stateNumber && this.alt === other.alt && this.semanticContext.equals(other.semanticContext);\n    }\n};\n\nATNConfig.prototype.toString = function () {\n    return \"(\" + this.state + \",\" + this.alt + (this.context !== null ? \",[\" + this.context.toString() + \"]\" : \"\") + (this.semanticContext !== SemanticContext.NONE ? \",\" + this.semanticContext.toString() : \"\") + (this.reachesIntoOuterContext > 0 ? \",up=\" + this.reachesIntoOuterContext : \"\") + \")\";\n};\n\nfunction LexerATNConfig(params, config) {\n    ATNConfig.call(this, params, config);\n\n    // This is the backing field for {@link //getLexerActionExecutor}.\n    var lexerActionExecutor = params.lexerActionExecutor || null;\n    this.lexerActionExecutor = lexerActionExecutor || (config !== null ? config.lexerActionExecutor : null);\n    this.passedThroughNonGreedyDecision = config !== null ? this.checkNonGreedyDecision(config, this.state) : false;\n    return this;\n}\n\nLexerATNConfig.prototype = Object.create(ATNConfig.prototype);\nLexerATNConfig.prototype.constructor = LexerATNConfig;\n\nLexerATNConfig.prototype.updateHashCode = function (hash) {\n    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);\n};\n\nLexerATNConfig.prototype.equals = function (other) {\n    return this === other || other instanceof LexerATNConfig && this.passedThroughNonGreedyDecision == other.passedThroughNonGreedyDecision && (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) && ATNConfig.prototype.equals.call(this, other);\n};\n\nLexerATNConfig.prototype.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;\n\nLexerATNConfig.prototype.equalsForConfigSet = LexerATNConfig.prototype.equals;\n\nLexerATNConfig.prototype.checkNonGreedyDecision = function (source, target) {\n    return source.passedThroughNonGreedyDecision || target instanceof DecisionState && target.nonGreedy;\n};\n\nexports.ATNConfig = ATNConfig;\nexports.LexerATNConfig = LexerATNConfig;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNConfig.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNConfigSet.js":
/*!****************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNConfigSet.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n//\n// Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track\n// info about the set, with support for combining similar configurations using a\n// graph-structured stack.\n///\n\nvar ATN = (__webpack_require__(/*! ./ATN */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATN.js\").ATN);\nvar Utils = __webpack_require__(/*! ./../Utils */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Utils.js\");\nvar Hash = Utils.Hash;\nvar Set = Utils.Set;\nvar SemanticContext = (__webpack_require__(/*! ./SemanticContext */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/SemanticContext.js\").SemanticContext);\nvar merge = (__webpack_require__(/*! ./../PredictionContext */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/PredictionContext.js\").merge);\n\nfunction hashATNConfig(c) {\n\treturn c.hashCodeForConfigSet();\n}\n\nfunction equalATNConfigs(a, b) {\n\tif (a === b) {\n\t\treturn true;\n\t} else if (a === null || b === null) {\n\t\treturn false;\n\t} else return a.equalsForConfigSet(b);\n}\n\nfunction ATNConfigSet(fullCtx) {\n\t//\n\t// The reason that we need this is because we don't want the hash map to use\n\t// the standard hash code and equals. We need all configurations with the\n\t// same\n\t// {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively\n\t// doubles\n\t// the number of objects associated with ATNConfigs. The other solution is\n\t// to\n\t// use a hash table that lets us specify the equals/hashcode operation.\n\t// All configs but hashed by (s, i, _, pi) not including context. Wiped out\n\t// when we go readonly as this set becomes a DFA state.\n\tthis.configLookup = new Set(hashATNConfig, equalATNConfigs);\n\t// Indicates that this configuration set is part of a full context\n\t// LL prediction. It will be used to determine how to merge $. With SLL\n\t// it's a wildcard whereas it is not for LL context merge.\n\tthis.fullCtx = fullCtx === undefined ? true : fullCtx;\n\t// Indicates that the set of configurations is read-only. Do not\n\t// allow any code to manipulate the set; DFA states will point at\n\t// the sets and they must not change. This does not protect the other\n\t// fields; in particular, conflictingAlts is set after\n\t// we've made this readonly.\n\tthis.readOnly = false;\n\t// Track the elements as they are added to the set; supports get(i)///\n\tthis.configs = [];\n\n\t// TODO: these fields make me pretty uncomfortable but nice to pack up info\n\t// together, saves recomputation\n\t// TODO: can we track conflicts as they are added to save scanning configs\n\t// later?\n\tthis.uniqueAlt = 0;\n\tthis.conflictingAlts = null;\n\n\t// Used in parser and lexer. In lexer, it indicates we hit a pred\n\t// while computing a closure operation. Don't make a DFA state from this.\n\tthis.hasSemanticContext = false;\n\tthis.dipsIntoOuterContext = false;\n\n\tthis.cachedHashCode = -1;\n\n\treturn this;\n}\n\n// Adding a new config means merging contexts with existing configs for\n// {@code (s, i, pi, _)}, where {@code s} is the\n// {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and\n// {@code pi} is the {@link ATNConfig//semanticContext}. We use\n// {@code (s,i,pi)} as key.\n//\n// <p>This method updates {@link //dipsIntoOuterContext} and\n// {@link //hasSemanticContext} when necessary.</p>\n// /\nATNConfigSet.prototype.add = function (config, mergeCache) {\n\tif (mergeCache === undefined) {\n\t\tmergeCache = null;\n\t}\n\tif (this.readOnly) {\n\t\tthrow \"This set is readonly\";\n\t}\n\tif (config.semanticContext !== SemanticContext.NONE) {\n\t\tthis.hasSemanticContext = true;\n\t}\n\tif (config.reachesIntoOuterContext > 0) {\n\t\tthis.dipsIntoOuterContext = true;\n\t}\n\tvar existing = this.configLookup.add(config);\n\tif (existing === config) {\n\t\tthis.cachedHashCode = -1;\n\t\tthis.configs.push(config); // track order here\n\t\treturn true;\n\t}\n\t// a previous (s,i,pi,_), merge with it and save result\n\tvar rootIsWildcard = !this.fullCtx;\n\tvar merged = merge(existing.context, config.context, rootIsWildcard, mergeCache);\n\t// no need to check for existing.context, config.context in cache\n\t// since only way to create new graphs is \"call rule\" and here. We\n\t// cache at both places.\n\texisting.reachesIntoOuterContext = Math.max(existing.reachesIntoOuterContext, config.reachesIntoOuterContext);\n\t// make sure to preserve the precedence filter suppression during the merge\n\tif (config.precedenceFilterSuppressed) {\n\t\texisting.precedenceFilterSuppressed = true;\n\t}\n\texisting.context = merged; // replace context; no need to alt mapping\n\treturn true;\n};\n\nATNConfigSet.prototype.getStates = function () {\n\tvar states = new Set();\n\tfor (var i = 0; i < this.configs.length; i++) {\n\t\tstates.add(this.configs[i].state);\n\t}\n\treturn states;\n};\n\nATNConfigSet.prototype.getPredicates = function () {\n\tvar preds = [];\n\tfor (var i = 0; i < this.configs.length; i++) {\n\t\tvar c = this.configs[i].semanticContext;\n\t\tif (c !== SemanticContext.NONE) {\n\t\t\tpreds.push(c.semanticContext);\n\t\t}\n\t}\n\treturn preds;\n};\n\nObject.defineProperty(ATNConfigSet.prototype, \"items\", {\n\tget: function get() {\n\t\treturn this.configs;\n\t}\n});\n\nATNConfigSet.prototype.optimizeConfigs = function (interpreter) {\n\tif (this.readOnly) {\n\t\tthrow \"This set is readonly\";\n\t}\n\tif (this.configLookup.length === 0) {\n\t\treturn;\n\t}\n\tfor (var i = 0; i < this.configs.length; i++) {\n\t\tvar config = this.configs[i];\n\t\tconfig.context = interpreter.getCachedContext(config.context);\n\t}\n};\n\nATNConfigSet.prototype.addAll = function (coll) {\n\tfor (var i = 0; i < coll.length; i++) {\n\t\tthis.add(coll[i]);\n\t}\n\treturn false;\n};\n\nATNConfigSet.prototype.equals = function (other) {\n\treturn this === other || other instanceof ATNConfigSet && Utils.equalArrays(this.configs, other.configs) && this.fullCtx === other.fullCtx && this.uniqueAlt === other.uniqueAlt && this.conflictingAlts === other.conflictingAlts && this.hasSemanticContext === other.hasSemanticContext && this.dipsIntoOuterContext === other.dipsIntoOuterContext;\n};\n\nATNConfigSet.prototype.hashCode = function () {\n\tvar hash = new Hash();\n\tthis.updateHashCode(hash);\n\treturn hash.finish();\n};\n\nATNConfigSet.prototype.updateHashCode = function (hash) {\n\tif (this.readOnly) {\n\t\tif (this.cachedHashCode === -1) {\n\t\t\tvar hash = new Hash();\n\t\t\thash.update(this.configs);\n\t\t\tthis.cachedHashCode = hash.finish();\n\t\t}\n\t\thash.update(this.cachedHashCode);\n\t} else {\n\t\thash.update(this.configs);\n\t}\n};\n\nObject.defineProperty(ATNConfigSet.prototype, \"length\", {\n\tget: function get() {\n\t\treturn this.configs.length;\n\t}\n});\n\nATNConfigSet.prototype.isEmpty = function () {\n\treturn this.configs.length === 0;\n};\n\nATNConfigSet.prototype.contains = function (item) {\n\tif (this.configLookup === null) {\n\t\tthrow \"This method is not implemented for readonly sets.\";\n\t}\n\treturn this.configLookup.contains(item);\n};\n\nATNConfigSet.prototype.containsFast = function (item) {\n\tif (this.configLookup === null) {\n\t\tthrow \"This method is not implemented for readonly sets.\";\n\t}\n\treturn this.configLookup.containsFast(item);\n};\n\nATNConfigSet.prototype.clear = function () {\n\tif (this.readOnly) {\n\t\tthrow \"This set is readonly\";\n\t}\n\tthis.configs = [];\n\tthis.cachedHashCode = -1;\n\tthis.configLookup = new Set();\n};\n\nATNConfigSet.prototype.setReadonly = function (readOnly) {\n\tthis.readOnly = readOnly;\n\tif (readOnly) {\n\t\tthis.configLookup = null; // can't mod, no need for lookup cache\n\t}\n};\n\nATNConfigSet.prototype.toString = function () {\n\treturn Utils.arrayToString(this.configs) + (this.hasSemanticContext ? \",hasSemanticContext=\" + this.hasSemanticContext : \"\") + (this.uniqueAlt !== ATN.INVALID_ALT_NUMBER ? \",uniqueAlt=\" + this.uniqueAlt : \"\") + (this.conflictingAlts !== null ? \",conflictingAlts=\" + this.conflictingAlts : \"\") + (this.dipsIntoOuterContext ? \",dipsIntoOuterContext\" : \"\");\n};\n\nfunction OrderedATNConfigSet() {\n\tATNConfigSet.call(this);\n\tthis.configLookup = new Set();\n\treturn this;\n}\n\nOrderedATNConfigSet.prototype = Object.create(ATNConfigSet.prototype);\nOrderedATNConfigSet.prototype.constructor = OrderedATNConfigSet;\n\nexports.ATNConfigSet = ATNConfigSet;\nexports.OrderedATNConfigSet = OrderedATNConfigSet;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNConfigSet.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNDeserializationOptions.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNDeserializationOptions.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nfunction ATNDeserializationOptions(copyFrom) {\n  if (copyFrom === undefined) {\n    copyFrom = null;\n  }\n  this.readOnly = false;\n  this.verifyATN = copyFrom === null ? true : copyFrom.verifyATN;\n  this.generateRuleBypassTransitions = copyFrom === null ? false : copyFrom.generateRuleBypassTransitions;\n\n  return this;\n}\n\nATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();\nATNDeserializationOptions.defaultOptions.readOnly = true;\n\n//    def __setattr__(self, key, value):\n//        if key!=\"readOnly\" and self.readOnly:\n//            raise Exception(\"The object is read only.\")\n//        super(type(self), self).__setattr__(key,value)\n\nexports.ATNDeserializationOptions = ATNDeserializationOptions;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L2F0bi9BVE5EZXNlcmlhbGl6YXRpb25PcHRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWMvZmxvd3BvcnQvbm9kZV9tb2R1bGVzL3NvbGlkaXR5LXBhcnNlci1hbnRsci9kaXN0L2FudGxyNC9hdG4vQVRORGVzZXJpYWxpemF0aW9uT3B0aW9ucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG5mdW5jdGlvbiBBVE5EZXNlcmlhbGl6YXRpb25PcHRpb25zKGNvcHlGcm9tKSB7XG4gIGlmIChjb3B5RnJvbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY29weUZyb20gPSBudWxsO1xuICB9XG4gIHRoaXMucmVhZE9ubHkgPSBmYWxzZTtcbiAgdGhpcy52ZXJpZnlBVE4gPSBjb3B5RnJvbSA9PT0gbnVsbCA/IHRydWUgOiBjb3B5RnJvbS52ZXJpZnlBVE47XG4gIHRoaXMuZ2VuZXJhdGVSdWxlQnlwYXNzVHJhbnNpdGlvbnMgPSBjb3B5RnJvbSA9PT0gbnVsbCA/IGZhbHNlIDogY29weUZyb20uZ2VuZXJhdGVSdWxlQnlwYXNzVHJhbnNpdGlvbnM7XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbkFUTkRlc2VyaWFsaXphdGlvbk9wdGlvbnMuZGVmYXVsdE9wdGlvbnMgPSBuZXcgQVRORGVzZXJpYWxpemF0aW9uT3B0aW9ucygpO1xuQVRORGVzZXJpYWxpemF0aW9uT3B0aW9ucy5kZWZhdWx0T3B0aW9ucy5yZWFkT25seSA9IHRydWU7XG5cbi8vICAgIGRlZiBfX3NldGF0dHJfXyhzZWxmLCBrZXksIHZhbHVlKTpcbi8vICAgICAgICBpZiBrZXkhPVwicmVhZE9ubHlcIiBhbmQgc2VsZi5yZWFkT25seTpcbi8vICAgICAgICAgICAgcmFpc2UgRXhjZXB0aW9uKFwiVGhlIG9iamVjdCBpcyByZWFkIG9ubHkuXCIpXG4vLyAgICAgICAgc3VwZXIodHlwZShzZWxmKSwgc2VsZikuX19zZXRhdHRyX18oa2V5LHZhbHVlKVxuXG5leHBvcnRzLkFUTkRlc2VyaWFsaXphdGlvbk9wdGlvbnMgPSBBVE5EZXNlcmlhbGl6YXRpb25PcHRpb25zOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNDeserializationOptions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNDeserializer.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNDeserializer.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nvar Token = (__webpack_require__(/*! ./../Token */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Token.js\").Token);\nvar ATN = (__webpack_require__(/*! ./ATN */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATN.js\").ATN);\nvar ATNType = (__webpack_require__(/*! ./ATNType */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNType.js\").ATNType);\nvar ATNStates = __webpack_require__(/*! ./ATNState */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNState.js\");\nvar ATNState = ATNStates.ATNState;\nvar BasicState = ATNStates.BasicState;\nvar DecisionState = ATNStates.DecisionState;\nvar BlockStartState = ATNStates.BlockStartState;\nvar BlockEndState = ATNStates.BlockEndState;\nvar LoopEndState = ATNStates.LoopEndState;\nvar RuleStartState = ATNStates.RuleStartState;\nvar RuleStopState = ATNStates.RuleStopState;\nvar TokensStartState = ATNStates.TokensStartState;\nvar PlusLoopbackState = ATNStates.PlusLoopbackState;\nvar StarLoopbackState = ATNStates.StarLoopbackState;\nvar StarLoopEntryState = ATNStates.StarLoopEntryState;\nvar PlusBlockStartState = ATNStates.PlusBlockStartState;\nvar StarBlockStartState = ATNStates.StarBlockStartState;\nvar BasicBlockStartState = ATNStates.BasicBlockStartState;\nvar Transitions = __webpack_require__(/*! ./Transition */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/Transition.js\");\nvar Transition = Transitions.Transition;\nvar AtomTransition = Transitions.AtomTransition;\nvar SetTransition = Transitions.SetTransition;\nvar NotSetTransition = Transitions.NotSetTransition;\nvar RuleTransition = Transitions.RuleTransition;\nvar RangeTransition = Transitions.RangeTransition;\nvar ActionTransition = Transitions.ActionTransition;\nvar EpsilonTransition = Transitions.EpsilonTransition;\nvar WildcardTransition = Transitions.WildcardTransition;\nvar PredicateTransition = Transitions.PredicateTransition;\nvar PrecedencePredicateTransition = Transitions.PrecedencePredicateTransition;\nvar IntervalSet = (__webpack_require__(/*! ./../IntervalSet */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/IntervalSet.js\").IntervalSet);\nvar Interval = (__webpack_require__(/*! ./../IntervalSet */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/IntervalSet.js\").Interval);\nvar ATNDeserializationOptions = (__webpack_require__(/*! ./ATNDeserializationOptions */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNDeserializationOptions.js\").ATNDeserializationOptions);\nvar LexerActions = __webpack_require__(/*! ./LexerAction */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/LexerAction.js\");\nvar LexerActionType = LexerActions.LexerActionType;\nvar LexerSkipAction = LexerActions.LexerSkipAction;\nvar LexerChannelAction = LexerActions.LexerChannelAction;\nvar LexerCustomAction = LexerActions.LexerCustomAction;\nvar LexerMoreAction = LexerActions.LexerMoreAction;\nvar LexerTypeAction = LexerActions.LexerTypeAction;\nvar LexerPushModeAction = LexerActions.LexerPushModeAction;\nvar LexerPopModeAction = LexerActions.LexerPopModeAction;\nvar LexerModeAction = LexerActions.LexerModeAction;\n// This is the earliest supported serialized UUID.\n// stick to serialized version for now, we don't need a UUID instance\nvar BASE_SERIALIZED_UUID = \"AADB8D7E-AEEF-4415-AD2B-8204D6CF042E\";\n\n//\n// This UUID indicates the serialized ATN contains two sets of\n// IntervalSets, where the second set's values are encoded as\n// 32-bit integers to support the full Unicode SMP range up to U+10FFFF.\n//\nvar ADDED_UNICODE_SMP = \"59627784-3BE5-417A-B9EB-8131A7286089\";\n\n// This list contains all of the currently supported UUIDs, ordered by when\n// the feature first appeared in this branch.\nvar SUPPORTED_UUIDS = [BASE_SERIALIZED_UUID, ADDED_UNICODE_SMP];\n\nvar SERIALIZED_VERSION = 3;\n\n// This is the current serialized UUID.\nvar SERIALIZED_UUID = ADDED_UNICODE_SMP;\n\nfunction initArray(length, value) {\n    var tmp = [];\n    tmp[length - 1] = value;\n    return tmp.map(function (i) {\n        return value;\n    });\n}\n\nfunction ATNDeserializer(options) {\n\n    if (options === undefined || options === null) {\n        options = ATNDeserializationOptions.defaultOptions;\n    }\n    this.deserializationOptions = options;\n    this.stateFactories = null;\n    this.actionFactories = null;\n\n    return this;\n}\n\n// Determines if a particular serialized representation of an ATN supports\n// a particular feature, identified by the {@link UUID} used for serializing\n// the ATN at the time the feature was first introduced.\n//\n// @param feature The {@link UUID} marking the first time the feature was\n// supported in the serialized ATN.\n// @param actualUuid The {@link UUID} of the actual serialized ATN which is\n// currently being deserialized.\n// @return {@code true} if the {@code actualUuid} value represents a\n// serialized ATN at or after the feature identified by {@code feature} was\n// introduced; otherwise, {@code false}.\n\nATNDeserializer.prototype.isFeatureSupported = function (feature, actualUuid) {\n    var idx1 = SUPPORTED_UUIDS.indexOf(feature);\n    if (idx1 < 0) {\n        return false;\n    }\n    var idx2 = SUPPORTED_UUIDS.indexOf(actualUuid);\n    return idx2 >= idx1;\n};\n\nATNDeserializer.prototype.deserialize = function (data) {\n    this.reset(data);\n    this.checkVersion();\n    this.checkUUID();\n    var atn = this.readATN();\n    this.readStates(atn);\n    this.readRules(atn);\n    this.readModes(atn);\n    var sets = [];\n    // First, deserialize sets with 16-bit arguments <= U+FFFF.\n    this.readSets(atn, sets, this.readInt.bind(this));\n    // Next, if the ATN was serialized with the Unicode SMP feature,\n    // deserialize sets with 32-bit arguments <= U+10FFFF.\n    if (this.isFeatureSupported(ADDED_UNICODE_SMP, this.uuid)) {\n        this.readSets(atn, sets, this.readInt32.bind(this));\n    }\n    this.readEdges(atn, sets);\n    this.readDecisions(atn);\n    this.readLexerActions(atn);\n    this.markPrecedenceDecisions(atn);\n    this.verifyATN(atn);\n    if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER) {\n        this.generateRuleBypassTransitions(atn);\n        // re-verify after modification\n        this.verifyATN(atn);\n    }\n    return atn;\n};\n\nATNDeserializer.prototype.reset = function (data) {\n    var adjust = function adjust(c) {\n        var v = c.charCodeAt(0);\n        return v > 1 ? v - 2 : -1;\n    };\n    var temp = data.split(\"\").map(adjust);\n    // don't adjust the first value since that's the version number\n    temp[0] = data.charCodeAt(0);\n    this.data = temp;\n    this.pos = 0;\n};\n\nATNDeserializer.prototype.checkVersion = function () {\n    var version = this.readInt();\n    if (version !== SERIALIZED_VERSION) {\n        throw \"Could not deserialize ATN with version \" + version + \" (expected \" + SERIALIZED_VERSION + \").\";\n    }\n};\n\nATNDeserializer.prototype.checkUUID = function () {\n    var uuid = this.readUUID();\n    if (SUPPORTED_UUIDS.indexOf(uuid) < 0) {\n        throw \"Could not deserialize ATN with UUID: \" + uuid + \" (expected \" + SERIALIZED_UUID + \" or a legacy UUID).\", uuid, SERIALIZED_UUID;\n    }\n    this.uuid = uuid;\n};\n\nATNDeserializer.prototype.readATN = function () {\n    var grammarType = this.readInt();\n    var maxTokenType = this.readInt();\n    return new ATN(grammarType, maxTokenType);\n};\n\nATNDeserializer.prototype.readStates = function (atn) {\n    var j, pair, stateNumber;\n    var loopBackStateNumbers = [];\n    var endStateNumbers = [];\n    var nstates = this.readInt();\n    for (var i = 0; i < nstates; i++) {\n        var stype = this.readInt();\n        // ignore bad type of states\n        if (stype === ATNState.INVALID_TYPE) {\n            atn.addState(null);\n            continue;\n        }\n        var ruleIndex = this.readInt();\n        if (ruleIndex === 0xFFFF) {\n            ruleIndex = -1;\n        }\n        var s = this.stateFactory(stype, ruleIndex);\n        if (stype === ATNState.LOOP_END) {\n            // special case\n            var loopBackStateNumber = this.readInt();\n            loopBackStateNumbers.push([s, loopBackStateNumber]);\n        } else if (s instanceof BlockStartState) {\n            var endStateNumber = this.readInt();\n            endStateNumbers.push([s, endStateNumber]);\n        }\n        atn.addState(s);\n    }\n    // delay the assignment of loop back and end states until we know all the\n    // state instances have been initialized\n    for (j = 0; j < loopBackStateNumbers.length; j++) {\n        pair = loopBackStateNumbers[j];\n        pair[0].loopBackState = atn.states[pair[1]];\n    }\n\n    for (j = 0; j < endStateNumbers.length; j++) {\n        pair = endStateNumbers[j];\n        pair[0].endState = atn.states[pair[1]];\n    }\n\n    var numNonGreedyStates = this.readInt();\n    for (j = 0; j < numNonGreedyStates; j++) {\n        stateNumber = this.readInt();\n        atn.states[stateNumber].nonGreedy = true;\n    }\n\n    var numPrecedenceStates = this.readInt();\n    for (j = 0; j < numPrecedenceStates; j++) {\n        stateNumber = this.readInt();\n        atn.states[stateNumber].isPrecedenceRule = true;\n    }\n};\n\nATNDeserializer.prototype.readRules = function (atn) {\n    var i;\n    var nrules = this.readInt();\n    if (atn.grammarType === ATNType.LEXER) {\n        atn.ruleToTokenType = initArray(nrules, 0);\n    }\n    atn.ruleToStartState = initArray(nrules, 0);\n    for (i = 0; i < nrules; i++) {\n        var s = this.readInt();\n        var startState = atn.states[s];\n        atn.ruleToStartState[i] = startState;\n        if (atn.grammarType === ATNType.LEXER) {\n            var tokenType = this.readInt();\n            if (tokenType === 0xFFFF) {\n                tokenType = Token.EOF;\n            }\n            atn.ruleToTokenType[i] = tokenType;\n        }\n    }\n    atn.ruleToStopState = initArray(nrules, 0);\n    for (i = 0; i < atn.states.length; i++) {\n        var state = atn.states[i];\n        if (!(state instanceof RuleStopState)) {\n            continue;\n        }\n        atn.ruleToStopState[state.ruleIndex] = state;\n        atn.ruleToStartState[state.ruleIndex].stopState = state;\n    }\n};\n\nATNDeserializer.prototype.readModes = function (atn) {\n    var nmodes = this.readInt();\n    for (var i = 0; i < nmodes; i++) {\n        var s = this.readInt();\n        atn.modeToStartState.push(atn.states[s]);\n    }\n};\n\nATNDeserializer.prototype.readSets = function (atn, sets, readUnicode) {\n    var m = this.readInt();\n    for (var i = 0; i < m; i++) {\n        var iset = new IntervalSet();\n        sets.push(iset);\n        var n = this.readInt();\n        var containsEof = this.readInt();\n        if (containsEof !== 0) {\n            iset.addOne(-1);\n        }\n        for (var j = 0; j < n; j++) {\n            var i1 = readUnicode();\n            var i2 = readUnicode();\n            iset.addRange(i1, i2);\n        }\n    }\n};\n\nATNDeserializer.prototype.readEdges = function (atn, sets) {\n    var i, j, state, trans, target;\n    var nedges = this.readInt();\n    for (i = 0; i < nedges; i++) {\n        var src = this.readInt();\n        var trg = this.readInt();\n        var ttype = this.readInt();\n        var arg1 = this.readInt();\n        var arg2 = this.readInt();\n        var arg3 = this.readInt();\n        trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);\n        var srcState = atn.states[src];\n        srcState.addTransition(trans);\n    }\n    // edges for rule stop states can be derived, so they aren't serialized\n    for (i = 0; i < atn.states.length; i++) {\n        state = atn.states[i];\n        for (j = 0; j < state.transitions.length; j++) {\n            var t = state.transitions[j];\n            if (!(t instanceof RuleTransition)) {\n                continue;\n            }\n            var outermostPrecedenceReturn = -1;\n            if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {\n                if (t.precedence === 0) {\n                    outermostPrecedenceReturn = t.target.ruleIndex;\n                }\n            }\n\n            trans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);\n            atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);\n        }\n    }\n\n    for (i = 0; i < atn.states.length; i++) {\n        state = atn.states[i];\n        if (state instanceof BlockStartState) {\n            // we need to know the end state to set its start state\n            if (state.endState === null) {\n                throw \"IllegalState\";\n            }\n            // block end states can only be associated to a single block start\n            // state\n            if (state.endState.startState !== null) {\n                throw \"IllegalState\";\n            }\n            state.endState.startState = state;\n        }\n        if (state instanceof PlusLoopbackState) {\n            for (j = 0; j < state.transitions.length; j++) {\n                target = state.transitions[j].target;\n                if (target instanceof PlusBlockStartState) {\n                    target.loopBackState = state;\n                }\n            }\n        } else if (state instanceof StarLoopbackState) {\n            for (j = 0; j < state.transitions.length; j++) {\n                target = state.transitions[j].target;\n                if (target instanceof StarLoopEntryState) {\n                    target.loopBackState = state;\n                }\n            }\n        }\n    }\n};\n\nATNDeserializer.prototype.readDecisions = function (atn) {\n    var ndecisions = this.readInt();\n    for (var i = 0; i < ndecisions; i++) {\n        var s = this.readInt();\n        var decState = atn.states[s];\n        atn.decisionToState.push(decState);\n        decState.decision = i;\n    }\n};\n\nATNDeserializer.prototype.readLexerActions = function (atn) {\n    if (atn.grammarType === ATNType.LEXER) {\n        var count = this.readInt();\n        atn.lexerActions = initArray(count, null);\n        for (var i = 0; i < count; i++) {\n            var actionType = this.readInt();\n            var data1 = this.readInt();\n            if (data1 === 0xFFFF) {\n                data1 = -1;\n            }\n            var data2 = this.readInt();\n            if (data2 === 0xFFFF) {\n                data2 = -1;\n            }\n            var lexerAction = this.lexerActionFactory(actionType, data1, data2);\n            atn.lexerActions[i] = lexerAction;\n        }\n    }\n};\n\nATNDeserializer.prototype.generateRuleBypassTransitions = function (atn) {\n    var i;\n    var count = atn.ruleToStartState.length;\n    for (i = 0; i < count; i++) {\n        atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;\n    }\n    for (i = 0; i < count; i++) {\n        this.generateRuleBypassTransition(atn, i);\n    }\n};\n\nATNDeserializer.prototype.generateRuleBypassTransition = function (atn, idx) {\n    var i, state;\n    var bypassStart = new BasicBlockStartState();\n    bypassStart.ruleIndex = idx;\n    atn.addState(bypassStart);\n\n    var bypassStop = new BlockEndState();\n    bypassStop.ruleIndex = idx;\n    atn.addState(bypassStop);\n\n    bypassStart.endState = bypassStop;\n    atn.defineDecisionState(bypassStart);\n\n    bypassStop.startState = bypassStart;\n\n    var excludeTransition = null;\n    var endState = null;\n\n    if (atn.ruleToStartState[idx].isPrecedenceRule) {\n        // wrap from the beginning of the rule to the StarLoopEntryState\n        endState = null;\n        for (i = 0; i < atn.states.length; i++) {\n            state = atn.states[i];\n            if (this.stateIsEndStateFor(state, idx)) {\n                endState = state;\n                excludeTransition = state.loopBackState.transitions[0];\n                break;\n            }\n        }\n        if (excludeTransition === null) {\n            throw \"Couldn't identify final state of the precedence rule prefix section.\";\n        }\n    } else {\n        endState = atn.ruleToStopState[idx];\n    }\n\n    // all non-excluded transitions that currently target end state need to\n    // target blockEnd instead\n    for (i = 0; i < atn.states.length; i++) {\n        state = atn.states[i];\n        for (var j = 0; j < state.transitions.length; j++) {\n            var transition = state.transitions[j];\n            if (transition === excludeTransition) {\n                continue;\n            }\n            if (transition.target === endState) {\n                transition.target = bypassStop;\n            }\n        }\n    }\n\n    // all transitions leaving the rule start state need to leave blockStart\n    // instead\n    var ruleToStartState = atn.ruleToStartState[idx];\n    var count = ruleToStartState.transitions.length;\n    while (count > 0) {\n        bypassStart.addTransition(ruleToStartState.transitions[count - 1]);\n        ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);\n    }\n    // link the new states\n    atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));\n    bypassStop.addTransition(new EpsilonTransition(endState));\n\n    var matchState = new BasicState();\n    atn.addState(matchState);\n    matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[idx]));\n    bypassStart.addTransition(new EpsilonTransition(matchState));\n};\n\nATNDeserializer.prototype.stateIsEndStateFor = function (state, idx) {\n    if (state.ruleIndex !== idx) {\n        return null;\n    }\n    if (!(state instanceof StarLoopEntryState)) {\n        return null;\n    }\n    var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n    if (!(maybeLoopEndState instanceof LoopEndState)) {\n        return null;\n    }\n    if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transitions[0].target instanceof RuleStopState) {\n        return state;\n    } else {\n        return null;\n    }\n};\n\n//\n// Analyze the {@link StarLoopEntryState} states in the specified ATN to set\n// the {@link StarLoopEntryState//isPrecedenceDecision} field to the\n// correct value.\n//\n// @param atn The ATN.\n//\nATNDeserializer.prototype.markPrecedenceDecisions = function (atn) {\n    for (var i = 0; i < atn.states.length; i++) {\n        var state = atn.states[i];\n        if (!(state instanceof StarLoopEntryState)) {\n            continue;\n        }\n        // We analyze the ATN to determine if this ATN decision state is the\n        // decision for the closure block that determines whether a\n        // precedence rule should continue or complete.\n        //\n        if (atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {\n            var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n            if (maybeLoopEndState instanceof LoopEndState) {\n                if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transitions[0].target instanceof RuleStopState) {\n                    state.isPrecedenceDecision = true;\n                }\n            }\n        }\n    }\n};\n\nATNDeserializer.prototype.verifyATN = function (atn) {\n    if (!this.deserializationOptions.verifyATN) {\n        return;\n    }\n    // verify assumptions\n    for (var i = 0; i < atn.states.length; i++) {\n        var state = atn.states[i];\n        if (state === null) {\n            continue;\n        }\n        this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);\n        if (state instanceof PlusBlockStartState) {\n            this.checkCondition(state.loopBackState !== null);\n        } else if (state instanceof StarLoopEntryState) {\n            this.checkCondition(state.loopBackState !== null);\n            this.checkCondition(state.transitions.length === 2);\n            if (state.transitions[0].target instanceof StarBlockStartState) {\n                this.checkCondition(state.transitions[1].target instanceof LoopEndState);\n                this.checkCondition(!state.nonGreedy);\n            } else if (state.transitions[0].target instanceof LoopEndState) {\n                this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);\n                this.checkCondition(state.nonGreedy);\n            } else {\n                throw \"IllegalState\";\n            }\n        } else if (state instanceof StarLoopbackState) {\n            this.checkCondition(state.transitions.length === 1);\n            this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);\n        } else if (state instanceof LoopEndState) {\n            this.checkCondition(state.loopBackState !== null);\n        } else if (state instanceof RuleStartState) {\n            this.checkCondition(state.stopState !== null);\n        } else if (state instanceof BlockStartState) {\n            this.checkCondition(state.endState !== null);\n        } else if (state instanceof BlockEndState) {\n            this.checkCondition(state.startState !== null);\n        } else if (state instanceof DecisionState) {\n            this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);\n        } else {\n            this.checkCondition(state.transitions.length <= 1 || state instanceof RuleStopState);\n        }\n    }\n};\n\nATNDeserializer.prototype.checkCondition = function (condition, message) {\n    if (!condition) {\n        if (message === undefined || message === null) {\n            message = \"IllegalState\";\n        }\n        throw message;\n    }\n};\n\nATNDeserializer.prototype.readInt = function () {\n    return this.data[this.pos++];\n};\n\nATNDeserializer.prototype.readInt32 = function () {\n    var low = this.readInt();\n    var high = this.readInt();\n    return low | high << 16;\n};\n\nATNDeserializer.prototype.readLong = function () {\n    var low = this.readInt32();\n    var high = this.readInt32();\n    return low & 0x00000000FFFFFFFF | high << 32;\n};\n\nfunction createByteToHex() {\n    var bth = [];\n    for (var i = 0; i < 256; i++) {\n        bth[i] = (i + 0x100).toString(16).substr(1).toUpperCase();\n    }\n    return bth;\n}\n\nvar byteToHex = createByteToHex();\n\nATNDeserializer.prototype.readUUID = function () {\n    var bb = [];\n    for (var i = 7; i >= 0; i--) {\n        var int = this.readInt();\n        /* jshint bitwise: false */\n        bb[2 * i + 1] = int & 0xFF;\n        bb[2 * i] = int >> 8 & 0xFF;\n    }\n    return byteToHex[bb[0]] + byteToHex[bb[1]] + byteToHex[bb[2]] + byteToHex[bb[3]] + '-' + byteToHex[bb[4]] + byteToHex[bb[5]] + '-' + byteToHex[bb[6]] + byteToHex[bb[7]] + '-' + byteToHex[bb[8]] + byteToHex[bb[9]] + '-' + byteToHex[bb[10]] + byteToHex[bb[11]] + byteToHex[bb[12]] + byteToHex[bb[13]] + byteToHex[bb[14]] + byteToHex[bb[15]];\n};\n\nATNDeserializer.prototype.edgeFactory = function (atn, type, src, trg, arg1, arg2, arg3, sets) {\n    var target = atn.states[trg];\n    switch (type) {\n        case Transition.EPSILON:\n            return new EpsilonTransition(target);\n        case Transition.RANGE:\n            return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);\n        case Transition.RULE:\n            return new RuleTransition(atn.states[arg1], arg2, arg3, target);\n        case Transition.PREDICATE:\n            return new PredicateTransition(target, arg1, arg2, arg3 !== 0);\n        case Transition.PRECEDENCE:\n            return new PrecedencePredicateTransition(target, arg1);\n        case Transition.ATOM:\n            return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);\n        case Transition.ACTION:\n            return new ActionTransition(target, arg1, arg2, arg3 !== 0);\n        case Transition.SET:\n            return new SetTransition(target, sets[arg1]);\n        case Transition.NOT_SET:\n            return new NotSetTransition(target, sets[arg1]);\n        case Transition.WILDCARD:\n            return new WildcardTransition(target);\n        default:\n            throw \"The specified transition type: \" + type + \" is not valid.\";\n    }\n};\n\nATNDeserializer.prototype.stateFactory = function (type, ruleIndex) {\n    if (this.stateFactories === null) {\n        var sf = [];\n        sf[ATNState.INVALID_TYPE] = null;\n        sf[ATNState.BASIC] = function () {\n            return new BasicState();\n        };\n        sf[ATNState.RULE_START] = function () {\n            return new RuleStartState();\n        };\n        sf[ATNState.BLOCK_START] = function () {\n            return new BasicBlockStartState();\n        };\n        sf[ATNState.PLUS_BLOCK_START] = function () {\n            return new PlusBlockStartState();\n        };\n        sf[ATNState.STAR_BLOCK_START] = function () {\n            return new StarBlockStartState();\n        };\n        sf[ATNState.TOKEN_START] = function () {\n            return new TokensStartState();\n        };\n        sf[ATNState.RULE_STOP] = function () {\n            return new RuleStopState();\n        };\n        sf[ATNState.BLOCK_END] = function () {\n            return new BlockEndState();\n        };\n        sf[ATNState.STAR_LOOP_BACK] = function () {\n            return new StarLoopbackState();\n        };\n        sf[ATNState.STAR_LOOP_ENTRY] = function () {\n            return new StarLoopEntryState();\n        };\n        sf[ATNState.PLUS_LOOP_BACK] = function () {\n            return new PlusLoopbackState();\n        };\n        sf[ATNState.LOOP_END] = function () {\n            return new LoopEndState();\n        };\n        this.stateFactories = sf;\n    }\n    if (type > this.stateFactories.length || this.stateFactories[type] === null) {\n        throw \"The specified state type \" + type + \" is not valid.\";\n    } else {\n        var s = this.stateFactories[type]();\n        if (s !== null) {\n            s.ruleIndex = ruleIndex;\n            return s;\n        }\n    }\n};\n\nATNDeserializer.prototype.lexerActionFactory = function (type, data1, data2) {\n    if (this.actionFactories === null) {\n        var af = [];\n        af[LexerActionType.CHANNEL] = function (data1, data2) {\n            return new LexerChannelAction(data1);\n        };\n        af[LexerActionType.CUSTOM] = function (data1, data2) {\n            return new LexerCustomAction(data1, data2);\n        };\n        af[LexerActionType.MODE] = function (data1, data2) {\n            return new LexerModeAction(data1);\n        };\n        af[LexerActionType.MORE] = function (data1, data2) {\n            return LexerMoreAction.INSTANCE;\n        };\n        af[LexerActionType.POP_MODE] = function (data1, data2) {\n            return LexerPopModeAction.INSTANCE;\n        };\n        af[LexerActionType.PUSH_MODE] = function (data1, data2) {\n            return new LexerPushModeAction(data1);\n        };\n        af[LexerActionType.SKIP] = function (data1, data2) {\n            return LexerSkipAction.INSTANCE;\n        };\n        af[LexerActionType.TYPE] = function (data1, data2) {\n            return new LexerTypeAction(data1);\n        };\n        this.actionFactories = af;\n    }\n    if (type > this.actionFactories.length || this.actionFactories[type] === null) {\n        throw \"The specified lexer action type \" + type + \" is not valid.\";\n    } else {\n        return this.actionFactories[type](data1, data2);\n    }\n};\n\nexports.ATNDeserializer = ATNDeserializer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNDeserializer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNSimulator.js":
/*!****************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNSimulator.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\nvar DFAState = (__webpack_require__(/*! ./../dfa/DFAState */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/dfa/DFAState.js\").DFAState);\nvar ATNConfigSet = (__webpack_require__(/*! ./ATNConfigSet */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNConfigSet.js\").ATNConfigSet);\nvar getCachedPredictionContext = (__webpack_require__(/*! ./../PredictionContext */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/PredictionContext.js\").getCachedPredictionContext);\n\nfunction ATNSimulator(atn, sharedContextCache) {\n\n    // The context cache maps all PredictionContext objects that are ==\n    //  to a single cached copy. This cache is shared across all contexts\n    //  in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet\n    //  to use only cached nodes/graphs in addDFAState(). We don't want to\n    //  fill this during closure() since there are lots of contexts that\n    //  pop up but are not used ever again. It also greatly slows down closure().\n    //\n    //  <p>This cache makes a huge difference in memory and a little bit in speed.\n    //  For the Java grammar on java.*, it dropped the memory requirements\n    //  at the end from 25M to 16M. We don't store any of the full context\n    //  graphs in the DFA because they are limited to local context only,\n    //  but apparently there's a lot of repetition there as well. We optimize\n    //  the config contexts before storing the config set in the DFA states\n    //  by literally rebuilding them with cached subgraphs only.</p>\n    //\n    //  <p>I tried a cache for use during closure operations, that was\n    //  whacked after each adaptivePredict(). It cost a little bit\n    //  more time I think and doesn't save on the overall footprint\n    //  so it's not worth the complexity.</p>\n    ///\n    this.atn = atn;\n    this.sharedContextCache = sharedContextCache;\n    return this;\n}\n\n// Must distinguish between missing edge and edge we know leads nowhere///\nATNSimulator.ERROR = new DFAState(0x7FFFFFFF, new ATNConfigSet());\n\nATNSimulator.prototype.getCachedContext = function (context) {\n    if (this.sharedContextCache === null) {\n        return context;\n    }\n    var visited = {};\n    return getCachedPredictionContext(context, this.sharedContextCache, visited);\n};\n\nexports.ATNSimulator = ATNSimulator;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L2F0bi9BVE5TaW11bGF0b3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGVBQWUsaUlBQXFDO0FBQ3BELG1CQUFtQixzSUFBc0M7QUFDekQsaUNBQWlDLDZKQUE0RDs7QUFFN0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CIiwic291cmNlcyI6WyIvVXNlcnMvbWFjL2Zsb3dwb3J0L25vZGVfbW9kdWxlcy9zb2xpZGl0eS1wYXJzZXItYW50bHIvZGlzdC9hbnRscjQvYXRuL0FUTlNpbXVsYXRvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vXG4vKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG4vLy9cblxudmFyIERGQVN0YXRlID0gcmVxdWlyZSgnLi8uLi9kZmEvREZBU3RhdGUnKS5ERkFTdGF0ZTtcbnZhciBBVE5Db25maWdTZXQgPSByZXF1aXJlKCcuL0FUTkNvbmZpZ1NldCcpLkFUTkNvbmZpZ1NldDtcbnZhciBnZXRDYWNoZWRQcmVkaWN0aW9uQ29udGV4dCA9IHJlcXVpcmUoJy4vLi4vUHJlZGljdGlvbkNvbnRleHQnKS5nZXRDYWNoZWRQcmVkaWN0aW9uQ29udGV4dDtcblxuZnVuY3Rpb24gQVROU2ltdWxhdG9yKGF0biwgc2hhcmVkQ29udGV4dENhY2hlKSB7XG5cbiAgICAvLyBUaGUgY29udGV4dCBjYWNoZSBtYXBzIGFsbCBQcmVkaWN0aW9uQ29udGV4dCBvYmplY3RzIHRoYXQgYXJlID09XG4gICAgLy8gIHRvIGEgc2luZ2xlIGNhY2hlZCBjb3B5LiBUaGlzIGNhY2hlIGlzIHNoYXJlZCBhY3Jvc3MgYWxsIGNvbnRleHRzXG4gICAgLy8gIGluIGFsbCBBVE5Db25maWdzIGluIGFsbCBERkEgc3RhdGVzLiAgV2UgcmVidWlsZCBlYWNoIEFUTkNvbmZpZ1NldFxuICAgIC8vICB0byB1c2Ugb25seSBjYWNoZWQgbm9kZXMvZ3JhcGhzIGluIGFkZERGQVN0YXRlKCkuIFdlIGRvbid0IHdhbnQgdG9cbiAgICAvLyAgZmlsbCB0aGlzIGR1cmluZyBjbG9zdXJlKCkgc2luY2UgdGhlcmUgYXJlIGxvdHMgb2YgY29udGV4dHMgdGhhdFxuICAgIC8vICBwb3AgdXAgYnV0IGFyZSBub3QgdXNlZCBldmVyIGFnYWluLiBJdCBhbHNvIGdyZWF0bHkgc2xvd3MgZG93biBjbG9zdXJlKCkuXG4gICAgLy9cbiAgICAvLyAgPHA+VGhpcyBjYWNoZSBtYWtlcyBhIGh1Z2UgZGlmZmVyZW5jZSBpbiBtZW1vcnkgYW5kIGEgbGl0dGxlIGJpdCBpbiBzcGVlZC5cbiAgICAvLyAgRm9yIHRoZSBKYXZhIGdyYW1tYXIgb24gamF2YS4qLCBpdCBkcm9wcGVkIHRoZSBtZW1vcnkgcmVxdWlyZW1lbnRzXG4gICAgLy8gIGF0IHRoZSBlbmQgZnJvbSAyNU0gdG8gMTZNLiBXZSBkb24ndCBzdG9yZSBhbnkgb2YgdGhlIGZ1bGwgY29udGV4dFxuICAgIC8vICBncmFwaHMgaW4gdGhlIERGQSBiZWNhdXNlIHRoZXkgYXJlIGxpbWl0ZWQgdG8gbG9jYWwgY29udGV4dCBvbmx5LFxuICAgIC8vICBidXQgYXBwYXJlbnRseSB0aGVyZSdzIGEgbG90IG9mIHJlcGV0aXRpb24gdGhlcmUgYXMgd2VsbC4gV2Ugb3B0aW1pemVcbiAgICAvLyAgdGhlIGNvbmZpZyBjb250ZXh0cyBiZWZvcmUgc3RvcmluZyB0aGUgY29uZmlnIHNldCBpbiB0aGUgREZBIHN0YXRlc1xuICAgIC8vICBieSBsaXRlcmFsbHkgcmVidWlsZGluZyB0aGVtIHdpdGggY2FjaGVkIHN1YmdyYXBocyBvbmx5LjwvcD5cbiAgICAvL1xuICAgIC8vICA8cD5JIHRyaWVkIGEgY2FjaGUgZm9yIHVzZSBkdXJpbmcgY2xvc3VyZSBvcGVyYXRpb25zLCB0aGF0IHdhc1xuICAgIC8vICB3aGFja2VkIGFmdGVyIGVhY2ggYWRhcHRpdmVQcmVkaWN0KCkuIEl0IGNvc3QgYSBsaXR0bGUgYml0XG4gICAgLy8gIG1vcmUgdGltZSBJIHRoaW5rIGFuZCBkb2Vzbid0IHNhdmUgb24gdGhlIG92ZXJhbGwgZm9vdHByaW50XG4gICAgLy8gIHNvIGl0J3Mgbm90IHdvcnRoIHRoZSBjb21wbGV4aXR5LjwvcD5cbiAgICAvLy9cbiAgICB0aGlzLmF0biA9IGF0bjtcbiAgICB0aGlzLnNoYXJlZENvbnRleHRDYWNoZSA9IHNoYXJlZENvbnRleHRDYWNoZTtcbiAgICByZXR1cm4gdGhpcztcbn1cblxuLy8gTXVzdCBkaXN0aW5ndWlzaCBiZXR3ZWVuIG1pc3NpbmcgZWRnZSBhbmQgZWRnZSB3ZSBrbm93IGxlYWRzIG5vd2hlcmUvLy9cbkFUTlNpbXVsYXRvci5FUlJPUiA9IG5ldyBERkFTdGF0ZSgweDdGRkZGRkZGLCBuZXcgQVROQ29uZmlnU2V0KCkpO1xuXG5BVE5TaW11bGF0b3IucHJvdG90eXBlLmdldENhY2hlZENvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIGlmICh0aGlzLnNoYXJlZENvbnRleHRDYWNoZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICB9XG4gICAgdmFyIHZpc2l0ZWQgPSB7fTtcbiAgICByZXR1cm4gZ2V0Q2FjaGVkUHJlZGljdGlvbkNvbnRleHQoY29udGV4dCwgdGhpcy5zaGFyZWRDb250ZXh0Q2FjaGUsIHZpc2l0ZWQpO1xufTtcblxuZXhwb3J0cy5BVE5TaW11bGF0b3IgPSBBVE5TaW11bGF0b3I7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNSimulator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNState.js":
/*!************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNState.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\n//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\n// The following images show the relation of states and\n// {@link ATNState//transitions} for various grammar constructs.\n//\n// <ul>\n//\n// <li>Solid edges marked with an &//0949; indicate a required\n// {@link EpsilonTransition}.</li>\n//\n// <li>Dashed edges indicate locations where any transition derived from\n// {@link Transition} might appear.</li>\n//\n// <li>Dashed nodes are place holders for either a sequence of linked\n// {@link BasicState} states or the inclusion of a block representing a nested\n// construct in one of the forms below.</li>\n//\n// <li>Nodes showing multiple outgoing alternatives with a {@code ...} support\n// any number of alternatives (one or more). Nodes without the {@code ...} only\n// support the exact number of alternatives shown in the diagram.</li>\n//\n// </ul>\n//\n// <h2>Basic Blocks</h2>\n//\n// <h3>Rule</h3>\n//\n// <embed src=\"images/Rule.svg\" type=\"image/svg+xml\"/>\n//\n// <h3>Block of 1 or more alternatives</h3>\n//\n// <embed src=\"images/Block.svg\" type=\"image/svg+xml\"/>\n//\n// <h2>Greedy Loops</h2>\n//\n// <h3>Greedy Closure: {@code (...)*}</h3>\n//\n// <embed src=\"images/ClosureGreedy.svg\" type=\"image/svg+xml\"/>\n//\n// <h3>Greedy Positive Closure: {@code (...)+}</h3>\n//\n// <embed src=\"images/PositiveClosureGreedy.svg\" type=\"image/svg+xml\"/>\n//\n// <h3>Greedy Optional: {@code (...)?}</h3>\n//\n// <embed src=\"images/OptionalGreedy.svg\" type=\"image/svg+xml\"/>\n//\n// <h2>Non-Greedy Loops</h2>\n//\n// <h3>Non-Greedy Closure: {@code (...)*?}</h3>\n//\n// <embed src=\"images/ClosureNonGreedy.svg\" type=\"image/svg+xml\"/>\n//\n// <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>\n//\n// <embed src=\"images/PositiveClosureNonGreedy.svg\" type=\"image/svg+xml\"/>\n//\n// <h3>Non-Greedy Optional: {@code (...)??}</h3>\n//\n// <embed src=\"images/OptionalNonGreedy.svg\" type=\"image/svg+xml\"/>\n//\n\nvar INITIAL_NUM_TRANSITIONS = 4;\n\nfunction ATNState() {\n  // Which ATN are we in?\n  this.atn = null;\n  this.stateNumber = ATNState.INVALID_STATE_NUMBER;\n  this.stateType = null;\n  this.ruleIndex = 0; // at runtime, we don't have Rule objects\n  this.epsilonOnlyTransitions = false;\n  // Track the transitions emanating from this ATN state.\n  this.transitions = [];\n  // Used to cache lookahead during parsing, not used during construction\n  this.nextTokenWithinRule = null;\n  return this;\n}\n\n// constants for serialization\nATNState.INVALID_TYPE = 0;\nATNState.BASIC = 1;\nATNState.RULE_START = 2;\nATNState.BLOCK_START = 3;\nATNState.PLUS_BLOCK_START = 4;\nATNState.STAR_BLOCK_START = 5;\nATNState.TOKEN_START = 6;\nATNState.RULE_STOP = 7;\nATNState.BLOCK_END = 8;\nATNState.STAR_LOOP_BACK = 9;\nATNState.STAR_LOOP_ENTRY = 10;\nATNState.PLUS_LOOP_BACK = 11;\nATNState.LOOP_END = 12;\n\nATNState.serializationNames = [\"INVALID\", \"BASIC\", \"RULE_START\", \"BLOCK_START\", \"PLUS_BLOCK_START\", \"STAR_BLOCK_START\", \"TOKEN_START\", \"RULE_STOP\", \"BLOCK_END\", \"STAR_LOOP_BACK\", \"STAR_LOOP_ENTRY\", \"PLUS_LOOP_BACK\", \"LOOP_END\"];\n\nATNState.INVALID_STATE_NUMBER = -1;\n\nATNState.prototype.toString = function () {\n  return this.stateNumber;\n};\n\nATNState.prototype.equals = function (other) {\n  if (other instanceof ATNState) {\n    return this.stateNumber === other.stateNumber;\n  } else {\n    return false;\n  }\n};\n\nATNState.prototype.isNonGreedyExitState = function () {\n  return false;\n};\n\nATNState.prototype.addTransition = function (trans, index) {\n  if (index === undefined) {\n    index = -1;\n  }\n  if (this.transitions.length === 0) {\n    this.epsilonOnlyTransitions = trans.isEpsilon;\n  } else if (this.epsilonOnlyTransitions !== trans.isEpsilon) {\n    this.epsilonOnlyTransitions = false;\n  }\n  if (index === -1) {\n    this.transitions.push(trans);\n  } else {\n    this.transitions.splice(index, 1, trans);\n  }\n};\n\nfunction BasicState() {\n  ATNState.call(this);\n  this.stateType = ATNState.BASIC;\n  return this;\n}\n\nBasicState.prototype = Object.create(ATNState.prototype);\nBasicState.prototype.constructor = BasicState;\n\nfunction DecisionState() {\n  ATNState.call(this);\n  this.decision = -1;\n  this.nonGreedy = false;\n  return this;\n}\n\nDecisionState.prototype = Object.create(ATNState.prototype);\nDecisionState.prototype.constructor = DecisionState;\n\n//  The start of a regular {@code (...)} block.\nfunction BlockStartState() {\n  DecisionState.call(this);\n  this.endState = null;\n  return this;\n}\n\nBlockStartState.prototype = Object.create(DecisionState.prototype);\nBlockStartState.prototype.constructor = BlockStartState;\n\nfunction BasicBlockStartState() {\n  BlockStartState.call(this);\n  this.stateType = ATNState.BLOCK_START;\n  return this;\n}\n\nBasicBlockStartState.prototype = Object.create(BlockStartState.prototype);\nBasicBlockStartState.prototype.constructor = BasicBlockStartState;\n\n// Terminal node of a simple {@code (a|b|c)} block.\nfunction BlockEndState() {\n  ATNState.call(this);\n  this.stateType = ATNState.BLOCK_END;\n  this.startState = null;\n  return this;\n}\n\nBlockEndState.prototype = Object.create(ATNState.prototype);\nBlockEndState.prototype.constructor = BlockEndState;\n\n// The last node in the ATN for a rule, unless that rule is the start symbol.\n//  In that case, there is one transition to EOF. Later, we might encode\n//  references to all calls to this rule to compute FOLLOW sets for\n//  error handling.\n//\nfunction RuleStopState() {\n  ATNState.call(this);\n  this.stateType = ATNState.RULE_STOP;\n  return this;\n}\n\nRuleStopState.prototype = Object.create(ATNState.prototype);\nRuleStopState.prototype.constructor = RuleStopState;\n\nfunction RuleStartState() {\n  ATNState.call(this);\n  this.stateType = ATNState.RULE_START;\n  this.stopState = null;\n  this.isPrecedenceRule = false;\n  return this;\n}\n\nRuleStartState.prototype = Object.create(ATNState.prototype);\nRuleStartState.prototype.constructor = RuleStartState;\n\n// Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:\n//  one to the loop back to start of the block and one to exit.\n//\nfunction PlusLoopbackState() {\n  DecisionState.call(this);\n  this.stateType = ATNState.PLUS_LOOP_BACK;\n  return this;\n}\n\nPlusLoopbackState.prototype = Object.create(DecisionState.prototype);\nPlusLoopbackState.prototype.constructor = PlusLoopbackState;\n\n// Start of {@code (A|B|...)+} loop. Technically a decision state, but\n//  we don't use for code generation; somebody might need it, so I'm defining\n//  it for completeness. In reality, the {@link PlusLoopbackState} node is the\n//  real decision-making note for {@code A+}.\n//\nfunction PlusBlockStartState() {\n  BlockStartState.call(this);\n  this.stateType = ATNState.PLUS_BLOCK_START;\n  this.loopBackState = null;\n  return this;\n}\n\nPlusBlockStartState.prototype = Object.create(BlockStartState.prototype);\nPlusBlockStartState.prototype.constructor = PlusBlockStartState;\n\n// The block that begins a closure loop.\nfunction StarBlockStartState() {\n  BlockStartState.call(this);\n  this.stateType = ATNState.STAR_BLOCK_START;\n  return this;\n}\n\nStarBlockStartState.prototype = Object.create(BlockStartState.prototype);\nStarBlockStartState.prototype.constructor = StarBlockStartState;\n\nfunction StarLoopbackState() {\n  ATNState.call(this);\n  this.stateType = ATNState.STAR_LOOP_BACK;\n  return this;\n}\n\nStarLoopbackState.prototype = Object.create(ATNState.prototype);\nStarLoopbackState.prototype.constructor = StarLoopbackState;\n\nfunction StarLoopEntryState() {\n  DecisionState.call(this);\n  this.stateType = ATNState.STAR_LOOP_ENTRY;\n  this.loopBackState = null;\n  // Indicates whether this state can benefit from a precedence DFA during SLL decision making.\n  this.isPrecedenceDecision = null;\n  return this;\n}\n\nStarLoopEntryState.prototype = Object.create(DecisionState.prototype);\nStarLoopEntryState.prototype.constructor = StarLoopEntryState;\n\n// Mark the end of a * or + loop.\nfunction LoopEndState() {\n  ATNState.call(this);\n  this.stateType = ATNState.LOOP_END;\n  this.loopBackState = null;\n  return this;\n}\n\nLoopEndState.prototype = Object.create(ATNState.prototype);\nLoopEndState.prototype.constructor = LoopEndState;\n\n// The Tokens rule start state linking to each lexer rule start state */\nfunction TokensStartState() {\n  DecisionState.call(this);\n  this.stateType = ATNState.TOKEN_START;\n  return this;\n}\n\nTokensStartState.prototype = Object.create(DecisionState.prototype);\nTokensStartState.prototype.constructor = TokensStartState;\n\nexports.ATNState = ATNState;\nexports.BasicState = BasicState;\nexports.DecisionState = DecisionState;\nexports.BlockStartState = BlockStartState;\nexports.BlockEndState = BlockEndState;\nexports.LoopEndState = LoopEndState;\nexports.RuleStartState = RuleStartState;\nexports.RuleStopState = RuleStopState;\nexports.TokensStartState = TokensStartState;\nexports.PlusLoopbackState = PlusLoopbackState;\nexports.StarLoopbackState = StarLoopbackState;\nexports.StarLoopEntryState = StarLoopEntryState;\nexports.PlusBlockStartState = PlusBlockStartState;\nexports.StarBlockStartState = StarBlockStartState;\nexports.BasicBlockStartState = BasicBlockStartState;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNState.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNType.js":
/*!***********************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNType.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\n// Represents the type of recognizer an ATN applies to.\n\nfunction ATNType() {}\n\nATNType.LEXER = 0;\nATNType.PARSER = 1;\n\nexports.ATNType = ATNType;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L2F0bi9BVE5UeXBlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQSxlQUFlIiwic291cmNlcyI6WyIvVXNlcnMvbWFjL2Zsb3dwb3J0L25vZGVfbW9kdWxlcy9zb2xpZGl0eS1wYXJzZXItYW50bHIvZGlzdC9hbnRscjQvYXRuL0FUTlR5cGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cbi8vL1xuXG4vLyBSZXByZXNlbnRzIHRoZSB0eXBlIG9mIHJlY29nbml6ZXIgYW4gQVROIGFwcGxpZXMgdG8uXG5cbmZ1bmN0aW9uIEFUTlR5cGUoKSB7fVxuXG5BVE5UeXBlLkxFWEVSID0gMDtcbkFUTlR5cGUuUEFSU0VSID0gMTtcblxuZXhwb3J0cy5BVE5UeXBlID0gQVROVHlwZTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNType.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/LexerATNSimulator.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/atn/LexerATNSimulator.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\n// When we hit an accept state in either the DFA or the ATN, we\n//  have to notify the character stream to start buffering characters\n//  via {@link IntStream//mark} and record the current state. The current sim state\n//  includes the current index into the input, the current line,\n//  and current character position in that line. Note that the Lexer is\n//  tracking the starting line and characterization of the token. These\n//  variables track the \"state\" of the simulator when it hits an accept state.\n//\n//  <p>We track these variables separately for the DFA and ATN simulation\n//  because the DFA simulation often has to fail over to the ATN\n//  simulation. If the ATN simulation fails, we need the DFA to fall\n//  back to its previously accepted state, if any. If the ATN succeeds,\n//  then the ATN does the accept and the DFA simulator that invoked it\n//  can simply return the predicted token type.</p>\n///\n\nvar Token = (__webpack_require__(/*! ./../Token */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Token.js\").Token);\nvar Lexer = (__webpack_require__(/*! ./../Lexer */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Lexer.js\").Lexer);\nvar ATN = (__webpack_require__(/*! ./ATN */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATN.js\").ATN);\nvar ATNSimulator = (__webpack_require__(/*! ./ATNSimulator */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNSimulator.js\").ATNSimulator);\nvar DFAState = (__webpack_require__(/*! ./../dfa/DFAState */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/dfa/DFAState.js\").DFAState);\nvar ATNConfigSet = (__webpack_require__(/*! ./ATNConfigSet */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNConfigSet.js\").ATNConfigSet);\nvar OrderedATNConfigSet = (__webpack_require__(/*! ./ATNConfigSet */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNConfigSet.js\").OrderedATNConfigSet);\nvar PredictionContext = (__webpack_require__(/*! ./../PredictionContext */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/PredictionContext.js\").PredictionContext);\nvar SingletonPredictionContext = (__webpack_require__(/*! ./../PredictionContext */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/PredictionContext.js\").SingletonPredictionContext);\nvar RuleStopState = (__webpack_require__(/*! ./ATNState */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNState.js\").RuleStopState);\nvar LexerATNConfig = (__webpack_require__(/*! ./ATNConfig */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNConfig.js\").LexerATNConfig);\nvar Transition = (__webpack_require__(/*! ./Transition */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/Transition.js\").Transition);\nvar LexerActionExecutor = (__webpack_require__(/*! ./LexerActionExecutor */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/LexerActionExecutor.js\").LexerActionExecutor);\nvar LexerNoViableAltException = (__webpack_require__(/*! ./../error/Errors */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/Errors.js\").LexerNoViableAltException);\n\nfunction resetSimState(sim) {\n\tsim.index = -1;\n\tsim.line = 0;\n\tsim.column = -1;\n\tsim.dfaState = null;\n}\n\nfunction SimState() {\n\tresetSimState(this);\n\treturn this;\n}\n\nSimState.prototype.reset = function () {\n\tresetSimState(this);\n};\n\nfunction LexerATNSimulator(recog, atn, decisionToDFA, sharedContextCache) {\n\tATNSimulator.call(this, atn, sharedContextCache);\n\tthis.decisionToDFA = decisionToDFA;\n\tthis.recog = recog;\n\t// The current token's starting index into the character stream.\n\t// Shared across DFA to ATN simulation in case the ATN fails and the\n\t// DFA did not have a previous accept state. In this case, we use the\n\t// ATN-generated exception object.\n\tthis.startIndex = -1;\n\t// line number 1..n within the input///\n\tthis.line = 1;\n\t// The index of the character relative to the beginning of the line\n\t// 0..n-1///\n\tthis.column = 0;\n\tthis.mode = Lexer.DEFAULT_MODE;\n\t// Used during DFA/ATN exec to record the most recent accept configuration\n\t// info\n\tthis.prevAccept = new SimState();\n\t// done\n\treturn this;\n}\n\nLexerATNSimulator.prototype = Object.create(ATNSimulator.prototype);\nLexerATNSimulator.prototype.constructor = LexerATNSimulator;\n\nLexerATNSimulator.debug = false;\nLexerATNSimulator.dfa_debug = false;\n\nLexerATNSimulator.MIN_DFA_EDGE = 0;\nLexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN\n\nLexerATNSimulator.match_calls = 0;\n\nLexerATNSimulator.prototype.copyState = function (simulator) {\n\tthis.column = simulator.column;\n\tthis.line = simulator.line;\n\tthis.mode = simulator.mode;\n\tthis.startIndex = simulator.startIndex;\n};\n\nLexerATNSimulator.prototype.match = function (input, mode) {\n\tthis.match_calls += 1;\n\tthis.mode = mode;\n\tvar mark = input.mark();\n\ttry {\n\t\tthis.startIndex = input.index;\n\t\tthis.prevAccept.reset();\n\t\tvar dfa = this.decisionToDFA[mode];\n\t\tif (dfa.s0 === null) {\n\t\t\treturn this.matchATN(input);\n\t\t} else {\n\t\t\treturn this.execATN(input, dfa.s0);\n\t\t}\n\t} finally {\n\t\tinput.release(mark);\n\t}\n};\n\nLexerATNSimulator.prototype.reset = function () {\n\tthis.prevAccept.reset();\n\tthis.startIndex = -1;\n\tthis.line = 1;\n\tthis.column = 0;\n\tthis.mode = Lexer.DEFAULT_MODE;\n};\n\nLexerATNSimulator.prototype.matchATN = function (input) {\n\tvar startState = this.atn.modeToStartState[this.mode];\n\n\tif (LexerATNSimulator.debug) {\n\t\tconsole.log(\"matchATN mode \" + this.mode + \" start: \" + startState);\n\t}\n\tvar old_mode = this.mode;\n\tvar s0_closure = this.computeStartState(input, startState);\n\tvar suppressEdge = s0_closure.hasSemanticContext;\n\ts0_closure.hasSemanticContext = false;\n\n\tvar next = this.addDFAState(s0_closure);\n\tif (!suppressEdge) {\n\t\tthis.decisionToDFA[this.mode].s0 = next;\n\t}\n\n\tvar predict = this.execATN(input, next);\n\n\tif (LexerATNSimulator.debug) {\n\t\tconsole.log(\"DFA after matchATN: \" + this.decisionToDFA[old_mode].toLexerString());\n\t}\n\treturn predict;\n};\n\nLexerATNSimulator.prototype.execATN = function (input, ds0) {\n\tif (LexerATNSimulator.debug) {\n\t\tconsole.log(\"start state closure=\" + ds0.configs);\n\t}\n\tif (ds0.isAcceptState) {\n\t\t// allow zero-length tokens\n\t\tthis.captureSimState(this.prevAccept, input, ds0);\n\t}\n\tvar t = input.LA(1);\n\tvar s = ds0; // s is current/from DFA state\n\n\twhile (true) {\n\t\t// while more work\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"execATN loop starting closure: \" + s.configs);\n\t\t}\n\n\t\t// As we move src->trg, src->trg, we keep track of the previous trg to\n\t\t// avoid looking up the DFA state again, which is expensive.\n\t\t// If the previous target was already part of the DFA, we might\n\t\t// be able to avoid doing a reach operation upon t. If s!=null,\n\t\t// it means that semantic predicates didn't prevent us from\n\t\t// creating a DFA state. Once we know s!=null, we check to see if\n\t\t// the DFA state has an edge already for t. If so, we can just reuse\n\t\t// it's configuration set; there's no point in re-computing it.\n\t\t// This is kind of like doing DFA simulation within the ATN\n\t\t// simulation because DFA simulation is really just a way to avoid\n\t\t// computing reach/closure sets. Technically, once we know that\n\t\t// we have a previously added DFA state, we could jump over to\n\t\t// the DFA simulator. But, that would mean popping back and forth\n\t\t// a lot and making things more complicated algorithmically.\n\t\t// This optimization makes a lot of sense for loops within DFA.\n\t\t// A character will take us back to an existing DFA state\n\t\t// that already has lots of edges out of it. e.g., .* in comments.\n\t\t// print(\"Target for:\" + str(s) + \" and:\" + str(t))\n\t\tvar target = this.getExistingTargetState(s, t);\n\t\t// print(\"Existing:\" + str(target))\n\t\tif (target === null) {\n\t\t\ttarget = this.computeTargetState(input, s, t);\n\t\t\t// print(\"Computed:\" + str(target))\n\t\t}\n\t\tif (target === ATNSimulator.ERROR) {\n\t\t\tbreak;\n\t\t}\n\t\t// If this is a consumable input element, make sure to consume before\n\t\t// capturing the accept state so the input index, line, and char\n\t\t// position accurately reflect the state of the interpreter at the\n\t\t// end of the token.\n\t\tif (t !== Token.EOF) {\n\t\t\tthis.consume(input);\n\t\t}\n\t\tif (target.isAcceptState) {\n\t\t\tthis.captureSimState(this.prevAccept, input, target);\n\t\t\tif (t === Token.EOF) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tt = input.LA(1);\n\t\ts = target; // flip; current DFA target becomes new src/from state\n\t}\n\treturn this.failOrAccept(this.prevAccept, input, s.configs, t);\n};\n\n// Get an existing target state for an edge in the DFA. If the target state\n// for the edge has not yet been computed or is otherwise not available,\n// this method returns {@code null}.\n//\n// @param s The current DFA state\n// @param t The next input symbol\n// @return The existing target DFA state for the given input symbol\n// {@code t}, or {@code null} if the target state for this edge is not\n// already cached\nLexerATNSimulator.prototype.getExistingTargetState = function (s, t) {\n\tif (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {\n\t\treturn null;\n\t}\n\n\tvar target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];\n\tif (target === undefined) {\n\t\ttarget = null;\n\t}\n\tif (LexerATNSimulator.debug && target !== null) {\n\t\tconsole.log(\"reuse state \" + s.stateNumber + \" edge to \" + target.stateNumber);\n\t}\n\treturn target;\n};\n\n// Compute a target state for an edge in the DFA, and attempt to add the\n// computed state and corresponding edge to the DFA.\n//\n// @param input The input stream\n// @param s The current DFA state\n// @param t The next input symbol\n//\n// @return The computed target DFA state for the given input symbol\n// {@code t}. If {@code t} does not lead to a valid DFA state, this method\n// returns {@link //ERROR}.\nLexerATNSimulator.prototype.computeTargetState = function (input, s, t) {\n\tvar reach = new OrderedATNConfigSet();\n\t// if we don't find an existing DFA state\n\t// Fill reach starting from closure, following t transitions\n\tthis.getReachableConfigSet(input, s.configs, reach, t);\n\n\tif (reach.items.length === 0) {\n\t\t// we got nowhere on t from s\n\t\tif (!reach.hasSemanticContext) {\n\t\t\t// we got nowhere on t, don't throw out this knowledge; it'd\n\t\t\t// cause a failover from DFA later.\n\t\t\tthis.addDFAEdge(s, t, ATNSimulator.ERROR);\n\t\t}\n\t\t// stop when we can't match any more char\n\t\treturn ATNSimulator.ERROR;\n\t}\n\t// Add an edge from s to target DFA found/created for reach\n\treturn this.addDFAEdge(s, t, null, reach);\n};\n\nLexerATNSimulator.prototype.failOrAccept = function (prevAccept, input, reach, t) {\n\tif (this.prevAccept.dfaState !== null) {\n\t\tvar lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;\n\t\tthis.accept(input, lexerActionExecutor, this.startIndex, prevAccept.index, prevAccept.line, prevAccept.column);\n\t\treturn prevAccept.dfaState.prediction;\n\t} else {\n\t\t// if no accept and EOF is first char, return EOF\n\t\tif (t === Token.EOF && input.index === this.startIndex) {\n\t\t\treturn Token.EOF;\n\t\t}\n\t\tthrow new LexerNoViableAltException(this.recog, input, this.startIndex, reach);\n\t}\n};\n\n// Given a starting configuration set, figure out all ATN configurations\n// we can reach upon input {@code t}. Parameter {@code reach} is a return\n// parameter.\nLexerATNSimulator.prototype.getReachableConfigSet = function (input, closure, reach, t) {\n\t// this is used to skip processing for configs which have a lower priority\n\t// than a config that already reached an accept state for the same rule\n\tvar skipAlt = ATN.INVALID_ALT_NUMBER;\n\tfor (var i = 0; i < closure.items.length; i++) {\n\t\tvar cfg = closure.items[i];\n\t\tvar currentAltReachedAcceptState = cfg.alt === skipAlt;\n\t\tif (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"testing %s at %s\\n\", this.getTokenName(t), cfg.toString(this.recog, true));\n\t\t}\n\t\tfor (var j = 0; j < cfg.state.transitions.length; j++) {\n\t\t\tvar trans = cfg.state.transitions[j]; // for each transition\n\t\t\tvar target = this.getReachableTarget(trans, t);\n\t\t\tif (target !== null) {\n\t\t\t\tvar lexerActionExecutor = cfg.lexerActionExecutor;\n\t\t\t\tif (lexerActionExecutor !== null) {\n\t\t\t\t\tlexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);\n\t\t\t\t}\n\t\t\t\tvar treatEofAsEpsilon = t === Token.EOF;\n\t\t\t\tvar config = new LexerATNConfig({ state: target, lexerActionExecutor: lexerActionExecutor }, cfg);\n\t\t\t\tif (this.closure(input, config, reach, currentAltReachedAcceptState, true, treatEofAsEpsilon)) {\n\t\t\t\t\t// any remaining configs for this alt have a lower priority\n\t\t\t\t\t// than the one that just reached an accept state.\n\t\t\t\t\tskipAlt = cfg.alt;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\nLexerATNSimulator.prototype.accept = function (input, lexerActionExecutor, startIndex, index, line, charPos) {\n\tif (LexerATNSimulator.debug) {\n\t\tconsole.log(\"ACTION %s\\n\", lexerActionExecutor);\n\t}\n\t// seek to after last char in token\n\tinput.seek(index);\n\tthis.line = line;\n\tthis.column = charPos;\n\tif (lexerActionExecutor !== null && this.recog !== null) {\n\t\tlexerActionExecutor.execute(this.recog, input, startIndex);\n\t}\n};\n\nLexerATNSimulator.prototype.getReachableTarget = function (trans, t) {\n\tif (trans.matches(t, 0, Lexer.MAX_CHAR_VALUE)) {\n\t\treturn trans.target;\n\t} else {\n\t\treturn null;\n\t}\n};\n\nLexerATNSimulator.prototype.computeStartState = function (input, p) {\n\tvar initialContext = PredictionContext.EMPTY;\n\tvar configs = new OrderedATNConfigSet();\n\tfor (var i = 0; i < p.transitions.length; i++) {\n\t\tvar target = p.transitions[i].target;\n\t\tvar cfg = new LexerATNConfig({ state: target, alt: i + 1, context: initialContext }, null);\n\t\tthis.closure(input, cfg, configs, false, false, false);\n\t}\n\treturn configs;\n};\n\n// Since the alternatives within any lexer decision are ordered by\n// preference, this method stops pursuing the closure as soon as an accept\n// state is reached. After the first accept state is reached by depth-first\n// search from {@code config}, all other (potentially reachable) states for\n// this rule would have a lower priority.\n//\n// @return {@code true} if an accept state is reached, otherwise\n// {@code false}.\nLexerATNSimulator.prototype.closure = function (input, config, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {\n\tvar cfg = null;\n\tif (LexerATNSimulator.debug) {\n\t\tconsole.log(\"closure(\" + config.toString(this.recog, true) + \")\");\n\t}\n\tif (config.state instanceof RuleStopState) {\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tif (this.recog !== null) {\n\t\t\t\tconsole.log(\"closure at %s rule stop %s\\n\", this.recog.ruleNames[config.state.ruleIndex], config);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"closure at rule stop %s\\n\", config);\n\t\t\t}\n\t\t}\n\t\tif (config.context === null || config.context.hasEmptyPath()) {\n\t\t\tif (config.context === null || config.context.isEmpty()) {\n\t\t\t\tconfigs.add(config);\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tconfigs.add(new LexerATNConfig({ state: config.state, context: PredictionContext.EMPTY }, config));\n\t\t\t\tcurrentAltReachedAcceptState = true;\n\t\t\t}\n\t\t}\n\t\tif (config.context !== null && !config.context.isEmpty()) {\n\t\t\tfor (var i = 0; i < config.context.length; i++) {\n\t\t\t\tif (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {\n\t\t\t\t\tvar newContext = config.context.getParent(i); // \"pop\" return state\n\t\t\t\t\tvar returnState = this.atn.states[config.context.getReturnState(i)];\n\t\t\t\t\tcfg = new LexerATNConfig({ state: returnState, context: newContext }, config);\n\t\t\t\t\tcurrentAltReachedAcceptState = this.closure(input, cfg, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn currentAltReachedAcceptState;\n\t}\n\t// optimization\n\tif (!config.state.epsilonOnlyTransitions) {\n\t\tif (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {\n\t\t\tconfigs.add(config);\n\t\t}\n\t}\n\tfor (var j = 0; j < config.state.transitions.length; j++) {\n\t\tvar trans = config.state.transitions[j];\n\t\tcfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);\n\t\tif (cfg !== null) {\n\t\t\tcurrentAltReachedAcceptState = this.closure(input, cfg, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);\n\t\t}\n\t}\n\treturn currentAltReachedAcceptState;\n};\n\n// side-effect: can alter configs.hasSemanticContext\nLexerATNSimulator.prototype.getEpsilonTarget = function (input, config, trans, configs, speculative, treatEofAsEpsilon) {\n\tvar cfg = null;\n\tif (trans.serializationType === Transition.RULE) {\n\t\tvar newContext = SingletonPredictionContext.create(config.context, trans.followState.stateNumber);\n\t\tcfg = new LexerATNConfig({ state: trans.target, context: newContext }, config);\n\t} else if (trans.serializationType === Transition.PRECEDENCE) {\n\t\tthrow \"Precedence predicates are not supported in lexers.\";\n\t} else if (trans.serializationType === Transition.PREDICATE) {\n\t\t// Track traversing semantic predicates. If we traverse,\n\t\t// we cannot add a DFA state for this \"reach\" computation\n\t\t// because the DFA would not test the predicate again in the\n\t\t// future. Rather than creating collections of semantic predicates\n\t\t// like v3 and testing them on prediction, v4 will test them on the\n\t\t// fly all the time using the ATN not the DFA. This is slower but\n\t\t// semantically it's not used that often. One of the key elements to\n\t\t// this predicate mechanism is not adding DFA states that see\n\t\t// predicates immediately afterwards in the ATN. For example,\n\n\t\t// a : ID {p1}? | ID {p2}? ;\n\n\t\t// should create the start state for rule 'a' (to save start state\n\t\t// competition), but should not create target of ID state. The\n\t\t// collection of ATN states the following ID references includes\n\t\t// states reached by traversing predicates. Since this is when we\n\t\t// test them, we cannot cash the DFA state target of ID.\n\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"EVAL rule \" + trans.ruleIndex + \":\" + trans.predIndex);\n\t\t}\n\t\tconfigs.hasSemanticContext = true;\n\t\tif (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {\n\t\t\tcfg = new LexerATNConfig({ state: trans.target }, config);\n\t\t}\n\t} else if (trans.serializationType === Transition.ACTION) {\n\t\tif (config.context === null || config.context.hasEmptyPath()) {\n\t\t\t// execute actions anywhere in the start rule for a token.\n\t\t\t//\n\t\t\t// TODO: if the entry rule is invoked recursively, some\n\t\t\t// actions may be executed during the recursive call. The\n\t\t\t// problem can appear when hasEmptyPath() is true but\n\t\t\t// isEmpty() is false. In this case, the config needs to be\n\t\t\t// split into two contexts - one with just the empty path\n\t\t\t// and another with everything but the empty path.\n\t\t\t// Unfortunately, the current algorithm does not allow\n\t\t\t// getEpsilonTarget to return two configurations, so\n\t\t\t// additional modifications are needed before we can support\n\t\t\t// the split operation.\n\t\t\tvar lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor, this.atn.lexerActions[trans.actionIndex]);\n\t\t\tcfg = new LexerATNConfig({ state: trans.target, lexerActionExecutor: lexerActionExecutor }, config);\n\t\t} else {\n\t\t\t// ignore actions in referenced rules\n\t\t\tcfg = new LexerATNConfig({ state: trans.target }, config);\n\t\t}\n\t} else if (trans.serializationType === Transition.EPSILON) {\n\t\tcfg = new LexerATNConfig({ state: trans.target }, config);\n\t} else if (trans.serializationType === Transition.ATOM || trans.serializationType === Transition.RANGE || trans.serializationType === Transition.SET) {\n\t\tif (treatEofAsEpsilon) {\n\t\t\tif (trans.matches(Token.EOF, 0, Lexer.MAX_CHAR_VALUE)) {\n\t\t\t\tcfg = new LexerATNConfig({ state: trans.target }, config);\n\t\t\t}\n\t\t}\n\t}\n\treturn cfg;\n};\n\n// Evaluate a predicate specified in the lexer.\n//\n// <p>If {@code speculative} is {@code true}, this method was called before\n// {@link //consume} for the matched character. This method should call\n// {@link //consume} before evaluating the predicate to ensure position\n// sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},\n// and {@link Lexer//getcolumn}, properly reflect the current\n// lexer state. This method should restore {@code input} and the simulator\n// to the original state before returning (i.e. undo the actions made by the\n// call to {@link //consume}.</p>\n//\n// @param input The input stream.\n// @param ruleIndex The rule containing the predicate.\n// @param predIndex The index of the predicate within the rule.\n// @param speculative {@code true} if the current index in {@code input} is\n// one character before the predicate's location.\n//\n// @return {@code true} if the specified predicate evaluates to\n// {@code true}.\n// /\nLexerATNSimulator.prototype.evaluatePredicate = function (input, ruleIndex, predIndex, speculative) {\n\t// assume true if no recognizer was provided\n\tif (this.recog === null) {\n\t\treturn true;\n\t}\n\tif (!speculative) {\n\t\treturn this.recog.sempred(null, ruleIndex, predIndex);\n\t}\n\tvar savedcolumn = this.column;\n\tvar savedLine = this.line;\n\tvar index = input.index;\n\tvar marker = input.mark();\n\ttry {\n\t\tthis.consume(input);\n\t\treturn this.recog.sempred(null, ruleIndex, predIndex);\n\t} finally {\n\t\tthis.column = savedcolumn;\n\t\tthis.line = savedLine;\n\t\tinput.seek(index);\n\t\tinput.release(marker);\n\t}\n};\n\nLexerATNSimulator.prototype.captureSimState = function (settings, input, dfaState) {\n\tsettings.index = input.index;\n\tsettings.line = this.line;\n\tsettings.column = this.column;\n\tsettings.dfaState = dfaState;\n};\n\nLexerATNSimulator.prototype.addDFAEdge = function (from_, tk, to, cfgs) {\n\tif (to === undefined) {\n\t\tto = null;\n\t}\n\tif (cfgs === undefined) {\n\t\tcfgs = null;\n\t}\n\tif (to === null && cfgs !== null) {\n\t\t// leading to this call, ATNConfigSet.hasSemanticContext is used as a\n\t\t// marker indicating dynamic predicate evaluation makes this edge\n\t\t// dependent on the specific input sequence, so the static edge in the\n\t\t// DFA should be omitted. The target DFAState is still created since\n\t\t// execATN has the ability to resynchronize with the DFA state cache\n\t\t// following the predicate evaluation step.\n\t\t//\n\t\t// TJP notes: next time through the DFA, we see a pred again and eval.\n\t\t// If that gets us to a previously created (but dangling) DFA\n\t\t// state, we can continue in pure DFA mode from there.\n\t\t// /\n\t\tvar suppressEdge = cfgs.hasSemanticContext;\n\t\tcfgs.hasSemanticContext = false;\n\n\t\tto = this.addDFAState(cfgs);\n\n\t\tif (suppressEdge) {\n\t\t\treturn to;\n\t\t}\n\t}\n\t// add the edge\n\tif (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {\n\t\t// Only track edges within the DFA bounds\n\t\treturn to;\n\t}\n\tif (LexerATNSimulator.debug) {\n\t\tconsole.log(\"EDGE \" + from_ + \" -> \" + to + \" upon \" + tk);\n\t}\n\tif (from_.edges === null) {\n\t\t// make room for tokens 1..n and -1 masquerading as index 0\n\t\tfrom_.edges = [];\n\t}\n\tfrom_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect\n\n\treturn to;\n};\n\n// Add a new DFA state if there isn't one with this set of\n// configurations already. This method also detects the first\n// configuration containing an ATN rule stop state. Later, when\n// traversing the DFA, we will know which rule to accept.\nLexerATNSimulator.prototype.addDFAState = function (configs) {\n\tvar proposed = new DFAState(null, configs);\n\tvar firstConfigWithRuleStopState = null;\n\tfor (var i = 0; i < configs.items.length; i++) {\n\t\tvar cfg = configs.items[i];\n\t\tif (cfg.state instanceof RuleStopState) {\n\t\t\tfirstConfigWithRuleStopState = cfg;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (firstConfigWithRuleStopState !== null) {\n\t\tproposed.isAcceptState = true;\n\t\tproposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;\n\t\tproposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];\n\t}\n\tvar dfa = this.decisionToDFA[this.mode];\n\tvar existing = dfa.states.get(proposed);\n\tif (existing !== null) {\n\t\treturn existing;\n\t}\n\tvar newState = proposed;\n\tnewState.stateNumber = dfa.states.length;\n\tconfigs.setReadonly(true);\n\tnewState.configs = configs;\n\tdfa.states.add(newState);\n\treturn newState;\n};\n\nLexerATNSimulator.prototype.getDFA = function (mode) {\n\treturn this.decisionToDFA[mode];\n};\n\n// Get the text matched so far for the current token.\nLexerATNSimulator.prototype.getText = function (input) {\n\t// index is first lookahead char, don't include.\n\treturn input.getText(this.startIndex, input.index - 1);\n};\n\nLexerATNSimulator.prototype.consume = function (input) {\n\tvar curChar = input.LA(1);\n\tif (curChar === \"\\n\".charCodeAt(0)) {\n\t\tthis.line += 1;\n\t\tthis.column = 0;\n\t} else {\n\t\tthis.column += 1;\n\t}\n\tinput.consume();\n};\n\nLexerATNSimulator.prototype.getTokenName = function (tt) {\n\tif (tt === -1) {\n\t\treturn \"EOF\";\n\t} else {\n\t\treturn \"'\" + String.fromCharCode(tt) + \"'\";\n\t}\n};\n\nexports.LexerATNSimulator = LexerATNSimulator;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/LexerATNSimulator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/LexerAction.js":
/*!***************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/atn/LexerAction.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\n//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\nfunction LexerActionType() {}\n\nLexerActionType.CHANNEL = 0; //The type of a {@link LexerChannelAction} action.\nLexerActionType.CUSTOM = 1; //The type of a {@link LexerCustomAction} action.\nLexerActionType.MODE = 2; //The type of a {@link LexerModeAction} action.\nLexerActionType.MORE = 3; //The type of a {@link LexerMoreAction} action.\nLexerActionType.POP_MODE = 4; //The type of a {@link LexerPopModeAction} action.\nLexerActionType.PUSH_MODE = 5; //The type of a {@link LexerPushModeAction} action.\nLexerActionType.SKIP = 6; //The type of a {@link LexerSkipAction} action.\nLexerActionType.TYPE = 7; //The type of a {@link LexerTypeAction} action.\n\nfunction LexerAction(action) {\n    this.actionType = action;\n    this.isPositionDependent = false;\n    return this;\n}\n\nLexerAction.prototype.hashCode = function () {\n    var hash = new Hash();\n    this.updateHashCode(hash);\n    return hash.finish();\n};\n\nLexerAction.prototype.updateHashCode = function (hash) {\n    hash.update(this.actionType);\n};\n\nLexerAction.prototype.equals = function (other) {\n    return this === other;\n};\n\n//\n// Implements the {@code skip} lexer action by calling {@link Lexer//skip}.\n//\n// <p>The {@code skip} command does not have any parameters, so this action is\n// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\nfunction LexerSkipAction() {\n    LexerAction.call(this, LexerActionType.SKIP);\n    return this;\n}\n\nLexerSkipAction.prototype = Object.create(LexerAction.prototype);\nLexerSkipAction.prototype.constructor = LexerSkipAction;\n\n// Provides a singleton instance of this parameterless lexer action.\nLexerSkipAction.INSTANCE = new LexerSkipAction();\n\nLexerSkipAction.prototype.execute = function (lexer) {\n    lexer.skip();\n};\n\nLexerSkipAction.prototype.toString = function () {\n    return \"skip\";\n};\n\n//  Implements the {@code type} lexer action by calling {@link Lexer//setType}\n// with the assigned type.\nfunction LexerTypeAction(type) {\n    LexerAction.call(this, LexerActionType.TYPE);\n    this.type = type;\n    return this;\n}\n\nLexerTypeAction.prototype = Object.create(LexerAction.prototype);\nLexerTypeAction.prototype.constructor = LexerTypeAction;\n\nLexerTypeAction.prototype.execute = function (lexer) {\n    lexer.type = this.type;\n};\n\nLexerTypeAction.prototype.updateHashCode = function (hash) {\n    hash.update(this.actionType, this.type);\n};\n\nLexerTypeAction.prototype.equals = function (other) {\n    if (this === other) {\n        return true;\n    } else if (!(other instanceof LexerTypeAction)) {\n        return false;\n    } else {\n        return this.type === other.type;\n    }\n};\n\nLexerTypeAction.prototype.toString = function () {\n    return \"type(\" + this.type + \")\";\n};\n\n// Implements the {@code pushMode} lexer action by calling\n// {@link Lexer//pushMode} with the assigned mode.\nfunction LexerPushModeAction(mode) {\n    LexerAction.call(this, LexerActionType.PUSH_MODE);\n    this.mode = mode;\n    return this;\n}\n\nLexerPushModeAction.prototype = Object.create(LexerAction.prototype);\nLexerPushModeAction.prototype.constructor = LexerPushModeAction;\n\n// <p>This action is implemented by calling {@link Lexer//pushMode} with the\n// value provided by {@link //getMode}.</p>\nLexerPushModeAction.prototype.execute = function (lexer) {\n    lexer.pushMode(this.mode);\n};\n\nLexerPushModeAction.prototype.updateHashCode = function (hash) {\n    hash.update(this.actionType, this.mode);\n};\n\nLexerPushModeAction.prototype.equals = function (other) {\n    if (this === other) {\n        return true;\n    } else if (!(other instanceof LexerPushModeAction)) {\n        return false;\n    } else {\n        return this.mode === other.mode;\n    }\n};\n\nLexerPushModeAction.prototype.toString = function () {\n    return \"pushMode(\" + this.mode + \")\";\n};\n\n// Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.\n//\n// <p>The {@code popMode} command does not have any parameters, so this action is\n// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\nfunction LexerPopModeAction() {\n    LexerAction.call(this, LexerActionType.POP_MODE);\n    return this;\n}\n\nLexerPopModeAction.prototype = Object.create(LexerAction.prototype);\nLexerPopModeAction.prototype.constructor = LexerPopModeAction;\n\nLexerPopModeAction.INSTANCE = new LexerPopModeAction();\n\n// <p>This action is implemented by calling {@link Lexer//popMode}.</p>\nLexerPopModeAction.prototype.execute = function (lexer) {\n    lexer.popMode();\n};\n\nLexerPopModeAction.prototype.toString = function () {\n    return \"popMode\";\n};\n\n// Implements the {@code more} lexer action by calling {@link Lexer//more}.\n//\n// <p>The {@code more} command does not have any parameters, so this action is\n// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\nfunction LexerMoreAction() {\n    LexerAction.call(this, LexerActionType.MORE);\n    return this;\n}\n\nLexerMoreAction.prototype = Object.create(LexerAction.prototype);\nLexerMoreAction.prototype.constructor = LexerMoreAction;\n\nLexerMoreAction.INSTANCE = new LexerMoreAction();\n\n// <p>This action is implemented by calling {@link Lexer//popMode}.</p>\nLexerMoreAction.prototype.execute = function (lexer) {\n    lexer.more();\n};\n\nLexerMoreAction.prototype.toString = function () {\n    return \"more\";\n};\n\n// Implements the {@code mode} lexer action by calling {@link Lexer//mode} with\n// the assigned mode.\nfunction LexerModeAction(mode) {\n    LexerAction.call(this, LexerActionType.MODE);\n    this.mode = mode;\n    return this;\n}\n\nLexerModeAction.prototype = Object.create(LexerAction.prototype);\nLexerModeAction.prototype.constructor = LexerModeAction;\n\n// <p>This action is implemented by calling {@link Lexer//mode} with the\n// value provided by {@link //getMode}.</p>\nLexerModeAction.prototype.execute = function (lexer) {\n    lexer.mode(this.mode);\n};\n\nLexerModeAction.prototype.updateHashCode = function (hash) {\n    hash.update(this.actionType, this.mode);\n};\n\nLexerModeAction.prototype.equals = function (other) {\n    if (this === other) {\n        return true;\n    } else if (!(other instanceof LexerModeAction)) {\n        return false;\n    } else {\n        return this.mode === other.mode;\n    }\n};\n\nLexerModeAction.prototype.toString = function () {\n    return \"mode(\" + this.mode + \")\";\n};\n\n// Executes a custom lexer action by calling {@link Recognizer//action} with the\n// rule and action indexes assigned to the custom action. The implementation of\n// a custom action is added to the generated code for the lexer in an override\n// of {@link Recognizer//action} when the grammar is compiled.\n//\n// <p>This class may represent embedded actions created with the <code>{...}</code>\n// syntax in ANTLR 4, as well as actions created for lexer commands where the\n// command argument could not be evaluated when the grammar was compiled.</p>\n\n\n// Constructs a custom lexer action with the specified rule and action\n// indexes.\n//\n// @param ruleIndex The rule index to use for calls to\n// {@link Recognizer//action}.\n// @param actionIndex The action index to use for calls to\n// {@link Recognizer//action}.\n\nfunction LexerCustomAction(ruleIndex, actionIndex) {\n    LexerAction.call(this, LexerActionType.CUSTOM);\n    this.ruleIndex = ruleIndex;\n    this.actionIndex = actionIndex;\n    this.isPositionDependent = true;\n    return this;\n}\n\nLexerCustomAction.prototype = Object.create(LexerAction.prototype);\nLexerCustomAction.prototype.constructor = LexerCustomAction;\n\n// <p>Custom actions are implemented by calling {@link Lexer//action} with the\n// appropriate rule and action indexes.</p>\nLexerCustomAction.prototype.execute = function (lexer) {\n    lexer.action(null, this.ruleIndex, this.actionIndex);\n};\n\nLexerCustomAction.prototype.updateHashCode = function (hash) {\n    hash.update(this.actionType, this.ruleIndex, this.actionIndex);\n};\n\nLexerCustomAction.prototype.equals = function (other) {\n    if (this === other) {\n        return true;\n    } else if (!(other instanceof LexerCustomAction)) {\n        return false;\n    } else {\n        return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;\n    }\n};\n\n// Implements the {@code channel} lexer action by calling\n// {@link Lexer//setChannel} with the assigned channel.\n// Constructs a new {@code channel} action with the specified channel value.\n// @param channel The channel value to pass to {@link Lexer//setChannel}.\nfunction LexerChannelAction(channel) {\n    LexerAction.call(this, LexerActionType.CHANNEL);\n    this.channel = channel;\n    return this;\n}\n\nLexerChannelAction.prototype = Object.create(LexerAction.prototype);\nLexerChannelAction.prototype.constructor = LexerChannelAction;\n\n// <p>This action is implemented by calling {@link Lexer//setChannel} with the\n// value provided by {@link //getChannel}.</p>\nLexerChannelAction.prototype.execute = function (lexer) {\n    lexer._channel = this.channel;\n};\n\nLexerChannelAction.prototype.updateHashCode = function (hash) {\n    hash.update(this.actionType, this.channel);\n};\n\nLexerChannelAction.prototype.equals = function (other) {\n    if (this === other) {\n        return true;\n    } else if (!(other instanceof LexerChannelAction)) {\n        return false;\n    } else {\n        return this.channel === other.channel;\n    }\n};\n\nLexerChannelAction.prototype.toString = function () {\n    return \"channel(\" + this.channel + \")\";\n};\n\n// This implementation of {@link LexerAction} is used for tracking input offsets\n// for position-dependent actions within a {@link LexerActionExecutor}.\n//\n// <p>This action is not serialized as part of the ATN, and is only required for\n// position-dependent lexer actions which appear at a location other than the\n// end of a rule. For more information about DFA optimizations employed for\n// lexer actions, see {@link LexerActionExecutor//append} and\n// {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>\n\n// Constructs a new indexed custom action by associating a character offset\n// with a {@link LexerAction}.\n//\n// <p>Note: This class is only required for lexer actions for which\n// {@link LexerAction//isPositionDependent} returns {@code true}.</p>\n//\n// @param offset The offset into the input {@link CharStream}, relative to\n// the token start index, at which the specified lexer action should be\n// executed.\n// @param action The lexer action to execute at a particular offset in the\n// input {@link CharStream}.\nfunction LexerIndexedCustomAction(offset, action) {\n    LexerAction.call(this, action.actionType);\n    this.offset = offset;\n    this.action = action;\n    this.isPositionDependent = true;\n    return this;\n}\n\nLexerIndexedCustomAction.prototype = Object.create(LexerAction.prototype);\nLexerIndexedCustomAction.prototype.constructor = LexerIndexedCustomAction;\n\n// <p>This method calls {@link //execute} on the result of {@link //getAction}\n// using the provided {@code lexer}.</p>\nLexerIndexedCustomAction.prototype.execute = function (lexer) {\n    // assume the input stream position was properly set by the calling code\n    this.action.execute(lexer);\n};\n\nLexerIndexedCustomAction.prototype.updateHashCode = function (hash) {\n    hash.update(this.actionType, this.offset, this.action);\n};\n\nLexerIndexedCustomAction.prototype.equals = function (other) {\n    if (this === other) {\n        return true;\n    } else if (!(other instanceof LexerIndexedCustomAction)) {\n        return false;\n    } else {\n        return this.offset === other.offset && this.action === other.action;\n    }\n};\n\nexports.LexerActionType = LexerActionType;\nexports.LexerSkipAction = LexerSkipAction;\nexports.LexerChannelAction = LexerChannelAction;\nexports.LexerCustomAction = LexerCustomAction;\nexports.LexerIndexedCustomAction = LexerIndexedCustomAction;\nexports.LexerMoreAction = LexerMoreAction;\nexports.LexerTypeAction = LexerTypeAction;\nexports.LexerPushModeAction = LexerPushModeAction;\nexports.LexerPopModeAction = LexerPopModeAction;\nexports.LexerModeAction = LexerModeAction;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/LexerAction.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/LexerActionExecutor.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/atn/LexerActionExecutor.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\n// Represents an executor for a sequence of lexer actions which traversed during\n// the matching operation of a lexer rule (token).\n//\n// <p>The executor tracks position information for position-dependent lexer actions\n// efficiently, ensuring that actions appearing only at the end of the rule do\n// not cause bloating of the {@link DFA} created for the lexer.</p>\n\nvar hashStuff = (__webpack_require__(/*! ../Utils */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Utils.js\").hashStuff);\nvar LexerIndexedCustomAction = (__webpack_require__(/*! ./LexerAction */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/LexerAction.js\").LexerIndexedCustomAction);\n\nfunction LexerActionExecutor(lexerActions) {\n\tthis.lexerActions = lexerActions === null ? [] : lexerActions;\n\t// Caches the result of {@link //hashCode} since the hash code is an element\n\t// of the performance-critical {@link LexerATNConfig//hashCode} operation.\n\tthis.cachedHashCode = hashStuff(lexerActions); // \"\".join([str(la) for la in\n\t// lexerActions]))\n\treturn this;\n}\n\n// Creates a {@link LexerActionExecutor} which executes the actions for\n// the input {@code lexerActionExecutor} followed by a specified\n// {@code lexerAction}.\n//\n// @param lexerActionExecutor The executor for actions already traversed by\n// the lexer while matching a token within a particular\n// {@link LexerATNConfig}. If this is {@code null}, the method behaves as\n// though it were an empty executor.\n// @param lexerAction The lexer action to execute after the actions\n// specified in {@code lexerActionExecutor}.\n//\n// @return A {@link LexerActionExecutor} for executing the combine actions\n// of {@code lexerActionExecutor} and {@code lexerAction}.\nLexerActionExecutor.append = function (lexerActionExecutor, lexerAction) {\n\tif (lexerActionExecutor === null) {\n\t\treturn new LexerActionExecutor([lexerAction]);\n\t}\n\tvar lexerActions = lexerActionExecutor.lexerActions.concat([lexerAction]);\n\treturn new LexerActionExecutor(lexerActions);\n};\n\n// Creates a {@link LexerActionExecutor} which encodes the current offset\n// for position-dependent lexer actions.\n//\n// <p>Normally, when the executor encounters lexer actions where\n// {@link LexerAction//isPositionDependent} returns {@code true}, it calls\n// {@link IntStream//seek} on the input {@link CharStream} to set the input\n// position to the <em>end</em> of the current token. This behavior provides\n// for efficient DFA representation of lexer actions which appear at the end\n// of a lexer rule, even when the lexer rule matches a variable number of\n// characters.</p>\n//\n// <p>Prior to traversing a match transition in the ATN, the current offset\n// from the token start index is assigned to all position-dependent lexer\n// actions which have not already been assigned a fixed offset. By storing\n// the offsets relative to the token start index, the DFA representation of\n// lexer actions which appear in the middle of tokens remains efficient due\n// to sharing among tokens of the same length, regardless of their absolute\n// position in the input stream.</p>\n//\n// <p>If the current executor already has offsets assigned to all\n// position-dependent lexer actions, the method returns {@code this}.</p>\n//\n// @param offset The current offset to assign to all position-dependent\n// lexer actions which do not already have offsets assigned.\n//\n// @return A {@link LexerActionExecutor} which stores input stream offsets\n// for all position-dependent lexer actions.\n// /\nLexerActionExecutor.prototype.fixOffsetBeforeMatch = function (offset) {\n\tvar updatedLexerActions = null;\n\tfor (var i = 0; i < this.lexerActions.length; i++) {\n\t\tif (this.lexerActions[i].isPositionDependent && !(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {\n\t\t\tif (updatedLexerActions === null) {\n\t\t\t\tupdatedLexerActions = this.lexerActions.concat([]);\n\t\t\t}\n\t\t\tupdatedLexerActions[i] = new LexerIndexedCustomAction(offset, this.lexerActions[i]);\n\t\t}\n\t}\n\tif (updatedLexerActions === null) {\n\t\treturn this;\n\t} else {\n\t\treturn new LexerActionExecutor(updatedLexerActions);\n\t}\n};\n\n// Execute the actions encapsulated by this executor within the context of a\n// particular {@link Lexer}.\n//\n// <p>This method calls {@link IntStream//seek} to set the position of the\n// {@code input} {@link CharStream} prior to calling\n// {@link LexerAction//execute} on a position-dependent action. Before the\n// method returns, the input position will be restored to the same position\n// it was in when the method was invoked.</p>\n//\n// @param lexer The lexer instance.\n// @param input The input stream which is the source for the current token.\n// When this method is called, the current {@link IntStream//index} for\n// {@code input} should be the start of the following token, i.e. 1\n// character past the end of the current token.\n// @param startIndex The token start index. This value may be passed to\n// {@link IntStream//seek} to set the {@code input} position to the beginning\n// of the token.\n// /\nLexerActionExecutor.prototype.execute = function (lexer, input, startIndex) {\n\tvar requiresSeek = false;\n\tvar stopIndex = input.index;\n\ttry {\n\t\tfor (var i = 0; i < this.lexerActions.length; i++) {\n\t\t\tvar lexerAction = this.lexerActions[i];\n\t\t\tif (lexerAction instanceof LexerIndexedCustomAction) {\n\t\t\t\tvar offset = lexerAction.offset;\n\t\t\t\tinput.seek(startIndex + offset);\n\t\t\t\tlexerAction = lexerAction.action;\n\t\t\t\trequiresSeek = startIndex + offset !== stopIndex;\n\t\t\t} else if (lexerAction.isPositionDependent) {\n\t\t\t\tinput.seek(stopIndex);\n\t\t\t\trequiresSeek = false;\n\t\t\t}\n\t\t\tlexerAction.execute(lexer);\n\t\t}\n\t} finally {\n\t\tif (requiresSeek) {\n\t\t\tinput.seek(stopIndex);\n\t\t}\n\t}\n};\n\nLexerActionExecutor.prototype.hashCode = function () {\n\treturn this.cachedHashCode;\n};\n\nLexerActionExecutor.prototype.updateHashCode = function (hash) {\n\thash.update(this.cachedHashCode);\n};\n\nLexerActionExecutor.prototype.equals = function (other) {\n\tif (this === other) {\n\t\treturn true;\n\t} else if (!(other instanceof LexerActionExecutor)) {\n\t\treturn false;\n\t} else if (this.cachedHashCode != other.cachedHashCode) {\n\t\treturn false;\n\t} else if (this.lexerActions.length != other.lexerActions.length) {\n\t\treturn false;\n\t} else {\n\t\tvar numActions = this.lexerActions.length;\n\t\tfor (var idx = 0; idx < numActions; ++idx) {\n\t\t\tif (!this.lexerActions[idx].equals(other.lexerActions[idx])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n};\n\nexports.LexerActionExecutor = LexerActionExecutor;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/LexerActionExecutor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ParserATNSimulator.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/atn/ParserATNSimulator.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\n//\n// The embodiment of the adaptive LL(*), ALL(*), parsing strategy.\n//\n// <p>\n// The basic complexity of the adaptive strategy makes it harder to understand.\n// We begin with ATN simulation to build paths in a DFA. Subsequent prediction\n// requests go through the DFA first. If they reach a state without an edge for\n// the current symbol, the algorithm fails over to the ATN simulation to\n// complete the DFA path for the current input (until it finds a conflict state\n// or uniquely predicting state).</p>\n//\n// <p>\n// All of that is done without using the outer context because we want to create\n// a DFA that is not dependent upon the rule invocation stack when we do a\n// prediction. One DFA works in all contexts. We avoid using context not\n// necessarily because it's slower, although it can be, but because of the DFA\n// caching problem. The closure routine only considers the rule invocation stack\n// created during prediction beginning in the decision rule. For example, if\n// prediction occurs without invoking another rule's ATN, there are no context\n// stacks in the configurations. When lack of context leads to a conflict, we\n// don't know if it's an ambiguity or a weakness in the strong LL(*) parsing\n// strategy (versus full LL(*)).</p>\n//\n// <p>\n// When SLL yields a configuration set with conflict, we rewind the input and\n// retry the ATN simulation, this time using full outer context without adding\n// to the DFA. Configuration context stacks will be the full invocation stacks\n// from the start rule. If we get a conflict using full context, then we can\n// definitively say we have a true ambiguity for that input sequence. If we\n// don't get a conflict, it implies that the decision is sensitive to the outer\n// context. (It is not context-sensitive in the sense of context-sensitive\n// grammars.)</p>\n//\n// <p>\n// The next time we reach this DFA state with an SLL conflict, through DFA\n// simulation, we will again retry the ATN simulation using full context mode.\n// This is slow because we can't save the results and have to \"interpret\" the\n// ATN each time we get that input.</p>\n//\n// <p>\n// <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>\n//\n// <p>\n// We could cache results from full context to predicted alternative easily and\n// that saves a lot of time but doesn't work in presence of predicates. The set\n// of visible predicates from the ATN start state changes depending on the\n// context, because closure can fall off the end of a rule. I tried to cache\n// tuples (stack context, semantic context, predicted alt) but it was slower\n// than interpreting and much more complicated. Also required a huge amount of\n// memory. The goal is not to create the world's fastest parser anyway. I'd like\n// to keep this algorithm simple. By launching multiple threads, we can improve\n// the speed of parsing across a large number of files.</p>\n//\n// <p>\n// There is no strict ordering between the amount of input used by SLL vs LL,\n// which makes it really hard to build a cache for full context. Let's say that\n// we have input A B C that leads to an SLL conflict with full context X. That\n// implies that using X we might only use A B but we could also use A B C D to\n// resolve conflict. Input A B C D could predict alternative 1 in one position\n// in the input and A B C E could predict alternative 2 in another position in\n// input. The conflicting SLL configurations could still be non-unique in the\n// full context prediction, which would lead us to requiring more input than the\n// original A B C.\tTo make a\tprediction cache work, we have to track\tthe exact\n// input\tused during the previous prediction. That amounts to a cache that maps\n// X to a specific DFA for that context.</p>\n//\n// <p>\n// Something should be done for left-recursive expression predictions. They are\n// likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry\n// with full LL thing Sam does.</p>\n//\n// <p>\n// <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>\n//\n// <p>\n// We avoid doing full context retry when the outer context is empty, we did not\n// dip into the outer context by falling off the end of the decision state rule,\n// or when we force SLL mode.</p>\n//\n// <p>\n// As an example of the not dip into outer context case, consider as super\n// constructor calls versus function calls. One grammar might look like\n// this:</p>\n//\n// <pre>\n// ctorBody\n//   : '{' superCall? stat* '}'\n//   ;\n// </pre>\n//\n// <p>\n// Or, you might see something like</p>\n//\n// <pre>\n// stat\n//   : superCall ';'\n//   | expression ';'\n//   | ...\n//   ;\n// </pre>\n//\n// <p>\n// In both cases I believe that no closure operations will dip into the outer\n// context. In the first case ctorBody in the worst case will stop at the '}'.\n// In the 2nd case it should stop at the ';'. Both cases should stay within the\n// entry rule and not dip into the outer context.</p>\n//\n// <p>\n// <strong>PREDICATES</strong></p>\n//\n// <p>\n// Predicates are always evaluated if present in either SLL or LL both. SLL and\n// LL simulation deals with predicates differently. SLL collects predicates as\n// it performs closure operations like ANTLR v3 did. It delays predicate\n// evaluation until it reaches and accept state. This allows us to cache the SLL\n// ATN simulation whereas, if we had evaluated predicates on-the-fly during\n// closure, the DFA state configuration sets would be different and we couldn't\n// build up a suitable DFA.</p>\n//\n// <p>\n// When building a DFA accept state during ATN simulation, we evaluate any\n// predicates and return the sole semantically valid alternative. If there is\n// more than 1 alternative, we report an ambiguity. If there are 0 alternatives,\n// we throw an exception. Alternatives without predicates act like they have\n// true predicates. The simple way to think about it is to strip away all\n// alternatives with false predicates and choose the minimum alternative that\n// remains.</p>\n//\n// <p>\n// When we start in the DFA and reach an accept state that's predicated, we test\n// those and return the minimum semantically viable alternative. If no\n// alternatives are viable, we throw an exception.</p>\n//\n// <p>\n// During full LL ATN simulation, closure always evaluates predicates and\n// on-the-fly. This is crucial to reducing the configuration set size during\n// closure. It hits a landmine when parsing with the Java grammar, for example,\n// without this on-the-fly evaluation.</p>\n//\n// <p>\n// <strong>SHARING DFA</strong></p>\n//\n// <p>\n// All instances of the same parser share the same decision DFAs through a\n// static field. Each instance gets its own ATN simulator but they share the\n// same {@link //decisionToDFA} field. They also share a\n// {@link PredictionContextCache} object that makes sure that all\n// {@link PredictionContext} objects are shared among the DFA states. This makes\n// a big size difference.</p>\n//\n// <p>\n// <strong>THREAD SAFETY</strong></p>\n//\n// <p>\n// The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when\n// it adds a new DFA object to that array. {@link //addDFAEdge}\n// locks on the DFA for the current decision when setting the\n// {@link DFAState//edges} field. {@link //addDFAState} locks on\n// the DFA for the current decision when looking up a DFA state to see if it\n// already exists. We must make sure that all requests to add DFA states that\n// are equivalent result in the same shared DFA object. This is because lots of\n// threads will be trying to update the DFA at once. The\n// {@link //addDFAState} method also locks inside the DFA lock\n// but this time on the shared context cache when it rebuilds the\n// configurations' {@link PredictionContext} objects using cached\n// subgraphs/nodes. No other locking occurs, even during DFA simulation. This is\n// safe as long as we can guarantee that all threads referencing\n// {@code s.edge[t]} get the same physical target {@link DFAState}, or\n// {@code null}. Once into the DFA, the DFA simulation does not reference the\n// {@link DFA//states} map. It follows the {@link DFAState//edges} field to new\n// targets. The DFA simulator will either find {@link DFAState//edges} to be\n// {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or\n// {@code dfa.edges[t]} to be non-null. The\n// {@link //addDFAEdge} method could be racing to set the field\n// but in either case the DFA simulator works; if {@code null}, and requests ATN\n// simulation. It could also race trying to get {@code dfa.edges[t]}, but either\n// way it will work because it's not doing a test and set operation.</p>\n//\n// <p>\n// <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage\n// Parsing)</strong></p>\n//\n// <p>\n// Sam pointed out that if SLL does not give a syntax error, then there is no\n// point in doing full LL, which is slower. We only have to try LL if we get a\n// syntax error. For maximum speed, Sam starts the parser set to pure SLL\n// mode with the {@link BailErrorStrategy}:</p>\n//\n// <pre>\n// parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};\n// parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());\n// </pre>\n//\n// <p>\n// If it does not get a syntax error, then we're done. If it does get a syntax\n// error, we need to retry with the combined SLL/LL strategy.</p>\n//\n// <p>\n// The reason this works is as follows. If there are no SLL conflicts, then the\n// grammar is SLL (at least for that input set). If there is an SLL conflict,\n// the full LL analysis must yield a set of viable alternatives which is a\n// subset of the alternatives reported by SLL. If the LL set is a singleton,\n// then the grammar is LL but not SLL. If the LL set is the same size as the SLL\n// set, the decision is SLL. If the LL set has size &gt; 1, then that decision\n// is truly ambiguous on the current input. If the LL set is smaller, then the\n// SLL conflict resolution might choose an alternative that the full LL would\n// rule out as a possibility based upon better context information. If that's\n// the case, then the SLL parse will definitely get an error because the full LL\n// analysis says it's not viable. If SLL conflict resolution chooses an\n// alternative within the LL set, them both SLL and LL would choose the same\n// alternative because they both choose the minimum of multiple conflicting\n// alternatives.</p>\n//\n// <p>\n// Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and\n// a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL\n// parsing will get an error because SLL will pursue alternative 1. If\n// <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will\n// choose the same alternative because alternative one is the minimum of either\n// set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax\n// error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>\n//\n// <p>\n// Of course, if the input is invalid, then we will get an error for sure in\n// both SLL and LL parsing. Erroneous input will therefore require 2 passes over\n// the input.</p>\n//\n\nvar Utils = __webpack_require__(/*! ./../Utils */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Utils.js\");\nvar Set = Utils.Set;\nvar BitSet = Utils.BitSet;\nvar DoubleDict = Utils.DoubleDict;\nvar ATN = (__webpack_require__(/*! ./ATN */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATN.js\").ATN);\nvar ATNState = (__webpack_require__(/*! ./ATNState */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNState.js\").ATNState);\nvar ATNConfig = (__webpack_require__(/*! ./ATNConfig */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNConfig.js\").ATNConfig);\nvar ATNConfigSet = (__webpack_require__(/*! ./ATNConfigSet */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNConfigSet.js\").ATNConfigSet);\nvar Token = (__webpack_require__(/*! ./../Token */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Token.js\").Token);\nvar DFAState = (__webpack_require__(/*! ./../dfa/DFAState */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/dfa/DFAState.js\").DFAState);\nvar PredPrediction = (__webpack_require__(/*! ./../dfa/DFAState */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/dfa/DFAState.js\").PredPrediction);\nvar ATNSimulator = (__webpack_require__(/*! ./ATNSimulator */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNSimulator.js\").ATNSimulator);\nvar PredictionMode = (__webpack_require__(/*! ./PredictionMode */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/PredictionMode.js\").PredictionMode);\nvar RuleContext = (__webpack_require__(/*! ./../RuleContext */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/RuleContext.js\").RuleContext);\nvar ParserRuleContext = (__webpack_require__(/*! ./../ParserRuleContext */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/ParserRuleContext.js\").ParserRuleContext);\nvar SemanticContext = (__webpack_require__(/*! ./SemanticContext */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/SemanticContext.js\").SemanticContext);\nvar StarLoopEntryState = (__webpack_require__(/*! ./ATNState */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNState.js\").StarLoopEntryState);\nvar RuleStopState = (__webpack_require__(/*! ./ATNState */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNState.js\").RuleStopState);\nvar PredictionContext = (__webpack_require__(/*! ./../PredictionContext */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/PredictionContext.js\").PredictionContext);\nvar Interval = (__webpack_require__(/*! ./../IntervalSet */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/IntervalSet.js\").Interval);\nvar Transitions = __webpack_require__(/*! ./Transition */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/Transition.js\");\nvar Transition = Transitions.Transition;\nvar SetTransition = Transitions.SetTransition;\nvar NotSetTransition = Transitions.NotSetTransition;\nvar RuleTransition = Transitions.RuleTransition;\nvar ActionTransition = Transitions.ActionTransition;\nvar NoViableAltException = (__webpack_require__(/*! ./../error/Errors */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/Errors.js\").NoViableAltException);\n\nvar SingletonPredictionContext = (__webpack_require__(/*! ./../PredictionContext */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/PredictionContext.js\").SingletonPredictionContext);\nvar predictionContextFromRuleContext = (__webpack_require__(/*! ./../PredictionContext */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/PredictionContext.js\").predictionContextFromRuleContext);\n\nfunction ParserATNSimulator(parser, atn, decisionToDFA, sharedContextCache) {\n    ATNSimulator.call(this, atn, sharedContextCache);\n    this.parser = parser;\n    this.decisionToDFA = decisionToDFA;\n    // SLL, LL, or LL + exact ambig detection?//\n    this.predictionMode = PredictionMode.LL;\n    // LAME globals to avoid parameters!!!!! I need these down deep in predTransition\n    this._input = null;\n    this._startIndex = 0;\n    this._outerContext = null;\n    this._dfa = null;\n    // Each prediction operation uses a cache for merge of prediction contexts.\n    //  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap\n    //  isn't synchronized but we're ok since two threads shouldn't reuse same\n    //  parser/atnsim object because it can only handle one input at a time.\n    //  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid\n    //  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should\n    //  also be examined during cache lookup.\n    //\n    this.mergeCache = null;\n    return this;\n}\n\nParserATNSimulator.prototype = Object.create(ATNSimulator.prototype);\nParserATNSimulator.prototype.constructor = ParserATNSimulator;\n\nParserATNSimulator.prototype.debug = false;\nParserATNSimulator.prototype.debug_closure = false;\nParserATNSimulator.prototype.debug_add = false;\nParserATNSimulator.prototype.debug_list_atn_decisions = false;\nParserATNSimulator.prototype.dfa_debug = false;\nParserATNSimulator.prototype.retry_debug = false;\n\nParserATNSimulator.prototype.reset = function () {};\n\nParserATNSimulator.prototype.adaptivePredict = function (input, decision, outerContext) {\n    if (this.debug || this.debug_list_atn_decisions) {\n        console.log(\"adaptivePredict decision \" + decision + \" exec LA(1)==\" + this.getLookaheadName(input) + \" line \" + input.LT(1).line + \":\" + input.LT(1).column);\n    }\n    this._input = input;\n    this._startIndex = input.index;\n    this._outerContext = outerContext;\n\n    var dfa = this.decisionToDFA[decision];\n    this._dfa = dfa;\n    var m = input.mark();\n    var index = input.index;\n\n    // Now we are certain to have a specific decision's DFA\n    // But, do we still need an initial state?\n    try {\n        var s0;\n        if (dfa.precedenceDfa) {\n            // the start state for a precedence DFA depends on the current\n            // parser precedence, and is provided by a DFA method.\n            s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());\n        } else {\n            // the start state for a \"regular\" DFA is just s0\n            s0 = dfa.s0;\n        }\n        if (s0 === null) {\n            if (outerContext === null) {\n                outerContext = RuleContext.EMPTY;\n            }\n            if (this.debug || this.debug_list_atn_decisions) {\n                console.log(\"predictATN decision \" + dfa.decision + \" exec LA(1)==\" + this.getLookaheadName(input) + \", outerContext=\" + outerContext.toString(this.parser.ruleNames));\n            }\n\n            var fullCtx = false;\n            var s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);\n\n            if (dfa.precedenceDfa) {\n                // If this is a precedence DFA, we use applyPrecedenceFilter\n                // to convert the computed start state to a precedence start\n                // state. We then use DFA.setPrecedenceStartState to set the\n                // appropriate start state for the precedence level rather\n                // than simply setting DFA.s0.\n                //\n                dfa.s0.configs = s0_closure; // not used for prediction but useful to know start configs anyway\n                s0_closure = this.applyPrecedenceFilter(s0_closure);\n                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));\n                dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);\n            } else {\n                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));\n                dfa.s0 = s0;\n            }\n        }\n        var alt = this.execATN(dfa, s0, input, index, outerContext);\n        if (this.debug) {\n            console.log(\"DFA after predictATN: \" + dfa.toString(this.parser.literalNames));\n        }\n        return alt;\n    } finally {\n        this._dfa = null;\n        this.mergeCache = null; // wack cache after each prediction\n        input.seek(index);\n        input.release(m);\n    }\n};\n// Performs ATN simulation to compute a predicted alternative based\n//  upon the remaining input, but also updates the DFA cache to avoid\n//  having to traverse the ATN again for the same input sequence.\n\n// There are some key conditions we're looking for after computing a new\n// set of ATN configs (proposed DFA state):\n// if the set is empty, there is no viable alternative for current symbol\n// does the state uniquely predict an alternative?\n// does the state have a conflict that would prevent us from\n//   putting it on the work list?\n\n// We also have some key operations to do:\n// add an edge from previous DFA state to potentially new DFA state, D,\n//   upon current symbol but only if adding to work list, which means in all\n//   cases except no viable alternative (and possibly non-greedy decisions?)\n// collecting predicates and adding semantic context to DFA accept states\n// adding rule context to context-sensitive DFA accept states\n// consuming an input symbol\n// reporting a conflict\n// reporting an ambiguity\n// reporting a context sensitivity\n// reporting insufficient predicates\n\n// cover these cases:\n//    dead end\n//    single alt\n//    single alt + preds\n//    conflict\n//    conflict + preds\n//\nParserATNSimulator.prototype.execATN = function (dfa, s0, input, startIndex, outerContext) {\n    if (this.debug || this.debug_list_atn_decisions) {\n        console.log(\"execATN decision \" + dfa.decision + \" exec LA(1)==\" + this.getLookaheadName(input) + \" line \" + input.LT(1).line + \":\" + input.LT(1).column);\n    }\n    var alt;\n    var previousD = s0;\n\n    if (this.debug) {\n        console.log(\"s0 = \" + s0);\n    }\n    var t = input.LA(1);\n    while (true) {\n        // while more work\n        var D = this.getExistingTargetState(previousD, t);\n        if (D === null) {\n            D = this.computeTargetState(dfa, previousD, t);\n        }\n        if (D === ATNSimulator.ERROR) {\n            // if any configs in previous dipped into outer context, that\n            // means that input up to t actually finished entry rule\n            // at least for SLL decision. Full LL doesn't dip into outer\n            // so don't need special case.\n            // We will get an error no matter what so delay until after\n            // decision; better error message. Also, no reachable target\n            // ATN states in SLL implies LL will also get nowhere.\n            // If conflict in states that dip out, choose min since we\n            // will get error no matter what.\n            var e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);\n            input.seek(startIndex);\n            alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);\n            if (alt !== ATN.INVALID_ALT_NUMBER) {\n                return alt;\n            } else {\n                throw e;\n            }\n        }\n        if (D.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {\n            // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)\n            var conflictingAlts = null;\n            if (D.predicates !== null) {\n                if (this.debug) {\n                    console.log(\"DFA state has preds in DFA sim LL failover\");\n                }\n                var conflictIndex = input.index;\n                if (conflictIndex !== startIndex) {\n                    input.seek(startIndex);\n                }\n                conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);\n                if (conflictingAlts.length === 1) {\n                    if (this.debug) {\n                        console.log(\"Full LL avoided\");\n                    }\n                    return conflictingAlts.minValue();\n                }\n                if (conflictIndex !== startIndex) {\n                    // restore the index so reporting the fallback to full\n                    // context occurs with the index at the correct spot\n                    input.seek(conflictIndex);\n                }\n            }\n            if (this.dfa_debug) {\n                console.log(\"ctx sensitive state \" + outerContext + \" in \" + D);\n            }\n            var fullCtx = true;\n            var s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);\n            this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);\n            alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);\n            return alt;\n        }\n        if (D.isAcceptState) {\n            if (D.predicates === null) {\n                return D.prediction;\n            }\n            var stopIndex = input.index;\n            input.seek(startIndex);\n            var alts = this.evalSemanticContext(D.predicates, outerContext, true);\n            if (alts.length === 0) {\n                throw this.noViableAlt(input, outerContext, D.configs, startIndex);\n            } else if (alts.length === 1) {\n                return alts.minValue();\n            } else {\n                // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.\n                this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);\n                return alts.minValue();\n            }\n        }\n        previousD = D;\n\n        if (t !== Token.EOF) {\n            input.consume();\n            t = input.LA(1);\n        }\n    }\n};\n//\n// Get an existing target state for an edge in the DFA. If the target state\n// for the edge has not yet been computed or is otherwise not available,\n// this method returns {@code null}.\n//\n// @param previousD The current DFA state\n// @param t The next input symbol\n// @return The existing target DFA state for the given input symbol\n// {@code t}, or {@code null} if the target state for this edge is not\n// already cached\n//\nParserATNSimulator.prototype.getExistingTargetState = function (previousD, t) {\n    var edges = previousD.edges;\n    if (edges === null) {\n        return null;\n    } else {\n        return edges[t + 1] || null;\n    }\n};\n//\n// Compute a target state for an edge in the DFA, and attempt to add the\n// computed state and corresponding edge to the DFA.\n//\n// @param dfa The DFA\n// @param previousD The current DFA state\n// @param t The next input symbol\n//\n// @return The computed target DFA state for the given input symbol\n// {@code t}. If {@code t} does not lead to a valid DFA state, this method\n// returns {@link //ERROR}.\n//\nParserATNSimulator.prototype.computeTargetState = function (dfa, previousD, t) {\n    var reach = this.computeReachSet(previousD.configs, t, false);\n    if (reach === null) {\n        this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);\n        return ATNSimulator.ERROR;\n    }\n    // create new target state; we'll add to DFA after it's complete\n    var D = new DFAState(null, reach);\n\n    var predictedAlt = this.getUniqueAlt(reach);\n\n    if (this.debug) {\n        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);\n        console.log(\"SLL altSubSets=\" + Utils.arrayToString(altSubSets) + \", previous=\" + previousD.configs + \", configs=\" + reach + \", predict=\" + predictedAlt + \", allSubsetsConflict=\" + PredictionMode.allSubsetsConflict(altSubSets) + \", conflictingAlts=\" + this.getConflictingAlts(reach));\n    }\n    if (predictedAlt !== ATN.INVALID_ALT_NUMBER) {\n        // NO CONFLICT, UNIQUELY PREDICTED ALT\n        D.isAcceptState = true;\n        D.configs.uniqueAlt = predictedAlt;\n        D.prediction = predictedAlt;\n    } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {\n        // MORE THAN ONE VIABLE ALTERNATIVE\n        D.configs.conflictingAlts = this.getConflictingAlts(reach);\n        D.requiresFullContext = true;\n        // in SLL-only mode, we will stop at this state and return the minimum alt\n        D.isAcceptState = true;\n        D.prediction = D.configs.conflictingAlts.minValue();\n    }\n    if (D.isAcceptState && D.configs.hasSemanticContext) {\n        this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));\n        if (D.predicates !== null) {\n            D.prediction = ATN.INVALID_ALT_NUMBER;\n        }\n    }\n    // all adds to dfa are done after we've created full D state\n    D = this.addDFAEdge(dfa, previousD, t, D);\n    return D;\n};\n\nParserATNSimulator.prototype.predicateDFAState = function (dfaState, decisionState) {\n    // We need to test all predicates, even in DFA states that\n    // uniquely predict alternative.\n    var nalts = decisionState.transitions.length;\n    // Update DFA so reach becomes accept state with (predicate,alt)\n    // pairs if preds found for conflicting alts\n    var altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);\n    var altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);\n    if (altToPred !== null) {\n        dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);\n        dfaState.prediction = ATN.INVALID_ALT_NUMBER; // make sure we use preds\n    } else {\n        // There are preds in configs but they might go away\n        // when OR'd together like {p}? || NONE == NONE. If neither\n        // alt has preds, resolve to min alt\n        dfaState.prediction = altsToCollectPredsFrom.minValue();\n    }\n};\n\n// comes back with reach.uniqueAlt set to a valid alt\nParserATNSimulator.prototype.execATNWithFullContext = function (dfa, D, // how far we got before failing over\ns0, input, startIndex, outerContext) {\n    if (this.debug || this.debug_list_atn_decisions) {\n        console.log(\"execATNWithFullContext \" + s0);\n    }\n    var fullCtx = true;\n    var foundExactAmbig = false;\n    var reach = null;\n    var previous = s0;\n    input.seek(startIndex);\n    var t = input.LA(1);\n    var predictedAlt = -1;\n    while (true) {\n        // while more work\n        reach = this.computeReachSet(previous, t, fullCtx);\n        if (reach === null) {\n            // if any configs in previous dipped into outer context, that\n            // means that input up to t actually finished entry rule\n            // at least for LL decision. Full LL doesn't dip into outer\n            // so don't need special case.\n            // We will get an error no matter what so delay until after\n            // decision; better error message. Also, no reachable target\n            // ATN states in SLL implies LL will also get nowhere.\n            // If conflict in states that dip out, choose min since we\n            // will get error no matter what.\n            var e = this.noViableAlt(input, outerContext, previous, startIndex);\n            input.seek(startIndex);\n            var alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);\n            if (alt !== ATN.INVALID_ALT_NUMBER) {\n                return alt;\n            } else {\n                throw e;\n            }\n        }\n        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);\n        if (this.debug) {\n            console.log(\"LL altSubSets=\" + altSubSets + \", predict=\" + PredictionMode.getUniqueAlt(altSubSets) + \", resolvesToJustOneViableAlt=\" + PredictionMode.resolvesToJustOneViableAlt(altSubSets));\n        }\n        reach.uniqueAlt = this.getUniqueAlt(reach);\n        // unique prediction?\n        if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER) {\n            predictedAlt = reach.uniqueAlt;\n            break;\n        } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {\n            predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);\n            if (predictedAlt !== ATN.INVALID_ALT_NUMBER) {\n                break;\n            }\n        } else {\n            // In exact ambiguity mode, we never try to terminate early.\n            // Just keeps scarfing until we know what the conflict is\n            if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {\n                foundExactAmbig = true;\n                predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);\n                break;\n            }\n            // else there are multiple non-conflicting subsets or\n            // we're not sure what the ambiguity is yet.\n            // So, keep going.\n        }\n        previous = reach;\n        if (t !== Token.EOF) {\n            input.consume();\n            t = input.LA(1);\n        }\n    }\n    // If the configuration set uniquely predicts an alternative,\n    // without conflict, then we know that it's a full LL decision\n    // not SLL.\n    if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER) {\n        this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);\n        return predictedAlt;\n    }\n    // We do not check predicates here because we have checked them\n    // on-the-fly when doing full context prediction.\n\n    //\n    // In non-exact ambiguity detection mode, we might\tactually be able to\n    // detect an exact ambiguity, but I'm not going to spend the cycles\n    // needed to check. We only emit ambiguity warnings in exact ambiguity\n    // mode.\n    //\n    // For example, we might know that we have conflicting configurations.\n    // But, that does not mean that there is no way forward without a\n    // conflict. It's possible to have nonconflicting alt subsets as in:\n\n    // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]\n\n    // from\n    //\n    //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),\n    //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]\n    //\n    // In this case, (17,1,[5 $]) indicates there is some next sequence that\n    // would resolve this without conflict to alternative 1. Any other viable\n    // next sequence, however, is associated with a conflict.  We stop\n    // looking for input because no amount of further lookahead will alter\n    // the fact that we should predict alternative 1.  We just can't say for\n    // sure that there is an ambiguity without looking further.\n\n    this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);\n\n    return predictedAlt;\n};\n\nParserATNSimulator.prototype.computeReachSet = function (closure, t, fullCtx) {\n    if (this.debug) {\n        console.log(\"in computeReachSet, starting closure: \" + closure);\n    }\n    if (this.mergeCache === null) {\n        this.mergeCache = new DoubleDict();\n    }\n    var intermediate = new ATNConfigSet(fullCtx);\n\n    // Configurations already in a rule stop state indicate reaching the end\n    // of the decision rule (local context) or end of the start rule (full\n    // context). Once reached, these configurations are never updated by a\n    // closure operation, so they are handled separately for the performance\n    // advantage of having a smaller intermediate set when calling closure.\n    //\n    // For full-context reach operations, separate handling is required to\n    // ensure that the alternative matching the longest overall sequence is\n    // chosen when multiple such configurations can match the input.\n\n    var skippedStopStates = null;\n\n    // First figure out where we can reach on input t\n    for (var i = 0; i < closure.items.length; i++) {\n        var c = closure.items[i];\n        if (this.debug_add) {\n            console.log(\"testing \" + this.getTokenName(t) + \" at \" + c);\n        }\n        if (c.state instanceof RuleStopState) {\n            if (fullCtx || t === Token.EOF) {\n                if (skippedStopStates === null) {\n                    skippedStopStates = [];\n                }\n                skippedStopStates.push(c);\n                if (this.debug_add) {\n                    console.log(\"added \" + c + \" to skippedStopStates\");\n                }\n            }\n            continue;\n        }\n        for (var j = 0; j < c.state.transitions.length; j++) {\n            var trans = c.state.transitions[j];\n            var target = this.getReachableTarget(trans, t);\n            if (target !== null) {\n                var cfg = new ATNConfig({ state: target }, c);\n                intermediate.add(cfg, this.mergeCache);\n                if (this.debug_add) {\n                    console.log(\"added \" + cfg + \" to intermediate\");\n                }\n            }\n        }\n    }\n    // Now figure out where the reach operation can take us...\n    var reach = null;\n\n    // This block optimizes the reach operation for intermediate sets which\n    // trivially indicate a termination state for the overall\n    // adaptivePredict operation.\n    //\n    // The conditions assume that intermediate\n    // contains all configurations relevant to the reach set, but this\n    // condition is not true when one or more configurations have been\n    // withheld in skippedStopStates, or when the current symbol is EOF.\n    //\n    if (skippedStopStates === null && t !== Token.EOF) {\n        if (intermediate.items.length === 1) {\n            // Don't pursue the closure if there is just one state.\n            // It can only have one alternative; just add to result\n            // Also don't pursue the closure if there is unique alternative\n            // among the configurations.\n            reach = intermediate;\n        } else if (this.getUniqueAlt(intermediate) !== ATN.INVALID_ALT_NUMBER) {\n            // Also don't pursue the closure if there is unique alternative\n            // among the configurations.\n            reach = intermediate;\n        }\n    }\n    // If the reach set could not be trivially determined, perform a closure\n    // operation on the intermediate set to compute its initial value.\n    //\n    if (reach === null) {\n        reach = new ATNConfigSet(fullCtx);\n        var closureBusy = new Set();\n        var treatEofAsEpsilon = t === Token.EOF;\n        for (var k = 0; k < intermediate.items.length; k++) {\n            this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);\n        }\n    }\n    if (t === Token.EOF) {\n        // After consuming EOF no additional input is possible, so we are\n        // only interested in configurations which reached the end of the\n        // decision rule (local context) or end of the start rule (full\n        // context). Update reach to contain only these configurations. This\n        // handles both explicit EOF transitions in the grammar and implicit\n        // EOF transitions following the end of the decision or start rule.\n        //\n        // When reach==intermediate, no closure operation was performed. In\n        // this case, removeAllConfigsNotInRuleStopState needs to check for\n        // reachable rule stop states as well as configurations already in\n        // a rule stop state.\n        //\n        // This is handled before the configurations in skippedStopStates,\n        // because any configurations potentially added from that list are\n        // already guaranteed to meet this condition whether or not it's\n        // required.\n        //\n        reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);\n    }\n    // If skippedStopStates!==null, then it contains at least one\n    // configuration. For full-context reach operations, these\n    // configurations reached the end of the start rule, in which case we\n    // only add them back to reach if no configuration during the current\n    // closure operation reached such a state. This ensures adaptivePredict\n    // chooses an alternative matching the longest overall sequence when\n    // multiple alternatives are viable.\n    //\n    if (skippedStopStates !== null && (!fullCtx || !PredictionMode.hasConfigInRuleStopState(reach))) {\n        for (var l = 0; l < skippedStopStates.length; l++) {\n            reach.add(skippedStopStates[l], this.mergeCache);\n        }\n    }\n    if (reach.items.length === 0) {\n        return null;\n    } else {\n        return reach;\n    }\n};\n//\n// Return a configuration set containing only the configurations from\n// {@code configs} which are in a {@link RuleStopState}. If all\n// configurations in {@code configs} are already in a rule stop state, this\n// method simply returns {@code configs}.\n//\n// <p>When {@code lookToEndOfRule} is true, this method uses\n// {@link ATN//nextTokens} for each configuration in {@code configs} which is\n// not already in a rule stop state to see if a rule stop state is reachable\n// from the configuration via epsilon-only transitions.</p>\n//\n// @param configs the configuration set to update\n// @param lookToEndOfRule when true, this method checks for rule stop states\n// reachable by epsilon-only transitions from each configuration in\n// {@code configs}.\n//\n// @return {@code configs} if all configurations in {@code configs} are in a\n// rule stop state, otherwise return a new configuration set containing only\n// the configurations from {@code configs} which are in a rule stop state\n//\nParserATNSimulator.prototype.removeAllConfigsNotInRuleStopState = function (configs, lookToEndOfRule) {\n    if (PredictionMode.allConfigsInRuleStopStates(configs)) {\n        return configs;\n    }\n    var result = new ATNConfigSet(configs.fullCtx);\n    for (var i = 0; i < configs.items.length; i++) {\n        var config = configs.items[i];\n        if (config.state instanceof RuleStopState) {\n            result.add(config, this.mergeCache);\n            continue;\n        }\n        if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {\n            var nextTokens = this.atn.nextTokens(config.state);\n            if (nextTokens.contains(Token.EPSILON)) {\n                var endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];\n                result.add(new ATNConfig({ state: endOfRuleState }, config), this.mergeCache);\n            }\n        }\n    }\n    return result;\n};\n\nParserATNSimulator.prototype.computeStartState = function (p, ctx, fullCtx) {\n    // always at least the implicit call to start rule\n    var initialContext = predictionContextFromRuleContext(this.atn, ctx);\n    var configs = new ATNConfigSet(fullCtx);\n    for (var i = 0; i < p.transitions.length; i++) {\n        var target = p.transitions[i].target;\n        var c = new ATNConfig({ state: target, alt: i + 1, context: initialContext }, null);\n        var closureBusy = new Set();\n        this.closure(c, configs, closureBusy, true, fullCtx, false);\n    }\n    return configs;\n};\n\n//\n// This method transforms the start state computed by\n// {@link //computeStartState} to the special start state used by a\n// precedence DFA for a particular precedence value. The transformation\n// process applies the following changes to the start state's configuration\n// set.\n//\n// <ol>\n// <li>Evaluate the precedence predicates for each configuration using\n// {@link SemanticContext//evalPrecedence}.</li>\n// <li>Remove all configurations which predict an alternative greater than\n// 1, for which another configuration that predicts alternative 1 is in the\n// same ATN state with the same prediction context. This transformation is\n// valid for the following reasons:\n// <ul>\n// <li>The closure block cannot contain any epsilon transitions which bypass\n// the body of the closure, so all states reachable via alternative 1 are\n// part of the precedence alternatives of the transformed left-recursive\n// rule.</li>\n// <li>The \"primary\" portion of a left recursive rule cannot contain an\n// epsilon transition, so the only way an alternative other than 1 can exist\n// in a state that is also reachable via alternative 1 is by nesting calls\n// to the left-recursive rule, with the outer calls not being at the\n// preferred precedence level.</li>\n// </ul>\n// </li>\n// </ol>\n//\n// <p>\n// The prediction context must be considered by this filter to address\n// situations like the following.\n// </p>\n// <code>\n// <pre>\n// grammar TA;\n// prog: statement* EOF;\n// statement: letterA | statement letterA 'b' ;\n// letterA: 'a';\n// </pre>\n// </code>\n// <p>\n// If the above grammar, the ATN state immediately before the token\n// reference {@code 'a'} in {@code letterA} is reachable from the left edge\n// of both the primary and closure blocks of the left-recursive rule\n// {@code statement}. The prediction context associated with each of these\n// configurations distinguishes between them, and prevents the alternative\n// which stepped out to {@code prog} (and then back in to {@code statement}\n// from being eliminated by the filter.\n// </p>\n//\n// @param configs The configuration set computed by\n// {@link //computeStartState} as the start state for the DFA.\n// @return The transformed configuration set representing the start state\n// for a precedence DFA at a particular precedence level (determined by\n// calling {@link Parser//getPrecedence}).\n//\nParserATNSimulator.prototype.applyPrecedenceFilter = function (configs) {\n    var config;\n    var statesFromAlt1 = [];\n    var configSet = new ATNConfigSet(configs.fullCtx);\n    for (var i = 0; i < configs.items.length; i++) {\n        config = configs.items[i];\n        // handle alt 1 first\n        if (config.alt !== 1) {\n            continue;\n        }\n        var updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);\n        if (updatedContext === null) {\n            // the configuration was eliminated\n            continue;\n        }\n        statesFromAlt1[config.state.stateNumber] = config.context;\n        if (updatedContext !== config.semanticContext) {\n            configSet.add(new ATNConfig({ semanticContext: updatedContext }, config), this.mergeCache);\n        } else {\n            configSet.add(config, this.mergeCache);\n        }\n    }\n    for (i = 0; i < configs.items.length; i++) {\n        config = configs.items[i];\n        if (config.alt === 1) {\n            // already handled\n            continue;\n        }\n        // In the future, this elimination step could be updated to also\n        // filter the prediction context for alternatives predicting alt>1\n        // (basically a graph subtraction algorithm).\n        if (!config.precedenceFilterSuppressed) {\n            var context = statesFromAlt1[config.state.stateNumber] || null;\n            if (context !== null && context.equals(config.context)) {\n                // eliminated\n                continue;\n            }\n        }\n        configSet.add(config, this.mergeCache);\n    }\n    return configSet;\n};\n\nParserATNSimulator.prototype.getReachableTarget = function (trans, ttype) {\n    if (trans.matches(ttype, 0, this.atn.maxTokenType)) {\n        return trans.target;\n    } else {\n        return null;\n    }\n};\n\nParserATNSimulator.prototype.getPredsForAmbigAlts = function (ambigAlts, configs, nalts) {\n    // REACH=[1|1|[]|0:0, 1|2|[]|0:1]\n    // altToPred starts as an array of all null contexts. The entry at index i\n    // corresponds to alternative i. altToPred[i] may have one of three values:\n    //   1. null: no ATNConfig c is found such that c.alt==i\n    //   2. SemanticContext.NONE: At least one ATNConfig c exists such that\n    //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,\n    //      alt i has at least one unpredicated config.\n    //   3. Non-NONE Semantic Context: There exists at least one, and for all\n    //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.\n    //\n    // From this, it is clear that NONE||anything==NONE.\n    //\n    var altToPred = [];\n    for (var i = 0; i < configs.items.length; i++) {\n        var c = configs.items[i];\n        if (ambigAlts.contains(c.alt)) {\n            altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);\n        }\n    }\n    var nPredAlts = 0;\n    for (i = 1; i < nalts + 1; i++) {\n        var pred = altToPred[i] || null;\n        if (pred === null) {\n            altToPred[i] = SemanticContext.NONE;\n        } else if (pred !== SemanticContext.NONE) {\n            nPredAlts += 1;\n        }\n    }\n    // nonambig alts are null in altToPred\n    if (nPredAlts === 0) {\n        altToPred = null;\n    }\n    if (this.debug) {\n        console.log(\"getPredsForAmbigAlts result \" + Utils.arrayToString(altToPred));\n    }\n    return altToPred;\n};\n\nParserATNSimulator.prototype.getPredicatePredictions = function (ambigAlts, altToPred) {\n    var pairs = [];\n    var containsPredicate = false;\n    for (var i = 1; i < altToPred.length; i++) {\n        var pred = altToPred[i];\n        // unpredicated is indicated by SemanticContext.NONE\n        if (ambigAlts !== null && ambigAlts.contains(i)) {\n            pairs.push(new PredPrediction(pred, i));\n        }\n        if (pred !== SemanticContext.NONE) {\n            containsPredicate = true;\n        }\n    }\n    if (!containsPredicate) {\n        return null;\n    }\n    return pairs;\n};\n\n//\n// This method is used to improve the localization of error messages by\n// choosing an alternative rather than throwing a\n// {@link NoViableAltException} in particular prediction scenarios where the\n// {@link //ERROR} state was reached during ATN simulation.\n//\n// <p>\n// The default implementation of this method uses the following\n// algorithm to identify an ATN configuration which successfully parsed the\n// decision entry rule. Choosing such an alternative ensures that the\n// {@link ParserRuleContext} returned by the calling rule will be complete\n// and valid, and the syntax error will be reported later at a more\n// localized location.</p>\n//\n// <ul>\n// <li>If a syntactically valid path or paths reach the end of the decision rule and\n// they are semantically valid if predicated, return the min associated alt.</li>\n// <li>Else, if a semantically invalid but syntactically valid path exist\n// or paths exist, return the minimum associated alt.\n// </li>\n// <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>\n// </ul>\n//\n// <p>\n// In some scenarios, the algorithm described above could predict an\n// alternative which will result in a {@link FailedPredicateException} in\n// the parser. Specifically, this could occur if the <em>only</em> configuration\n// capable of successfully parsing to the end of the decision rule is\n// blocked by a semantic predicate. By choosing this alternative within\n// {@link //adaptivePredict} instead of throwing a\n// {@link NoViableAltException}, the resulting\n// {@link FailedPredicateException} in the parser will identify the specific\n// predicate which is preventing the parser from successfully parsing the\n// decision rule, which helps developers identify and correct logic errors\n// in semantic predicates.\n// </p>\n//\n// @param configs The ATN configurations which were valid immediately before\n// the {@link //ERROR} state was reached\n// @param outerContext The is the \\gamma_0 initial parser context from the paper\n// or the parser stack at the instant before prediction commences.\n//\n// @return The value to return from {@link //adaptivePredict}, or\n// {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not\n// identified and {@link //adaptivePredict} should report an error instead.\n//\nParserATNSimulator.prototype.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule = function (configs, outerContext) {\n    var cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);\n    var semValidConfigs = cfgs[0];\n    var semInvalidConfigs = cfgs[1];\n    var alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);\n    if (alt !== ATN.INVALID_ALT_NUMBER) {\n        // semantically/syntactically viable path exists\n        return alt;\n    }\n    // Is there a syntactically valid path with a failed pred?\n    if (semInvalidConfigs.items.length > 0) {\n        alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);\n        if (alt !== ATN.INVALID_ALT_NUMBER) {\n            // syntactically viable path exists\n            return alt;\n        }\n    }\n    return ATN.INVALID_ALT_NUMBER;\n};\n\nParserATNSimulator.prototype.getAltThatFinishedDecisionEntryRule = function (configs) {\n    var alts = [];\n    for (var i = 0; i < configs.items.length; i++) {\n        var c = configs.items[i];\n        if (c.reachesIntoOuterContext > 0 || c.state instanceof RuleStopState && c.context.hasEmptyPath()) {\n            if (alts.indexOf(c.alt) < 0) {\n                alts.push(c.alt);\n            }\n        }\n    }\n    if (alts.length === 0) {\n        return ATN.INVALID_ALT_NUMBER;\n    } else {\n        return Math.min.apply(null, alts);\n    }\n};\n// Walk the list of configurations and split them according to\n//  those that have preds evaluating to true/false.  If no pred, assume\n//  true pred and include in succeeded set.  Returns Pair of sets.\n//\n//  Create a new set so as not to alter the incoming parameter.\n//\n//  Assumption: the input stream has been restored to the starting point\n//  prediction, which is where predicates need to evaluate.\n//\nParserATNSimulator.prototype.splitAccordingToSemanticValidity = function (configs, outerContext) {\n    var succeeded = new ATNConfigSet(configs.fullCtx);\n    var failed = new ATNConfigSet(configs.fullCtx);\n    for (var i = 0; i < configs.items.length; i++) {\n        var c = configs.items[i];\n        if (c.semanticContext !== SemanticContext.NONE) {\n            var predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);\n            if (predicateEvaluationResult) {\n                succeeded.add(c);\n            } else {\n                failed.add(c);\n            }\n        } else {\n            succeeded.add(c);\n        }\n    }\n    return [succeeded, failed];\n};\n\n// Look through a list of predicate/alt pairs, returning alts for the\n//  pairs that win. A {@code NONE} predicate indicates an alt containing an\n//  unpredicated config which behaves as \"always true.\" If !complete\n//  then we stop at the first predicate that evaluates to true. This\n//  includes pairs with null predicates.\n//\nParserATNSimulator.prototype.evalSemanticContext = function (predPredictions, outerContext, complete) {\n    var predictions = new BitSet();\n    for (var i = 0; i < predPredictions.length; i++) {\n        var pair = predPredictions[i];\n        if (pair.pred === SemanticContext.NONE) {\n            predictions.add(pair.alt);\n            if (!complete) {\n                break;\n            }\n            continue;\n        }\n        var predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);\n        if (this.debug || this.dfa_debug) {\n            console.log(\"eval pred \" + pair + \"=\" + predicateEvaluationResult);\n        }\n        if (predicateEvaluationResult) {\n            if (this.debug || this.dfa_debug) {\n                console.log(\"PREDICT \" + pair.alt);\n            }\n            predictions.add(pair.alt);\n            if (!complete) {\n                break;\n            }\n        }\n    }\n    return predictions;\n};\n\n// TODO: If we are doing predicates, there is no point in pursuing\n//     closure operations if we reach a DFA state that uniquely predicts\n//     alternative. We will not be caching that DFA state and it is a\n//     waste to pursue the closure. Might have to advance when we do\n//     ambig detection thought :(\n//\n\nParserATNSimulator.prototype.closure = function (config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {\n    var initialDepth = 0;\n    this.closureCheckingStopState(config, configs, closureBusy, collectPredicates, fullCtx, initialDepth, treatEofAsEpsilon);\n};\n\nParserATNSimulator.prototype.closureCheckingStopState = function (config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {\n    if (this.debug || this.debug_closure) {\n        console.log(\"closure(\" + config.toString(this.parser, true) + \")\");\n        // console.log(\"configs(\" + configs.toString() + \")\");\n        if (config.reachesIntoOuterContext > 50) {\n            throw \"problem\";\n        }\n    }\n    if (config.state instanceof RuleStopState) {\n        // We hit rule end. If we have context info, use it\n        // run thru all possible stack tops in ctx\n        if (!config.context.isEmpty()) {\n            for (var i = 0; i < config.context.length; i++) {\n                if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {\n                    if (fullCtx) {\n                        configs.add(new ATNConfig({ state: config.state, context: PredictionContext.EMPTY }, config), this.mergeCache);\n                        continue;\n                    } else {\n                        // we have no context info, just chase follow links (if greedy)\n                        if (this.debug) {\n                            console.log(\"FALLING off rule \" + this.getRuleName(config.state.ruleIndex));\n                        }\n                        this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);\n                    }\n                    continue;\n                }\n                var returnState = this.atn.states[config.context.getReturnState(i)];\n                var newContext = config.context.getParent(i); // \"pop\" return state\n                var parms = { state: returnState, alt: config.alt, context: newContext, semanticContext: config.semanticContext };\n                var c = new ATNConfig(parms, null);\n                // While we have context to pop back from, we may have\n                // gotten that context AFTER having falling off a rule.\n                // Make sure we track that we are now out of context.\n                c.reachesIntoOuterContext = config.reachesIntoOuterContext;\n                this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);\n            }\n            return;\n        } else if (fullCtx) {\n            // reached end of start rule\n            configs.add(config, this.mergeCache);\n            return;\n        } else {\n            // else if we have no context info, just chase follow links (if greedy)\n            if (this.debug) {\n                console.log(\"FALLING off rule \" + this.getRuleName(config.state.ruleIndex));\n            }\n        }\n    }\n    this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);\n};\n\n// Do the actual work of walking epsilon edges//\nParserATNSimulator.prototype.closure_ = function (config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {\n    var p = config.state;\n    // optimization\n    if (!p.epsilonOnlyTransitions) {\n        configs.add(config, this.mergeCache);\n        // make sure to not return here, because EOF transitions can act as\n        // both epsilon transitions and non-epsilon transitions.\n    }\n    for (var i = 0; i < p.transitions.length; i++) {\n        if (i == 0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config)) continue;\n\n        var t = p.transitions[i];\n        var continueCollecting = collectPredicates && !(t instanceof ActionTransition);\n        var c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);\n        if (c !== null) {\n            if (!t.isEpsilon && closureBusy.add(c) !== c) {\n                // avoid infinite recursion for EOF* and EOF+\n                continue;\n            }\n            var newDepth = depth;\n            if (config.state instanceof RuleStopState) {\n                // target fell off end of rule; mark resulting c as having dipped into outer context\n                // We can't get here if incoming config was rule stop and we had context\n                // track how far we dip into outer context.  Might\n                // come in handy and we avoid evaluating context dependent\n                // preds if this is > 0.\n\n                if (closureBusy.add(c) !== c) {\n                    // avoid infinite recursion for right-recursive rules\n                    continue;\n                }\n\n                if (this._dfa !== null && this._dfa.precedenceDfa) {\n                    if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {\n                        c.precedenceFilterSuppressed = true;\n                    }\n                }\n\n                c.reachesIntoOuterContext += 1;\n                configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method\n                newDepth -= 1;\n                if (this.debug) {\n                    console.log(\"dips into outer ctx: \" + c);\n                }\n            } else if (t instanceof RuleTransition) {\n                // latch when newDepth goes negative - once we step out of the entry context we can't return\n                if (newDepth >= 0) {\n                    newDepth += 1;\n                }\n            }\n            this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);\n        }\n    }\n};\n\nParserATNSimulator.prototype.canDropLoopEntryEdgeInLeftRecursiveRule = function (config) {\n    // return False\n    var p = config.state;\n    // First check to see if we are in StarLoopEntryState generated during\n    // left-recursion elimination. For efficiency, also check if\n    // the context has an empty stack case. If so, it would mean\n    // global FOLLOW so we can't perform optimization\n    // Are we the special loop entry/exit state? or SLL wildcard\n    if (p.stateType != ATNState.STAR_LOOP_ENTRY) return false;\n    if (p.stateType != ATNState.STAR_LOOP_ENTRY || !p.isPrecedenceDecision || config.context.isEmpty() || config.context.hasEmptyPath()) return false;\n\n    // Require all return states to return back to the same rule that p is in.\n    var numCtxs = config.context.length;\n    for (var i = 0; i < numCtxs; i++) {\n        // for each stack context\n        var returnState = this.atn.states[config.context.getReturnState(i)];\n        if (returnState.ruleIndex != p.ruleIndex) return false;\n    }\n\n    var decisionStartState = p.transitions[0].target;\n    var blockEndStateNum = decisionStartState.endState.stateNumber;\n    var blockEndState = this.atn.states[blockEndStateNum];\n\n    // Verify that the top of each stack context leads to loop entry/exit\n    // state through epsilon edges and w/o leaving rule.\n    for (var i = 0; i < numCtxs; i++) {\n        // for each stack context\n        var returnStateNumber = config.context.getReturnState(i);\n        var returnState = this.atn.states[returnStateNumber];\n        // all states must have single outgoing epsilon edge\n        if (returnState.transitions.length != 1 || !returnState.transitions[0].isEpsilon) return false;\n\n        // Look for prefix op case like 'not expr', (' type ')' expr\n        var returnStateTarget = returnState.transitions[0].target;\n        if (returnState.stateType == ATNState.BLOCK_END && returnStateTarget == p) continue;\n\n        // Look for 'expr op expr' or case where expr's return state is block end\n        // of (...)* internal block; the block end points to loop back\n        // which points to p but we don't need to check that\n        if (returnState == blockEndState) continue;\n\n        // Look for ternary expr ? expr : expr. The return state points at block end,\n        // which points at loop entry state\n        if (returnStateTarget == blockEndState) continue;\n\n        // Look for complex prefix 'between expr and expr' case where 2nd expr's\n        // return state points at block end state of (...)* internal block\n        if (returnStateTarget.stateType == ATNState.BLOCK_END && returnStateTarget.transitions.length == 1 && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target == p) continue;\n\n        // anything else ain't conforming\n        return false;\n    }\n    return true;\n};\n\nParserATNSimulator.prototype.getRuleName = function (index) {\n    if (this.parser !== null && index >= 0) {\n        return this.parser.ruleNames[index];\n    } else {\n        return \"<rule \" + index + \">\";\n    }\n};\n\nParserATNSimulator.prototype.getEpsilonTarget = function (config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {\n    switch (t.serializationType) {\n        case Transition.RULE:\n            return this.ruleTransition(config, t);\n        case Transition.PRECEDENCE:\n            return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);\n        case Transition.PREDICATE:\n            return this.predTransition(config, t, collectPredicates, inContext, fullCtx);\n        case Transition.ACTION:\n            return this.actionTransition(config, t);\n        case Transition.EPSILON:\n            return new ATNConfig({ state: t.target }, config);\n        case Transition.ATOM:\n        case Transition.RANGE:\n        case Transition.SET:\n            // EOF transitions act like epsilon transitions after the first EOF\n            // transition is traversed\n            if (treatEofAsEpsilon) {\n                if (t.matches(Token.EOF, 0, 1)) {\n                    return new ATNConfig({ state: t.target }, config);\n                }\n            }\n            return null;\n        default:\n            return null;\n    }\n};\n\nParserATNSimulator.prototype.actionTransition = function (config, t) {\n    if (this.debug) {\n        var index = t.actionIndex == -1 ? 65535 : t.actionIndex;\n        console.log(\"ACTION edge \" + t.ruleIndex + \":\" + index);\n    }\n    return new ATNConfig({ state: t.target }, config);\n};\n\nParserATNSimulator.prototype.precedenceTransition = function (config, pt, collectPredicates, inContext, fullCtx) {\n    if (this.debug) {\n        console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" + pt.precedence + \">=_p, ctx dependent=true\");\n        if (this.parser !== null) {\n            console.log(\"context surrounding pred is \" + Utils.arrayToString(this.parser.getRuleInvocationStack()));\n        }\n    }\n    var c = null;\n    if (collectPredicates && inContext) {\n        if (fullCtx) {\n            // In full context mode, we can evaluate predicates on-the-fly\n            // during closure, which dramatically reduces the size of\n            // the config sets. It also obviates the need to test predicates\n            // later during conflict resolution.\n            var currentPosition = this._input.index;\n            this._input.seek(this._startIndex);\n            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);\n            this._input.seek(currentPosition);\n            if (predSucceeds) {\n                c = new ATNConfig({ state: pt.target }, config); // no pred context\n            }\n        } else {\n            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());\n            c = new ATNConfig({ state: pt.target, semanticContext: newSemCtx }, config);\n        }\n    } else {\n        c = new ATNConfig({ state: pt.target }, config);\n    }\n    if (this.debug) {\n        console.log(\"config from pred transition=\" + c);\n    }\n    return c;\n};\n\nParserATNSimulator.prototype.predTransition = function (config, pt, collectPredicates, inContext, fullCtx) {\n    if (this.debug) {\n        console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" + pt.ruleIndex + \":\" + pt.predIndex + \", ctx dependent=\" + pt.isCtxDependent);\n        if (this.parser !== null) {\n            console.log(\"context surrounding pred is \" + Utils.arrayToString(this.parser.getRuleInvocationStack()));\n        }\n    }\n    var c = null;\n    if (collectPredicates && (pt.isCtxDependent && inContext || !pt.isCtxDependent)) {\n        if (fullCtx) {\n            // In full context mode, we can evaluate predicates on-the-fly\n            // during closure, which dramatically reduces the size of\n            // the config sets. It also obviates the need to test predicates\n            // later during conflict resolution.\n            var currentPosition = this._input.index;\n            this._input.seek(this._startIndex);\n            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);\n            this._input.seek(currentPosition);\n            if (predSucceeds) {\n                c = new ATNConfig({ state: pt.target }, config); // no pred context\n            }\n        } else {\n            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());\n            c = new ATNConfig({ state: pt.target, semanticContext: newSemCtx }, config);\n        }\n    } else {\n        c = new ATNConfig({ state: pt.target }, config);\n    }\n    if (this.debug) {\n        console.log(\"config from pred transition=\" + c);\n    }\n    return c;\n};\n\nParserATNSimulator.prototype.ruleTransition = function (config, t) {\n    if (this.debug) {\n        console.log(\"CALL rule \" + this.getRuleName(t.target.ruleIndex) + \", ctx=\" + config.context);\n    }\n    var returnState = t.followState;\n    var newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber);\n    return new ATNConfig({ state: t.target, context: newContext }, config);\n};\n\nParserATNSimulator.prototype.getConflictingAlts = function (configs) {\n    var altsets = PredictionMode.getConflictingAltSubsets(configs);\n    return PredictionMode.getAlts(altsets);\n};\n\n// Sam pointed out a problem with the previous definition, v3, of\n// ambiguous states. If we have another state associated with conflicting\n// alternatives, we should keep going. For example, the following grammar\n//\n// s : (ID | ID ID?) ';' ;\n//\n// When the ATN simulation reaches the state before ';', it has a DFA\n// state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally\n// 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node\n// because alternative to has another way to continue, via [6|2|[]].\n// The key is that we have a single state that has config's only associated\n// with a single alternative, 2, and crucially the state transitions\n// among the configurations are all non-epsilon transitions. That means\n// we don't consider any conflicts that include alternative 2. So, we\n// ignore the conflict between alts 1 and 2. We ignore a set of\n// conflicting alts when there is an intersection with an alternative\n// associated with a single alt state in the state&rarr;config-list map.\n//\n// It's also the case that we might have two conflicting configurations but\n// also a 3rd nonconflicting configuration for a different alternative:\n// [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:\n//\n// a : A | A | A B ;\n//\n// After matching input A, we reach the stop state for rule A, state 1.\n// State 8 is the state right before B. Clearly alternatives 1 and 2\n// conflict and no amount of further lookahead will separate the two.\n// However, alternative 3 will be able to continue and so we do not\n// stop working on this state. In the previous example, we're concerned\n// with states associated with the conflicting alternatives. Here alt\n// 3 is not associated with the conflicting configs, but since we can continue\n// looking for input reasonably, I don't declare the state done. We\n// ignore a set of conflicting alts when we have an alternative\n// that we still need to pursue.\n//\n\nParserATNSimulator.prototype.getConflictingAltsOrUniqueAlt = function (configs) {\n    var conflictingAlts = null;\n    if (configs.uniqueAlt !== ATN.INVALID_ALT_NUMBER) {\n        conflictingAlts = new BitSet();\n        conflictingAlts.add(configs.uniqueAlt);\n    } else {\n        conflictingAlts = configs.conflictingAlts;\n    }\n    return conflictingAlts;\n};\n\nParserATNSimulator.prototype.getTokenName = function (t) {\n    if (t === Token.EOF) {\n        return \"EOF\";\n    }\n    if (this.parser !== null && this.parser.literalNames !== null) {\n        if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {\n            console.log(\"\" + t + \" ttype out of range: \" + this.parser.literalNames);\n            console.log(\"\" + this.parser.getInputStream().getTokens());\n        } else {\n            var name = this.parser.literalNames[t] || this.parser.symbolicNames[t];\n            return name + \"<\" + t + \">\";\n        }\n    }\n    return \"\" + t;\n};\n\nParserATNSimulator.prototype.getLookaheadName = function (input) {\n    return this.getTokenName(input.LA(1));\n};\n\n// Used for debugging in adaptivePredict around execATN but I cut\n//  it out for clarity now that alg. works well. We can leave this\n//  \"dead\" code for a bit.\n//\nParserATNSimulator.prototype.dumpDeadEndConfigs = function (nvae) {\n    console.log(\"dead end configs: \");\n    var decs = nvae.getDeadEndConfigs();\n    for (var i = 0; i < decs.length; i++) {\n        var c = decs[i];\n        var trans = \"no edges\";\n        if (c.state.transitions.length > 0) {\n            var t = c.state.transitions[0];\n            if (t instanceof AtomTransition) {\n                trans = \"Atom \" + this.getTokenName(t.label);\n            } else if (t instanceof SetTransition) {\n                var neg = t instanceof NotSetTransition;\n                trans = (neg ? \"~\" : \"\") + \"Set \" + t.set;\n            }\n        }\n        console.error(c.toString(this.parser, true) + \":\" + trans);\n    }\n};\n\nParserATNSimulator.prototype.noViableAlt = function (input, outerContext, configs, startIndex) {\n    return new NoViableAltException(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);\n};\n\nParserATNSimulator.prototype.getUniqueAlt = function (configs) {\n    var alt = ATN.INVALID_ALT_NUMBER;\n    for (var i = 0; i < configs.items.length; i++) {\n        var c = configs.items[i];\n        if (alt === ATN.INVALID_ALT_NUMBER) {\n            alt = c.alt; // found first alt\n        } else if (c.alt !== alt) {\n            return ATN.INVALID_ALT_NUMBER;\n        }\n    }\n    return alt;\n};\n\n//\n// Add an edge to the DFA, if possible. This method calls\n// {@link //addDFAState} to ensure the {@code to} state is present in the\n// DFA. If {@code from} is {@code null}, or if {@code t} is outside the\n// range of edges that can be represented in the DFA tables, this method\n// returns without adding the edge to the DFA.\n//\n// <p>If {@code to} is {@code null}, this method returns {@code null}.\n// Otherwise, this method returns the {@link DFAState} returned by calling\n// {@link //addDFAState} for the {@code to} state.</p>\n//\n// @param dfa The DFA\n// @param from The source state for the edge\n// @param t The input symbol\n// @param to The target state for the edge\n//\n// @return If {@code to} is {@code null}, this method returns {@code null};\n// otherwise this method returns the result of calling {@link //addDFAState}\n// on {@code to}\n//\nParserATNSimulator.prototype.addDFAEdge = function (dfa, from_, t, to) {\n    if (this.debug) {\n        console.log(\"EDGE \" + from_ + \" -> \" + to + \" upon \" + this.getTokenName(t));\n    }\n    if (to === null) {\n        return null;\n    }\n    to = this.addDFAState(dfa, to); // used existing if possible not incoming\n    if (from_ === null || t < -1 || t > this.atn.maxTokenType) {\n        return to;\n    }\n    if (from_.edges === null) {\n        from_.edges = [];\n    }\n    from_.edges[t + 1] = to; // connect\n\n    if (this.debug) {\n        var literalNames = this.parser === null ? null : this.parser.literalNames;\n        var symbolicNames = this.parser === null ? null : this.parser.symbolicNames;\n        console.log(\"DFA=\\n\" + dfa.toString(literalNames, symbolicNames));\n    }\n    return to;\n};\n//\n// Add state {@code D} to the DFA if it is not already present, and return\n// the actual instance stored in the DFA. If a state equivalent to {@code D}\n// is already in the DFA, the existing state is returned. Otherwise this\n// method returns {@code D} after adding it to the DFA.\n//\n// <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and\n// does not change the DFA.</p>\n//\n// @param dfa The dfa\n// @param D The DFA state to add\n// @return The state stored in the DFA. This will be either the existing\n// state if {@code D} is already in the DFA, or {@code D} itself if the\n// state was not already present.\n//\nParserATNSimulator.prototype.addDFAState = function (dfa, D) {\n    if (D == ATNSimulator.ERROR) {\n        return D;\n    }\n    var existing = dfa.states.get(D);\n    if (existing !== null) {\n        return existing;\n    }\n    D.stateNumber = dfa.states.length;\n    if (!D.configs.readOnly) {\n        D.configs.optimizeConfigs(this);\n        D.configs.setReadonly(true);\n    }\n    dfa.states.add(D);\n    if (this.debug) {\n        console.log(\"adding new DFA state: \" + D);\n    }\n    return D;\n};\n\nParserATNSimulator.prototype.reportAttemptingFullContext = function (dfa, conflictingAlts, configs, startIndex, stopIndex) {\n    if (this.debug || this.retry_debug) {\n        var interval = new Interval(startIndex, stopIndex + 1);\n        console.log(\"reportAttemptingFullContext decision=\" + dfa.decision + \":\" + configs + \", input=\" + this.parser.getTokenStream().getText(interval));\n    }\n    if (this.parser !== null) {\n        this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);\n    }\n};\n\nParserATNSimulator.prototype.reportContextSensitivity = function (dfa, prediction, configs, startIndex, stopIndex) {\n    if (this.debug || this.retry_debug) {\n        var interval = new Interval(startIndex, stopIndex + 1);\n        console.log(\"reportContextSensitivity decision=\" + dfa.decision + \":\" + configs + \", input=\" + this.parser.getTokenStream().getText(interval));\n    }\n    if (this.parser !== null) {\n        this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);\n    }\n};\n\n// If context sensitive parsing, we know it's ambiguity not conflict//\nParserATNSimulator.prototype.reportAmbiguity = function (dfa, D, startIndex, stopIndex, exact, ambigAlts, configs) {\n    if (this.debug || this.retry_debug) {\n        var interval = new Interval(startIndex, stopIndex + 1);\n        console.log(\"reportAmbiguity \" + ambigAlts + \":\" + configs + \", input=\" + this.parser.getTokenStream().getText(interval));\n    }\n    if (this.parser !== null) {\n        this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);\n    }\n};\n\nexports.ParserATNSimulator = ParserATNSimulator;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ParserATNSimulator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/PredictionMode.js":
/*!******************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/atn/PredictionMode.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n//\n// This enumeration defines the prediction modes available in ANTLR 4 along with\n// utility methods for analyzing configuration sets for conflicts and/or\n// ambiguities.\n\nvar Set = (__webpack_require__(/*! ./../Utils */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Utils.js\").Set);\nvar Map = (__webpack_require__(/*! ./../Utils */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Utils.js\").Map);\nvar BitSet = (__webpack_require__(/*! ./../Utils */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Utils.js\").BitSet);\nvar AltDict = (__webpack_require__(/*! ./../Utils */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Utils.js\").AltDict);\nvar ATN = (__webpack_require__(/*! ./ATN */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATN.js\").ATN);\nvar RuleStopState = (__webpack_require__(/*! ./ATNState */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNState.js\").RuleStopState);\nvar ATNConfigSet = (__webpack_require__(/*! ./ATNConfigSet */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNConfigSet.js\").ATNConfigSet);\nvar ATNConfig = (__webpack_require__(/*! ./ATNConfig */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNConfig.js\").ATNConfig);\nvar SemanticContext = (__webpack_require__(/*! ./SemanticContext */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/SemanticContext.js\").SemanticContext);\nvar Hash = (__webpack_require__(/*! ../Utils */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Utils.js\").Hash);\nvar hashStuff = (__webpack_require__(/*! ./../Utils */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Utils.js\").hashStuff);\nvar equalArrays = (__webpack_require__(/*! ./../Utils */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Utils.js\").equalArrays);\n\nfunction PredictionMode() {\n    return this;\n}\n\n//\n// The SLL(*) prediction mode. This prediction mode ignores the current\n// parser context when making predictions. This is the fastest prediction\n// mode, and provides correct results for many grammars. This prediction\n// mode is more powerful than the prediction mode provided by ANTLR 3, but\n// may result in syntax errors for grammar and input combinations which are\n// not SLL.\n//\n// <p>\n// When using this prediction mode, the parser will either return a correct\n// parse tree (i.e. the same parse tree that would be returned with the\n// {@link //LL} prediction mode), or it will report a syntax error. If a\n// syntax error is encountered when using the {@link //SLL} prediction mode,\n// it may be due to either an actual syntax error in the input or indicate\n// that the particular combination of grammar and input requires the more\n// powerful {@link //LL} prediction abilities to complete successfully.</p>\n//\n// <p>\n// This prediction mode does not provide any guarantees for prediction\n// behavior for syntactically-incorrect inputs.</p>\n//\nPredictionMode.SLL = 0;\n//\n// The LL(*) prediction mode. This prediction mode allows the current parser\n// context to be used for resolving SLL conflicts that occur during\n// prediction. This is the fastest prediction mode that guarantees correct\n// parse results for all combinations of grammars with syntactically correct\n// inputs.\n//\n// <p>\n// When using this prediction mode, the parser will make correct decisions\n// for all syntactically-correct grammar and input combinations. However, in\n// cases where the grammar is truly ambiguous this prediction mode might not\n// report a precise answer for <em>exactly which</em> alternatives are\n// ambiguous.</p>\n//\n// <p>\n// This prediction mode does not provide any guarantees for prediction\n// behavior for syntactically-incorrect inputs.</p>\n//\nPredictionMode.LL = 1;\n//\n// The LL(*) prediction mode with exact ambiguity detection. In addition to\n// the correctness guarantees provided by the {@link //LL} prediction mode,\n// this prediction mode instructs the prediction algorithm to determine the\n// complete and exact set of ambiguous alternatives for every ambiguous\n// decision encountered while parsing.\n//\n// <p>\n// This prediction mode may be used for diagnosing ambiguities during\n// grammar development. Due to the performance overhead of calculating sets\n// of ambiguous alternatives, this prediction mode should be avoided when\n// the exact results are not necessary.</p>\n//\n// <p>\n// This prediction mode does not provide any guarantees for prediction\n// behavior for syntactically-incorrect inputs.</p>\n//\nPredictionMode.LL_EXACT_AMBIG_DETECTION = 2;\n\n//\n// Computes the SLL prediction termination condition.\n//\n// <p>\n// This method computes the SLL prediction termination condition for both of\n// the following cases.</p>\n//\n// <ul>\n// <li>The usual SLL+LL fallback upon SLL conflict</li>\n// <li>Pure SLL without LL fallback</li>\n// </ul>\n//\n// <p><strong>COMBINED SLL+LL PARSING</strong></p>\n//\n// <p>When LL-fallback is enabled upon SLL conflict, correct predictions are\n// ensured regardless of how the termination condition is computed by this\n// method. Due to the substantially higher cost of LL prediction, the\n// prediction should only fall back to LL when the additional lookahead\n// cannot lead to a unique SLL prediction.</p>\n//\n// <p>Assuming combined SLL+LL parsing, an SLL configuration set with only\n// conflicting subsets should fall back to full LL, even if the\n// configuration sets don't resolve to the same alternative (e.g.\n// {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting\n// configuration, SLL could continue with the hopes that more lookahead will\n// resolve via one of those non-conflicting configurations.</p>\n//\n// <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)\n// stops when it sees only conflicting configuration subsets. In contrast,\n// full LL keeps going when there is uncertainty.</p>\n//\n// <p><strong>HEURISTIC</strong></p>\n//\n// <p>As a heuristic, we stop prediction when we see any conflicting subset\n// unless we see a state that only has one alternative associated with it.\n// The single-alt-state thing lets prediction continue upon rules like\n// (otherwise, it would admit defeat too soon):</p>\n//\n// <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>\n//\n// <p>When the ATN simulation reaches the state before {@code ';'}, it has a\n// DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally\n// {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop\n// processing this node because alternative to has another way to continue,\n// via {@code [6|2|[]]}.</p>\n//\n// <p>It also let's us continue for this rule:</p>\n//\n// <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>\n//\n// <p>After matching input A, we reach the stop state for rule A, state 1.\n// State 8 is the state right before B. Clearly alternatives 1 and 2\n// conflict and no amount of further lookahead will separate the two.\n// However, alternative 3 will be able to continue and so we do not stop\n// working on this state. In the previous example, we're concerned with\n// states associated with the conflicting alternatives. Here alt 3 is not\n// associated with the conflicting configs, but since we can continue\n// looking for input reasonably, don't declare the state done.</p>\n//\n// <p><strong>PURE SLL PARSING</strong></p>\n//\n// <p>To handle pure SLL parsing, all we have to do is make sure that we\n// combine stack contexts for configurations that differ only by semantic\n// predicate. From there, we can do the usual SLL termination heuristic.</p>\n//\n// <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>\n//\n// <p>SLL decisions don't evaluate predicates until after they reach DFA stop\n// states because they need to create the DFA cache that works in all\n// semantic situations. In contrast, full LL evaluates predicates collected\n// during start state computation so it can ignore predicates thereafter.\n// This means that SLL termination detection can totally ignore semantic\n// predicates.</p>\n//\n// <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not\n// semantic predicate contexts so we might see two configurations like the\n// following.</p>\n//\n// <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>\n//\n// <p>Before testing these configurations against others, we have to merge\n// {@code x} and {@code x'} (without modifying the existing configurations).\n// For example, we test {@code (x+x')==x''} when looking for conflicts in\n// the following configurations.</p>\n//\n// <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>\n//\n// <p>If the configuration set has predicates (as indicated by\n// {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of\n// the configurations to strip out all of the predicates so that a standard\n// {@link ATNConfigSet} will merge everything ignoring predicates.</p>\n//\nPredictionMode.hasSLLConflictTerminatingPrediction = function (mode, configs) {\n    // Configs in rule stop states indicate reaching the end of the decision\n    // rule (local context) or end of start rule (full context). If all\n    // configs meet this condition, then none of the configurations is able\n    // to match additional input so we terminate prediction.\n    //\n    if (PredictionMode.allConfigsInRuleStopStates(configs)) {\n        return true;\n    }\n    // pure SLL mode parsing\n    if (mode === PredictionMode.SLL) {\n        // Don't bother with combining configs from different semantic\n        // contexts if we can fail over to full LL; costs more time\n        // since we'll often fail over anyway.\n        if (configs.hasSemanticContext) {\n            // dup configs, tossing out semantic predicates\n            var dup = new ATNConfigSet();\n            for (var i = 0; i < configs.items.length; i++) {\n                var c = configs.items[i];\n                c = new ATNConfig({ semanticContext: SemanticContext.NONE }, c);\n                dup.add(c);\n            }\n            configs = dup;\n        }\n        // now we have combined contexts for configs with dissimilar preds\n    }\n    // pure SLL or combined SLL+LL mode parsing\n    var altsets = PredictionMode.getConflictingAltSubsets(configs);\n    return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);\n};\n\n// Checks if any configuration in {@code configs} is in a\n// {@link RuleStopState}. Configurations meeting this condition have reached\n// the end of the decision rule (local context) or end of start rule (full\n// context).\n//\n// @param configs the configuration set to test\n// @return {@code true} if any configuration in {@code configs} is in a\n// {@link RuleStopState}, otherwise {@code false}\nPredictionMode.hasConfigInRuleStopState = function (configs) {\n    for (var i = 0; i < configs.items.length; i++) {\n        var c = configs.items[i];\n        if (c.state instanceof RuleStopState) {\n            return true;\n        }\n    }\n    return false;\n};\n\n// Checks if all configurations in {@code configs} are in a\n// {@link RuleStopState}. Configurations meeting this condition have reached\n// the end of the decision rule (local context) or end of start rule (full\n// context).\n//\n// @param configs the configuration set to test\n// @return {@code true} if all configurations in {@code configs} are in a\n// {@link RuleStopState}, otherwise {@code false}\nPredictionMode.allConfigsInRuleStopStates = function (configs) {\n    for (var i = 0; i < configs.items.length; i++) {\n        var c = configs.items[i];\n        if (!(c.state instanceof RuleStopState)) {\n            return false;\n        }\n    }\n    return true;\n};\n\n//\n// Full LL prediction termination.\n//\n// <p>Can we stop looking ahead during ATN simulation or is there some\n// uncertainty as to which alternative we will ultimately pick, after\n// consuming more input? Even if there are partial conflicts, we might know\n// that everything is going to resolve to the same minimum alternative. That\n// means we can stop since no more lookahead will change that fact. On the\n// other hand, there might be multiple conflicts that resolve to different\n// minimums. That means we need more look ahead to decide which of those\n// alternatives we should predict.</p>\n//\n// <p>The basic idea is to split the set of configurations {@code C}, into\n// conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with\n// non-conflicting configurations. Two configurations conflict if they have\n// identical {@link ATNConfig//state} and {@link ATNConfig//context} values\n// but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}\n// and {@code (s, j, ctx, _)} for {@code i!=j}.</p>\n//\n// <p>Reduce these configuration subsets to the set of possible alternatives.\n// You can compute the alternative subsets in one pass as follows:</p>\n//\n// <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in\n// {@code C} holding {@code s} and {@code ctx} fixed.</p>\n//\n// <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>\n//\n// <pre>\n// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not\n// alt and not pred\n// </pre>\n//\n// <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>\n//\n// <p>If {@code |A_s,ctx|=1} then there is no conflict associated with\n// {@code s} and {@code ctx}.</p>\n//\n// <p>Reduce the subsets to singletons by choosing a minimum of each subset. If\n// the union of these alternative subsets is a singleton, then no amount of\n// more lookahead will help us. We will always pick that alternative. If,\n// however, there is more than one alternative, then we are uncertain which\n// alternative to predict and must continue looking for resolution. We may\n// or may not discover an ambiguity in the future, even if there are no\n// conflicting subsets this round.</p>\n//\n// <p>The biggest sin is to terminate early because it means we've made a\n// decision but were uncertain as to the eventual outcome. We haven't used\n// enough lookahead. On the other hand, announcing a conflict too late is no\n// big deal; you will still have the conflict. It's just inefficient. It\n// might even look until the end of file.</p>\n//\n// <p>No special consideration for semantic predicates is required because\n// predicates are evaluated on-the-fly for full LL prediction, ensuring that\n// no configuration contains a semantic context during the termination\n// check.</p>\n//\n// <p><strong>CONFLICTING CONFIGS</strong></p>\n//\n// <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict\n// when {@code i!=j} but {@code x=x'}. Because we merge all\n// {@code (s, i, _)} configurations together, that means that there are at\n// most {@code n} configurations associated with state {@code s} for\n// {@code n} possible alternatives in the decision. The merged stacks\n// complicate the comparison of configuration contexts {@code x} and\n// {@code x'}. Sam checks to see if one is a subset of the other by calling\n// merge and checking to see if the merged result is either {@code x} or\n// {@code x'}. If the {@code x} associated with lowest alternative {@code i}\n// is the superset, then {@code i} is the only possible prediction since the\n// others resolve to {@code min(i)} as well. However, if {@code x} is\n// associated with {@code j>i} then at least one stack configuration for\n// {@code j} is not in conflict with alternative {@code i}. The algorithm\n// should keep going, looking for more lookahead due to the uncertainty.</p>\n//\n// <p>For simplicity, I'm doing a equality check between {@code x} and\n// {@code x'} that lets the algorithm continue to consume lookahead longer\n// than necessary. The reason I like the equality is of course the\n// simplicity but also because that is the test you need to detect the\n// alternatives that are actually in conflict.</p>\n//\n// <p><strong>CONTINUE/STOP RULE</strong></p>\n//\n// <p>Continue if union of resolved alternative sets from non-conflicting and\n// conflicting alternative subsets has more than one alternative. We are\n// uncertain about which alternative to predict.</p>\n//\n// <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which\n// alternatives are still in the running for the amount of input we've\n// consumed at this point. The conflicting sets let us to strip away\n// configurations that won't lead to more states because we resolve\n// conflicts to the configuration with a minimum alternate for the\n// conflicting set.</p>\n//\n// <p><strong>CASES</strong></p>\n//\n// <ul>\n//\n// <li>no conflicts and more than 1 alternative in set =&gt; continue</li>\n//\n// <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},\n// {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set\n// {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =\n// {@code {1,3}} =&gt; continue\n// </li>\n//\n// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},\n// {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set\n// {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =\n// {@code {1}} =&gt; stop and predict 1</li>\n//\n// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},\n// {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U\n// {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce\n// ambiguity {@code {1,2}}</li>\n//\n// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},\n// {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U\n// {@code {2}} = {@code {1,2}} =&gt; continue</li>\n//\n// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},\n// {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U\n// {@code {3}} = {@code {1,3}} =&gt; continue</li>\n//\n// </ul>\n//\n// <p><strong>EXACT AMBIGUITY DETECTION</strong></p>\n//\n// <p>If all states report the same conflicting set of alternatives, then we\n// know we have the exact ambiguity set.</p>\n//\n// <p><code>|A_<em>i</em>|&gt;1</code> and\n// <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>\n//\n// <p>In other words, we continue examining lookahead until all {@code A_i}\n// have more than one alternative and all {@code A_i} are the same. If\n// {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate\n// because the resolved set is {@code {1}}. To determine what the real\n// ambiguity is, we have to know whether the ambiguity is between one and\n// two or one and three so we keep going. We can only stop prediction when\n// we need exact ambiguity detection when the sets look like\n// {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>\n//\nPredictionMode.resolvesToJustOneViableAlt = function (altsets) {\n    return PredictionMode.getSingleViableAlt(altsets);\n};\n\n//\n// Determines if every alternative subset in {@code altsets} contains more\n// than one alternative.\n//\n// @param altsets a collection of alternative subsets\n// @return {@code true} if every {@link BitSet} in {@code altsets} has\n// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}\n//\nPredictionMode.allSubsetsConflict = function (altsets) {\n    return !PredictionMode.hasNonConflictingAltSet(altsets);\n};\n//\n// Determines if any single alternative subset in {@code altsets} contains\n// exactly one alternative.\n//\n// @param altsets a collection of alternative subsets\n// @return {@code true} if {@code altsets} contains a {@link BitSet} with\n// {@link BitSet//cardinality cardinality} 1, otherwise {@code false}\n//\nPredictionMode.hasNonConflictingAltSet = function (altsets) {\n    for (var i = 0; i < altsets.length; i++) {\n        var alts = altsets[i];\n        if (alts.length === 1) {\n            return true;\n        }\n    }\n    return false;\n};\n\n//\n// Determines if any single alternative subset in {@code altsets} contains\n// more than one alternative.\n//\n// @param altsets a collection of alternative subsets\n// @return {@code true} if {@code altsets} contains a {@link BitSet} with\n// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}\n//\nPredictionMode.hasConflictingAltSet = function (altsets) {\n    for (var i = 0; i < altsets.length; i++) {\n        var alts = altsets[i];\n        if (alts.length > 1) {\n            return true;\n        }\n    }\n    return false;\n};\n\n//\n// Determines if every alternative subset in {@code altsets} is equivalent.\n//\n// @param altsets a collection of alternative subsets\n// @return {@code true} if every member of {@code altsets} is equal to the\n// others, otherwise {@code false}\n//\nPredictionMode.allSubsetsEqual = function (altsets) {\n    var first = null;\n    for (var i = 0; i < altsets.length; i++) {\n        var alts = altsets[i];\n        if (first === null) {\n            first = alts;\n        } else if (alts !== first) {\n            return false;\n        }\n    }\n    return true;\n};\n\n//\n// Returns the unique alternative predicted by all alternative subsets in\n// {@code altsets}. If no such alternative exists, this method returns\n// {@link ATN//INVALID_ALT_NUMBER}.\n//\n// @param altsets a collection of alternative subsets\n//\nPredictionMode.getUniqueAlt = function (altsets) {\n    var all = PredictionMode.getAlts(altsets);\n    if (all.length === 1) {\n        return all.minValue();\n    } else {\n        return ATN.INVALID_ALT_NUMBER;\n    }\n};\n\n// Gets the complete set of represented alternatives for a collection of\n// alternative subsets. This method returns the union of each {@link BitSet}\n// in {@code altsets}.\n//\n// @param altsets a collection of alternative subsets\n// @return the set of represented alternatives in {@code altsets}\n//\nPredictionMode.getAlts = function (altsets) {\n    var all = new BitSet();\n    altsets.map(function (alts) {\n        all.or(alts);\n    });\n    return all;\n};\n\n//\n// This function gets the conflicting alt subsets from a configuration set.\n// For each configuration {@code c} in {@code configs}:\n//\n// <pre>\n// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not\n// alt and not pred\n// </pre>\n\nPredictionMode.getConflictingAltSubsets = function (configs) {\n    var configToAlts = new Map();\n    configToAlts.hashFunction = function (cfg) {\n        hashStuff(cfg.state.stateNumber, cfg.context);\n    };\n    configToAlts.equalsFunction = function (c1, c2) {\n        return c1.state.stateNumber == c2.state.stateNumber && c1.context.equals(c2.context);\n    };\n    configs.items.map(function (cfg) {\n        var alts = configToAlts.get(cfg);\n        if (alts === null) {\n            alts = new BitSet();\n            configToAlts.put(cfg, alts);\n        }\n        alts.add(cfg.alt);\n    });\n    return configToAlts.getValues();\n};\n\n//\n// Get a map from state to alt subset from a configuration set. For each\n// configuration {@code c} in {@code configs}:\n//\n// <pre>\n// map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}\n// </pre>\n//\nPredictionMode.getStateToAltMap = function (configs) {\n    var m = new AltDict();\n    configs.items.map(function (c) {\n        var alts = m.get(c.state);\n        if (alts === null) {\n            alts = new BitSet();\n            m.put(c.state, alts);\n        }\n        alts.add(c.alt);\n    });\n    return m;\n};\n\nPredictionMode.hasStateAssociatedWithOneAlt = function (configs) {\n    var values = PredictionMode.getStateToAltMap(configs).values();\n    for (var i = 0; i < values.length; i++) {\n        if (values[i].length === 1) {\n            return true;\n        }\n    }\n    return false;\n};\n\nPredictionMode.getSingleViableAlt = function (altsets) {\n    var result = null;\n    for (var i = 0; i < altsets.length; i++) {\n        var alts = altsets[i];\n        var minAlt = alts.minValue();\n        if (result === null) {\n            result = minAlt;\n        } else if (result !== minAlt) {\n            // more than 1 viable alt\n            return ATN.INVALID_ALT_NUMBER;\n        }\n    }\n    return result;\n};\n\nexports.PredictionMode = PredictionMode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/PredictionMode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/SemanticContext.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/atn/SemanticContext.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\n// A tree structure used to record the semantic context in which\n//  an ATN configuration is valid.  It's either a single predicate,\n//  a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.\n//\n//  <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of\n//  {@link SemanticContext} within the scope of this outer class.</p>\n//\n\nvar Set = (__webpack_require__(/*! ./../Utils */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Utils.js\").Set);\nvar Hash = (__webpack_require__(/*! ./../Utils */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Utils.js\").Hash);\n\nfunction SemanticContext() {\n\treturn this;\n}\n\nSemanticContext.prototype.hashCode = function () {\n\tvar hash = new Hash();\n\tthis.updateHashCode(hash);\n\treturn hash.finish();\n};\n\n// For context independent predicates, we evaluate them without a local\n// context (i.e., null context). That way, we can evaluate them without\n// having to create proper rule-specific context during prediction (as\n// opposed to the parser, which creates them naturally). In a practical\n// sense, this avoids a cast exception from RuleContext to myruleContext.\n//\n// <p>For context dependent predicates, we must pass in a local context so that\n// references such as $arg evaluate properly as _localctx.arg. We only\n// capture context dependent predicates in the context in which we begin\n// prediction, so we passed in the outer context here in case of context\n// dependent predicate evaluation.</p>\n//\nSemanticContext.prototype.evaluate = function (parser, outerContext) {};\n\n//\n// Evaluate the precedence predicates for the context and reduce the result.\n//\n// @param parser The parser instance.\n// @param outerContext The current parser context object.\n// @return The simplified semantic context after precedence predicates are\n// evaluated, which will be one of the following values.\n// <ul>\n// <li>{@link //NONE}: if the predicate simplifies to {@code true} after\n// precedence predicates are evaluated.</li>\n// <li>{@code null}: if the predicate simplifies to {@code false} after\n// precedence predicates are evaluated.</li>\n// <li>{@code this}: if the semantic context is not changed as a result of\n// precedence predicate evaluation.</li>\n// <li>A non-{@code null} {@link SemanticContext}: the new simplified\n// semantic context after precedence predicates are evaluated.</li>\n// </ul>\n//\nSemanticContext.prototype.evalPrecedence = function (parser, outerContext) {\n\treturn this;\n};\n\nSemanticContext.andContext = function (a, b) {\n\tif (a === null || a === SemanticContext.NONE) {\n\t\treturn b;\n\t}\n\tif (b === null || b === SemanticContext.NONE) {\n\t\treturn a;\n\t}\n\tvar result = new AND(a, b);\n\tif (result.opnds.length === 1) {\n\t\treturn result.opnds[0];\n\t} else {\n\t\treturn result;\n\t}\n};\n\nSemanticContext.orContext = function (a, b) {\n\tif (a === null) {\n\t\treturn b;\n\t}\n\tif (b === null) {\n\t\treturn a;\n\t}\n\tif (a === SemanticContext.NONE || b === SemanticContext.NONE) {\n\t\treturn SemanticContext.NONE;\n\t}\n\tvar result = new OR(a, b);\n\tif (result.opnds.length === 1) {\n\t\treturn result.opnds[0];\n\t} else {\n\t\treturn result;\n\t}\n};\n\nfunction Predicate(ruleIndex, predIndex, isCtxDependent) {\n\tSemanticContext.call(this);\n\tthis.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;\n\tthis.predIndex = predIndex === undefined ? -1 : predIndex;\n\tthis.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred\n\treturn this;\n}\n\nPredicate.prototype = Object.create(SemanticContext.prototype);\nPredicate.prototype.constructor = Predicate;\n\n//The default {@link SemanticContext}, which is semantically equivalent to\n//a predicate of the form {@code {true}?}.\n//\nSemanticContext.NONE = new Predicate();\n\nPredicate.prototype.evaluate = function (parser, outerContext) {\n\tvar localctx = this.isCtxDependent ? outerContext : null;\n\treturn parser.sempred(localctx, this.ruleIndex, this.predIndex);\n};\n\nPredicate.prototype.updateHashCode = function (hash) {\n\thash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);\n};\n\nPredicate.prototype.equals = function (other) {\n\tif (this === other) {\n\t\treturn true;\n\t} else if (!(other instanceof Predicate)) {\n\t\treturn false;\n\t} else {\n\t\treturn this.ruleIndex === other.ruleIndex && this.predIndex === other.predIndex && this.isCtxDependent === other.isCtxDependent;\n\t}\n};\n\nPredicate.prototype.toString = function () {\n\treturn \"{\" + this.ruleIndex + \":\" + this.predIndex + \"}?\";\n};\n\nfunction PrecedencePredicate(precedence) {\n\tSemanticContext.call(this);\n\tthis.precedence = precedence === undefined ? 0 : precedence;\n}\n\nPrecedencePredicate.prototype = Object.create(SemanticContext.prototype);\nPrecedencePredicate.prototype.constructor = PrecedencePredicate;\n\nPrecedencePredicate.prototype.evaluate = function (parser, outerContext) {\n\treturn parser.precpred(outerContext, this.precedence);\n};\n\nPrecedencePredicate.prototype.evalPrecedence = function (parser, outerContext) {\n\tif (parser.precpred(outerContext, this.precedence)) {\n\t\treturn SemanticContext.NONE;\n\t} else {\n\t\treturn null;\n\t}\n};\n\nPrecedencePredicate.prototype.compareTo = function (other) {\n\treturn this.precedence - other.precedence;\n};\n\nPrecedencePredicate.prototype.updateHashCode = function (hash) {\n\thash.update(31);\n};\n\nPrecedencePredicate.prototype.equals = function (other) {\n\tif (this === other) {\n\t\treturn true;\n\t} else if (!(other instanceof PrecedencePredicate)) {\n\t\treturn false;\n\t} else {\n\t\treturn this.precedence === other.precedence;\n\t}\n};\n\nPrecedencePredicate.prototype.toString = function () {\n\treturn \"{\" + this.precedence + \">=prec}?\";\n};\n\nPrecedencePredicate.filterPrecedencePredicates = function (set) {\n\tvar result = [];\n\tset.values().map(function (context) {\n\t\tif (context instanceof PrecedencePredicate) {\n\t\t\tresult.push(context);\n\t\t}\n\t});\n\treturn result;\n};\n\n// A semantic context which is true whenever none of the contained contexts\n// is false.\n//\nfunction AND(a, b) {\n\tSemanticContext.call(this);\n\tvar operands = new Set();\n\tif (a instanceof AND) {\n\t\ta.opnds.map(function (o) {\n\t\t\toperands.add(o);\n\t\t});\n\t} else {\n\t\toperands.add(a);\n\t}\n\tif (b instanceof AND) {\n\t\tb.opnds.map(function (o) {\n\t\t\toperands.add(o);\n\t\t});\n\t} else {\n\t\toperands.add(b);\n\t}\n\tvar precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);\n\tif (precedencePredicates.length > 0) {\n\t\t// interested in the transition with the lowest precedence\n\t\tvar reduced = null;\n\t\tprecedencePredicates.map(function (p) {\n\t\t\tif (reduced === null || p.precedence < reduced.precedence) {\n\t\t\t\treduced = p;\n\t\t\t}\n\t\t});\n\t\toperands.add(reduced);\n\t}\n\tthis.opnds = operands.values();\n\treturn this;\n}\n\nAND.prototype = Object.create(SemanticContext.prototype);\nAND.prototype.constructor = AND;\n\nAND.prototype.equals = function (other) {\n\tif (this === other) {\n\t\treturn true;\n\t} else if (!(other instanceof AND)) {\n\t\treturn false;\n\t} else {\n\t\treturn this.opnds === other.opnds;\n\t}\n};\n\nAND.prototype.updateHashCode = function (hash) {\n\thash.update(this.opnds, \"AND\");\n};\n//\n// {@inheritDoc}\n//\n// <p>\n// The evaluation of predicates by this context is short-circuiting, but\n// unordered.</p>\n//\nAND.prototype.evaluate = function (parser, outerContext) {\n\tfor (var i = 0; i < this.opnds.length; i++) {\n\t\tif (!this.opnds[i].evaluate(parser, outerContext)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n};\n\nAND.prototype.evalPrecedence = function (parser, outerContext) {\n\tvar differs = false;\n\tvar operands = [];\n\tfor (var i = 0; i < this.opnds.length; i++) {\n\t\tvar context = this.opnds[i];\n\t\tvar evaluated = context.evalPrecedence(parser, outerContext);\n\t\tdiffers |= evaluated !== context;\n\t\tif (evaluated === null) {\n\t\t\t// The AND context is false if any element is false\n\t\t\treturn null;\n\t\t} else if (evaluated !== SemanticContext.NONE) {\n\t\t\t// Reduce the result by skipping true elements\n\t\t\toperands.push(evaluated);\n\t\t}\n\t}\n\tif (!differs) {\n\t\treturn this;\n\t}\n\tif (operands.length === 0) {\n\t\t// all elements were true, so the AND context is true\n\t\treturn SemanticContext.NONE;\n\t}\n\tvar result = null;\n\toperands.map(function (o) {\n\t\tresult = result === null ? o : SemanticContext.andContext(result, o);\n\t});\n\treturn result;\n};\n\nAND.prototype.toString = function () {\n\tvar s = \"\";\n\tthis.opnds.map(function (o) {\n\t\ts += \"&& \" + o.toString();\n\t});\n\treturn s.length > 3 ? s.slice(3) : s;\n};\n\n//\n// A semantic context which is true whenever at least one of the contained\n// contexts is true.\n//\nfunction OR(a, b) {\n\tSemanticContext.call(this);\n\tvar operands = new Set();\n\tif (a instanceof OR) {\n\t\ta.opnds.map(function (o) {\n\t\t\toperands.add(o);\n\t\t});\n\t} else {\n\t\toperands.add(a);\n\t}\n\tif (b instanceof OR) {\n\t\tb.opnds.map(function (o) {\n\t\t\toperands.add(o);\n\t\t});\n\t} else {\n\t\toperands.add(b);\n\t}\n\n\tvar precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);\n\tif (precedencePredicates.length > 0) {\n\t\t// interested in the transition with the highest precedence\n\t\tvar s = precedencePredicates.sort(function (a, b) {\n\t\t\treturn a.compareTo(b);\n\t\t});\n\t\tvar reduced = s[s.length - 1];\n\t\toperands.add(reduced);\n\t}\n\tthis.opnds = operands.values();\n\treturn this;\n}\n\nOR.prototype = Object.create(SemanticContext.prototype);\nOR.prototype.constructor = OR;\n\nOR.prototype.constructor = function (other) {\n\tif (this === other) {\n\t\treturn true;\n\t} else if (!(other instanceof OR)) {\n\t\treturn false;\n\t} else {\n\t\treturn this.opnds === other.opnds;\n\t}\n};\n\nOR.prototype.updateHashCode = function (hash) {\n\thash.update(this.opnds, \"OR\");\n};\n\n// <p>\n// The evaluation of predicates by this context is short-circuiting, but\n// unordered.</p>\n//\nOR.prototype.evaluate = function (parser, outerContext) {\n\tfor (var i = 0; i < this.opnds.length; i++) {\n\t\tif (this.opnds[i].evaluate(parser, outerContext)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\n\nOR.prototype.evalPrecedence = function (parser, outerContext) {\n\tvar differs = false;\n\tvar operands = [];\n\tfor (var i = 0; i < this.opnds.length; i++) {\n\t\tvar context = this.opnds[i];\n\t\tvar evaluated = context.evalPrecedence(parser, outerContext);\n\t\tdiffers |= evaluated !== context;\n\t\tif (evaluated === SemanticContext.NONE) {\n\t\t\t// The OR context is true if any element is true\n\t\t\treturn SemanticContext.NONE;\n\t\t} else if (evaluated !== null) {\n\t\t\t// Reduce the result by skipping false elements\n\t\t\toperands.push(evaluated);\n\t\t}\n\t}\n\tif (!differs) {\n\t\treturn this;\n\t}\n\tif (operands.length === 0) {\n\t\t// all elements were false, so the OR context is false\n\t\treturn null;\n\t}\n\tvar result = null;\n\toperands.map(function (o) {\n\t\treturn result === null ? o : SemanticContext.orContext(result, o);\n\t});\n\treturn result;\n};\n\nOR.prototype.toString = function () {\n\tvar s = \"\";\n\tthis.opnds.map(function (o) {\n\t\ts += \"|| \" + o.toString();\n\t});\n\treturn s.length > 3 ? s.slice(3) : s;\n};\n\nexports.SemanticContext = SemanticContext;\nexports.PrecedencePredicate = PrecedencePredicate;\nexports.Predicate = Predicate;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/SemanticContext.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/Transition.js":
/*!**************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/atn/Transition.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\n//  An ATN transition between any two ATN states.  Subclasses define\n//  atom, set, epsilon, action, predicate, rule transitions.\n//\n//  <p>This is a one way link.  It emanates from a state (usually via a list of\n//  transitions) and has a target state.</p>\n//\n//  <p>Since we never have to change the ATN transitions once we construct it,\n//  we can fix these transitions as specific classes. The DFA transitions\n//  on the other hand need to update the labels as it adds transitions to\n//  the states. We'll use the term Edge for the DFA to distinguish them from\n//  ATN transitions.</p>\n\nvar Token = (__webpack_require__(/*! ./../Token */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Token.js\").Token);\nvar Interval = (__webpack_require__(/*! ./../IntervalSet */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/IntervalSet.js\").Interval);\nvar IntervalSet = (__webpack_require__(/*! ./../IntervalSet */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/IntervalSet.js\").IntervalSet);\nvar Predicate = (__webpack_require__(/*! ./SemanticContext */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/SemanticContext.js\").Predicate);\nvar PrecedencePredicate = (__webpack_require__(/*! ./SemanticContext */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/SemanticContext.js\").PrecedencePredicate);\n\nfunction Transition(target) {\n  // The target of this transition.\n  if (target === undefined || target === null) {\n    throw \"target cannot be null.\";\n  }\n  this.target = target;\n  // Are we epsilon, action, sempred?\n  this.isEpsilon = false;\n  this.label = null;\n  return this;\n}\n// constants for serialization\nTransition.EPSILON = 1;\nTransition.RANGE = 2;\nTransition.RULE = 3;\nTransition.PREDICATE = 4; // e.g., {isType(input.LT(1))}?\nTransition.ATOM = 5;\nTransition.ACTION = 6;\nTransition.SET = 7; // ~(A|B) or ~atom, wildcard, which convert to next 2\nTransition.NOT_SET = 8;\nTransition.WILDCARD = 9;\nTransition.PRECEDENCE = 10;\n\nTransition.serializationNames = [\"INVALID\", \"EPSILON\", \"RANGE\", \"RULE\", \"PREDICATE\", \"ATOM\", \"ACTION\", \"SET\", \"NOT_SET\", \"WILDCARD\", \"PRECEDENCE\"];\n\nTransition.serializationTypes = {\n  EpsilonTransition: Transition.EPSILON,\n  RangeTransition: Transition.RANGE,\n  RuleTransition: Transition.RULE,\n  PredicateTransition: Transition.PREDICATE,\n  AtomTransition: Transition.ATOM,\n  ActionTransition: Transition.ACTION,\n  SetTransition: Transition.SET,\n  NotSetTransition: Transition.NOT_SET,\n  WildcardTransition: Transition.WILDCARD,\n  PrecedencePredicateTransition: Transition.PRECEDENCE\n};\n\n// TODO: make all transitions sets? no, should remove set edges\nfunction AtomTransition(target, label) {\n  Transition.call(this, target);\n  this.label_ = label; // The token type or character value; or, signifies special label.\n  this.label = this.makeLabel();\n  this.serializationType = Transition.ATOM;\n  return this;\n}\n\nAtomTransition.prototype = Object.create(Transition.prototype);\nAtomTransition.prototype.constructor = AtomTransition;\n\nAtomTransition.prototype.makeLabel = function () {\n  var s = new IntervalSet();\n  s.addOne(this.label_);\n  return s;\n};\n\nAtomTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n  return this.label_ === symbol;\n};\n\nAtomTransition.prototype.toString = function () {\n  return this.label_;\n};\n\nfunction RuleTransition(ruleStart, ruleIndex, precedence, followState) {\n  Transition.call(this, ruleStart);\n  this.ruleIndex = ruleIndex; // ptr to the rule definition object for this rule ref\n  this.precedence = precedence;\n  this.followState = followState; // what node to begin computations following ref to rule\n  this.serializationType = Transition.RULE;\n  this.isEpsilon = true;\n  return this;\n}\n\nRuleTransition.prototype = Object.create(Transition.prototype);\nRuleTransition.prototype.constructor = RuleTransition;\n\nRuleTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n  return false;\n};\n\nfunction EpsilonTransition(target, outermostPrecedenceReturn) {\n  Transition.call(this, target);\n  this.serializationType = Transition.EPSILON;\n  this.isEpsilon = true;\n  this.outermostPrecedenceReturn = outermostPrecedenceReturn;\n  return this;\n}\n\nEpsilonTransition.prototype = Object.create(Transition.prototype);\nEpsilonTransition.prototype.constructor = EpsilonTransition;\n\nEpsilonTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n  return false;\n};\n\nEpsilonTransition.prototype.toString = function () {\n  return \"epsilon\";\n};\n\nfunction RangeTransition(target, start, stop) {\n  Transition.call(this, target);\n  this.serializationType = Transition.RANGE;\n  this.start = start;\n  this.stop = stop;\n  this.label = this.makeLabel();\n  return this;\n}\n\nRangeTransition.prototype = Object.create(Transition.prototype);\nRangeTransition.prototype.constructor = RangeTransition;\n\nRangeTransition.prototype.makeLabel = function () {\n  var s = new IntervalSet();\n  s.addRange(this.start, this.stop);\n  return s;\n};\n\nRangeTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n  return symbol >= this.start && symbol <= this.stop;\n};\n\nRangeTransition.prototype.toString = function () {\n  return \"'\" + String.fromCharCode(this.start) + \"'..'\" + String.fromCharCode(this.stop) + \"'\";\n};\n\nfunction AbstractPredicateTransition(target) {\n  Transition.call(this, target);\n  return this;\n}\n\nAbstractPredicateTransition.prototype = Object.create(Transition.prototype);\nAbstractPredicateTransition.prototype.constructor = AbstractPredicateTransition;\n\nfunction PredicateTransition(target, ruleIndex, predIndex, isCtxDependent) {\n  AbstractPredicateTransition.call(this, target);\n  this.serializationType = Transition.PREDICATE;\n  this.ruleIndex = ruleIndex;\n  this.predIndex = predIndex;\n  this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred\n  this.isEpsilon = true;\n  return this;\n}\n\nPredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);\nPredicateTransition.prototype.constructor = PredicateTransition;\n\nPredicateTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n  return false;\n};\n\nPredicateTransition.prototype.getPredicate = function () {\n  return new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);\n};\n\nPredicateTransition.prototype.toString = function () {\n  return \"pred_\" + this.ruleIndex + \":\" + this.predIndex;\n};\n\nfunction ActionTransition(target, ruleIndex, actionIndex, isCtxDependent) {\n  Transition.call(this, target);\n  this.serializationType = Transition.ACTION;\n  this.ruleIndex = ruleIndex;\n  this.actionIndex = actionIndex === undefined ? -1 : actionIndex;\n  this.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred\n  this.isEpsilon = true;\n  return this;\n}\n\nActionTransition.prototype = Object.create(Transition.prototype);\nActionTransition.prototype.constructor = ActionTransition;\n\nActionTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n  return false;\n};\n\nActionTransition.prototype.toString = function () {\n  return \"action_\" + this.ruleIndex + \":\" + this.actionIndex;\n};\n\n// A transition containing a set of values.\nfunction SetTransition(target, set) {\n  Transition.call(this, target);\n  this.serializationType = Transition.SET;\n  if (set !== undefined && set !== null) {\n    this.label = set;\n  } else {\n    this.label = new IntervalSet();\n    this.label.addOne(Token.INVALID_TYPE);\n  }\n  return this;\n}\n\nSetTransition.prototype = Object.create(Transition.prototype);\nSetTransition.prototype.constructor = SetTransition;\n\nSetTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n  return this.label.contains(symbol);\n};\n\nSetTransition.prototype.toString = function () {\n  return this.label.toString();\n};\n\nfunction NotSetTransition(target, set) {\n  SetTransition.call(this, target, set);\n  this.serializationType = Transition.NOT_SET;\n  return this;\n}\n\nNotSetTransition.prototype = Object.create(SetTransition.prototype);\nNotSetTransition.prototype.constructor = NotSetTransition;\n\nNotSetTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n  return symbol >= minVocabSymbol && symbol <= maxVocabSymbol && !SetTransition.prototype.matches.call(this, symbol, minVocabSymbol, maxVocabSymbol);\n};\n\nNotSetTransition.prototype.toString = function () {\n  return '~' + SetTransition.prototype.toString.call(this);\n};\n\nfunction WildcardTransition(target) {\n  Transition.call(this, target);\n  this.serializationType = Transition.WILDCARD;\n  return this;\n}\n\nWildcardTransition.prototype = Object.create(Transition.prototype);\nWildcardTransition.prototype.constructor = WildcardTransition;\n\nWildcardTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n  return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;\n};\n\nWildcardTransition.prototype.toString = function () {\n  return \".\";\n};\n\nfunction PrecedencePredicateTransition(target, precedence) {\n  AbstractPredicateTransition.call(this, target);\n  this.serializationType = Transition.PRECEDENCE;\n  this.precedence = precedence;\n  this.isEpsilon = true;\n  return this;\n}\n\nPrecedencePredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);\nPrecedencePredicateTransition.prototype.constructor = PrecedencePredicateTransition;\n\nPrecedencePredicateTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n  return false;\n};\n\nPrecedencePredicateTransition.prototype.getPredicate = function () {\n  return new PrecedencePredicate(this.precedence);\n};\n\nPrecedencePredicateTransition.prototype.toString = function () {\n  return this.precedence + \" >= _p\";\n};\n\nexports.Transition = Transition;\nexports.AtomTransition = AtomTransition;\nexports.SetTransition = SetTransition;\nexports.NotSetTransition = NotSetTransition;\nexports.RuleTransition = RuleTransition;\nexports.ActionTransition = ActionTransition;\nexports.EpsilonTransition = EpsilonTransition;\nexports.RangeTransition = RangeTransition;\nexports.WildcardTransition = WildcardTransition;\nexports.PredicateTransition = PredicateTransition;\nexports.PrecedencePredicateTransition = PrecedencePredicateTransition;\nexports.AbstractPredicateTransition = AbstractPredicateTransition;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/Transition.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/atn/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nexports.ATN = __webpack_require__(/*! ./ATN */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATN.js\").ATN;\nexports.ATNDeserializer = __webpack_require__(/*! ./ATNDeserializer */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNDeserializer.js\").ATNDeserializer;\nexports.LexerATNSimulator = __webpack_require__(/*! ./LexerATNSimulator */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/LexerATNSimulator.js\").LexerATNSimulator;\nexports.ParserATNSimulator = __webpack_require__(/*! ./ParserATNSimulator */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ParserATNSimulator.js\").ParserATNSimulator;\nexports.PredictionMode = __webpack_require__(/*! ./PredictionMode */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/PredictionMode.js\").PredictionMode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L2F0bi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1SEFBa0M7QUFDbEMsdUtBQXNFO0FBQ3RFLCtLQUE0RTtBQUM1RSxtTEFBK0U7QUFDL0UsbUtBQW1FIiwic291cmNlcyI6WyIvVXNlcnMvbWFjL2Zsb3dwb3J0L25vZGVfbW9kdWxlcy9zb2xpZGl0eS1wYXJzZXItYW50bHIvZGlzdC9hbnRscjQvYXRuL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG5leHBvcnRzLkFUTiA9IHJlcXVpcmUoJy4vQVROJykuQVROO1xuZXhwb3J0cy5BVE5EZXNlcmlhbGl6ZXIgPSByZXF1aXJlKCcuL0FUTkRlc2VyaWFsaXplcicpLkFUTkRlc2VyaWFsaXplcjtcbmV4cG9ydHMuTGV4ZXJBVE5TaW11bGF0b3IgPSByZXF1aXJlKCcuL0xleGVyQVROU2ltdWxhdG9yJykuTGV4ZXJBVE5TaW11bGF0b3I7XG5leHBvcnRzLlBhcnNlckFUTlNpbXVsYXRvciA9IHJlcXVpcmUoJy4vUGFyc2VyQVROU2ltdWxhdG9yJykuUGFyc2VyQVROU2ltdWxhdG9yO1xuZXhwb3J0cy5QcmVkaWN0aW9uTW9kZSA9IHJlcXVpcmUoJy4vUHJlZGljdGlvbk1vZGUnKS5QcmVkaWN0aW9uTW9kZTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/dfa/DFA.js":
/*!*******************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/dfa/DFA.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nvar Set = (__webpack_require__(/*! ../Utils */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Utils.js\").Set);\nvar DFAState = (__webpack_require__(/*! ./DFAState */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/dfa/DFAState.js\").DFAState);\nvar StarLoopEntryState = (__webpack_require__(/*! ../atn/ATNState */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNState.js\").StarLoopEntryState);\nvar ATNConfigSet = (__webpack_require__(/*! ./../atn/ATNConfigSet */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNConfigSet.js\").ATNConfigSet);\nvar DFASerializer = (__webpack_require__(/*! ./DFASerializer */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/dfa/DFASerializer.js\").DFASerializer);\nvar LexerDFASerializer = (__webpack_require__(/*! ./DFASerializer */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/dfa/DFASerializer.js\").LexerDFASerializer);\n\nfunction DFA(atnStartState, decision) {\n\tif (decision === undefined) {\n\t\tdecision = 0;\n\t}\n\t// From which ATN state did we create this DFA?\n\tthis.atnStartState = atnStartState;\n\tthis.decision = decision;\n\t// A set of all DFA states. Use {@link Map} so we can get old state back\n\t// ({@link Set} only allows you to see if it's there).\n\tthis._states = new Set();\n\tthis.s0 = null;\n\t// {@code true} if this DFA is for a precedence decision; otherwise,\n\t// {@code false}. This is the backing field for {@link //isPrecedenceDfa},\n\t// {@link //setPrecedenceDfa}.\n\tthis.precedenceDfa = false;\n\tif (atnStartState instanceof StarLoopEntryState) {\n\t\tif (atnStartState.isPrecedenceDecision) {\n\t\t\tthis.precedenceDfa = true;\n\t\t\tvar precedenceState = new DFAState(null, new ATNConfigSet());\n\t\t\tprecedenceState.edges = [];\n\t\t\tprecedenceState.isAcceptState = false;\n\t\t\tprecedenceState.requiresFullContext = false;\n\t\t\tthis.s0 = precedenceState;\n\t\t}\n\t}\n\treturn this;\n}\n\n// Get the start state for a specific precedence value.\n//\n// @param precedence The current precedence.\n// @return The start state corresponding to the specified precedence, or\n// {@code null} if no start state exists for the specified precedence.\n//\n// @throws IllegalStateException if this is not a precedence DFA.\n// @see //isPrecedenceDfa()\n\nDFA.prototype.getPrecedenceStartState = function (precedence) {\n\tif (!this.precedenceDfa) {\n\t\tthrow \"Only precedence DFAs may contain a precedence start state.\";\n\t}\n\t// s0.edges is never null for a precedence DFA\n\tif (precedence < 0 || precedence >= this.s0.edges.length) {\n\t\treturn null;\n\t}\n\treturn this.s0.edges[precedence] || null;\n};\n\n// Set the start state for a specific precedence value.\n//\n// @param precedence The current precedence.\n// @param startState The start state corresponding to the specified\n// precedence.\n//\n// @throws IllegalStateException if this is not a precedence DFA.\n// @see //isPrecedenceDfa()\n//\nDFA.prototype.setPrecedenceStartState = function (precedence, startState) {\n\tif (!this.precedenceDfa) {\n\t\tthrow \"Only precedence DFAs may contain a precedence start state.\";\n\t}\n\tif (precedence < 0) {\n\t\treturn;\n\t}\n\n\t// synchronization on s0 here is ok. when the DFA is turned into a\n\t// precedence DFA, s0 will be initialized once and not updated again\n\t// s0.edges is never null for a precedence DFA\n\tthis.s0.edges[precedence] = startState;\n};\n\n//\n// Sets whether this is a precedence DFA. If the specified value differs\n// from the current DFA configuration, the following actions are taken;\n// otherwise no changes are made to the current DFA.\n//\n// <ul>\n// <li>The {@link //states} map is cleared</li>\n// <li>If {@code precedenceDfa} is {@code false}, the initial state\n// {@link //s0} is set to {@code null}; otherwise, it is initialized to a new\n// {@link DFAState} with an empty outgoing {@link DFAState//edges} array to\n// store the start states for individual precedence values.</li>\n// <li>The {@link //precedenceDfa} field is updated</li>\n// </ul>\n//\n// @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,\n// {@code false}\n\nDFA.prototype.setPrecedenceDfa = function (precedenceDfa) {\n\tif (this.precedenceDfa !== precedenceDfa) {\n\t\tthis._states = new DFAStatesSet();\n\t\tif (precedenceDfa) {\n\t\t\tvar precedenceState = new DFAState(null, new ATNConfigSet());\n\t\t\tprecedenceState.edges = [];\n\t\t\tprecedenceState.isAcceptState = false;\n\t\t\tprecedenceState.requiresFullContext = false;\n\t\t\tthis.s0 = precedenceState;\n\t\t} else {\n\t\t\tthis.s0 = null;\n\t\t}\n\t\tthis.precedenceDfa = precedenceDfa;\n\t}\n};\n\nObject.defineProperty(DFA.prototype, \"states\", {\n\tget: function get() {\n\t\treturn this._states;\n\t}\n});\n\n// Return a list of all states in this DFA, ordered by state number.\nDFA.prototype.sortedStates = function () {\n\tvar list = this._states.values();\n\treturn list.sort(function (a, b) {\n\t\treturn a.stateNumber - b.stateNumber;\n\t});\n};\n\nDFA.prototype.toString = function (literalNames, symbolicNames) {\n\tliteralNames = literalNames || null;\n\tsymbolicNames = symbolicNames || null;\n\tif (this.s0 === null) {\n\t\treturn \"\";\n\t}\n\tvar serializer = new DFASerializer(this, literalNames, symbolicNames);\n\treturn serializer.toString();\n};\n\nDFA.prototype.toLexerString = function () {\n\tif (this.s0 === null) {\n\t\treturn \"\";\n\t}\n\tvar serializer = new LexerDFASerializer(this);\n\treturn serializer.toString();\n};\n\nexports.DFA = DFA;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/dfa/DFA.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/dfa/DFASerializer.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/dfa/DFASerializer.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n// A DFA walker that knows how to dump them to serialized strings.#/\n\n\nfunction DFASerializer(dfa, literalNames, symbolicNames) {\n    this.dfa = dfa;\n    this.literalNames = literalNames || [];\n    this.symbolicNames = symbolicNames || [];\n    return this;\n}\n\nDFASerializer.prototype.toString = function () {\n    if (this.dfa.s0 === null) {\n        return null;\n    }\n    var buf = \"\";\n    var states = this.dfa.sortedStates();\n    for (var i = 0; i < states.length; i++) {\n        var s = states[i];\n        if (s.edges !== null) {\n            var n = s.edges.length;\n            for (var j = 0; j < n; j++) {\n                var t = s.edges[j] || null;\n                if (t !== null && t.stateNumber !== 0x7FFFFFFF) {\n                    buf = buf.concat(this.getStateString(s));\n                    buf = buf.concat(\"-\");\n                    buf = buf.concat(this.getEdgeLabel(j));\n                    buf = buf.concat(\"->\");\n                    buf = buf.concat(this.getStateString(t));\n                    buf = buf.concat('\\n');\n                }\n            }\n        }\n    }\n    return buf.length === 0 ? null : buf;\n};\n\nDFASerializer.prototype.getEdgeLabel = function (i) {\n    if (i === 0) {\n        return \"EOF\";\n    } else if (this.literalNames !== null || this.symbolicNames !== null) {\n        return this.literalNames[i - 1] || this.symbolicNames[i - 1];\n    } else {\n        return String.fromCharCode(i - 1);\n    }\n};\n\nDFASerializer.prototype.getStateString = function (s) {\n    var baseStateStr = (s.isAcceptState ? \":\" : \"\") + \"s\" + s.stateNumber + (s.requiresFullContext ? \"^\" : \"\");\n    if (s.isAcceptState) {\n        if (s.predicates !== null) {\n            return baseStateStr + \"=>\" + s.predicates.toString();\n        } else {\n            return baseStateStr + \"=>\" + s.prediction.toString();\n        }\n    } else {\n        return baseStateStr;\n    }\n};\n\nfunction LexerDFASerializer(dfa) {\n    DFASerializer.call(this, dfa, null);\n    return this;\n}\n\nLexerDFASerializer.prototype = Object.create(DFASerializer.prototype);\nLexerDFASerializer.prototype.constructor = LexerDFASerializer;\n\nLexerDFASerializer.prototype.getEdgeLabel = function (i) {\n    return \"'\" + String.fromCharCode(i) + \"'\";\n};\n\nexports.DFASerializer = DFASerializer;\nexports.LexerDFASerializer = LexerDFASerializer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L2RmYS9ERkFTZXJpYWxpemVyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG1CQUFtQjtBQUN2QztBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsT0FBTztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUI7QUFDckIsMEJBQTBCIiwic291cmNlcyI6WyIvVXNlcnMvbWFjL2Zsb3dwb3J0L25vZGVfbW9kdWxlcy9zb2xpZGl0eS1wYXJzZXItYW50bHIvZGlzdC9hbnRscjQvZGZhL0RGQVNlcmlhbGl6ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuLy8gQSBERkEgd2Fsa2VyIHRoYXQga25vd3MgaG93IHRvIGR1bXAgdGhlbSB0byBzZXJpYWxpemVkIHN0cmluZ3MuIy9cblxuXG5mdW5jdGlvbiBERkFTZXJpYWxpemVyKGRmYSwgbGl0ZXJhbE5hbWVzLCBzeW1ib2xpY05hbWVzKSB7XG4gICAgdGhpcy5kZmEgPSBkZmE7XG4gICAgdGhpcy5saXRlcmFsTmFtZXMgPSBsaXRlcmFsTmFtZXMgfHwgW107XG4gICAgdGhpcy5zeW1ib2xpY05hbWVzID0gc3ltYm9saWNOYW1lcyB8fCBbXTtcbiAgICByZXR1cm4gdGhpcztcbn1cblxuREZBU2VyaWFsaXplci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuZGZhLnMwID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgYnVmID0gXCJcIjtcbiAgICB2YXIgc3RhdGVzID0gdGhpcy5kZmEuc29ydGVkU3RhdGVzKCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHMgPSBzdGF0ZXNbaV07XG4gICAgICAgIGlmIChzLmVkZ2VzICE9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgbiA9IHMuZWRnZXMubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHMuZWRnZXNbal0gfHwgbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAodCAhPT0gbnVsbCAmJiB0LnN0YXRlTnVtYmVyICE9PSAweDdGRkZGRkZGKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZiA9IGJ1Zi5jb25jYXQodGhpcy5nZXRTdGF0ZVN0cmluZyhzKSk7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZiA9IGJ1Zi5jb25jYXQoXCItXCIpO1xuICAgICAgICAgICAgICAgICAgICBidWYgPSBidWYuY29uY2F0KHRoaXMuZ2V0RWRnZUxhYmVsKGopKTtcbiAgICAgICAgICAgICAgICAgICAgYnVmID0gYnVmLmNvbmNhdChcIi0+XCIpO1xuICAgICAgICAgICAgICAgICAgICBidWYgPSBidWYuY29uY2F0KHRoaXMuZ2V0U3RhdGVTdHJpbmcodCkpO1xuICAgICAgICAgICAgICAgICAgICBidWYgPSBidWYuY29uY2F0KCdcXG4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJ1Zi5sZW5ndGggPT09IDAgPyBudWxsIDogYnVmO1xufTtcblxuREZBU2VyaWFsaXplci5wcm90b3R5cGUuZ2V0RWRnZUxhYmVsID0gZnVuY3Rpb24gKGkpIHtcbiAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gXCJFT0ZcIjtcbiAgICB9IGVsc2UgaWYgKHRoaXMubGl0ZXJhbE5hbWVzICE9PSBudWxsIHx8IHRoaXMuc3ltYm9saWNOYW1lcyAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5saXRlcmFsTmFtZXNbaSAtIDFdIHx8IHRoaXMuc3ltYm9saWNOYW1lc1tpIC0gMV07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoaSAtIDEpO1xuICAgIH1cbn07XG5cbkRGQVNlcmlhbGl6ZXIucHJvdG90eXBlLmdldFN0YXRlU3RyaW5nID0gZnVuY3Rpb24gKHMpIHtcbiAgICB2YXIgYmFzZVN0YXRlU3RyID0gKHMuaXNBY2NlcHRTdGF0ZSA/IFwiOlwiIDogXCJcIikgKyBcInNcIiArIHMuc3RhdGVOdW1iZXIgKyAocy5yZXF1aXJlc0Z1bGxDb250ZXh0ID8gXCJeXCIgOiBcIlwiKTtcbiAgICBpZiAocy5pc0FjY2VwdFN0YXRlKSB7XG4gICAgICAgIGlmIChzLnByZWRpY2F0ZXMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBiYXNlU3RhdGVTdHIgKyBcIj0+XCIgKyBzLnByZWRpY2F0ZXMudG9TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBiYXNlU3RhdGVTdHIgKyBcIj0+XCIgKyBzLnByZWRpY3Rpb24udG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBiYXNlU3RhdGVTdHI7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gTGV4ZXJERkFTZXJpYWxpemVyKGRmYSkge1xuICAgIERGQVNlcmlhbGl6ZXIuY2FsbCh0aGlzLCBkZmEsIG51bGwpO1xuICAgIHJldHVybiB0aGlzO1xufVxuXG5MZXhlckRGQVNlcmlhbGl6ZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShERkFTZXJpYWxpemVyLnByb3RvdHlwZSk7XG5MZXhlckRGQVNlcmlhbGl6ZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGV4ZXJERkFTZXJpYWxpemVyO1xuXG5MZXhlckRGQVNlcmlhbGl6ZXIucHJvdG90eXBlLmdldEVkZ2VMYWJlbCA9IGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIFwiJ1wiICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKSArIFwiJ1wiO1xufTtcblxuZXhwb3J0cy5ERkFTZXJpYWxpemVyID0gREZBU2VyaWFsaXplcjtcbmV4cG9ydHMuTGV4ZXJERkFTZXJpYWxpemVyID0gTGV4ZXJERkFTZXJpYWxpemVyOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/dfa/DFASerializer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/dfa/DFAState.js":
/*!************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/dfa/DFAState.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\nvar ATNConfigSet = (__webpack_require__(/*! ./../atn/ATNConfigSet */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNConfigSet.js\").ATNConfigSet);\nvar Utils = __webpack_require__(/*! ./../Utils */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Utils.js\");\nvar Hash = Utils.Hash;\nvar Set = Utils.Set;\n\n// Map a predicate to a predicted alternative.///\n\nfunction PredPrediction(pred, alt) {\n\tthis.alt = alt;\n\tthis.pred = pred;\n\treturn this;\n}\n\nPredPrediction.prototype.toString = function () {\n\treturn \"(\" + this.pred + \", \" + this.alt + \")\";\n};\n\n// A DFA state represents a set of possible ATN configurations.\n// As Aho, Sethi, Ullman p. 117 says \"The DFA uses its state\n// to keep track of all possible states the ATN can be in after\n// reading each input symbol. That is to say, after reading\n// input a1a2..an, the DFA is in a state that represents the\n// subset T of the states of the ATN that are reachable from the\n// ATN's start state along some path labeled a1a2..an.\"\n// In conventional NFA&rarr;DFA conversion, therefore, the subset T\n// would be a bitset representing the set of states the\n// ATN could be in. We need to track the alt predicted by each\n// state as well, however. More importantly, we need to maintain\n// a stack of states, tracking the closure operations as they\n// jump from rule to rule, emulating rule invocations (method calls).\n// I have to add a stack to simulate the proper lookahead sequences for\n// the underlying LL grammar from which the ATN was derived.\n//\n// <p>I use a set of ATNConfig objects not simple states. An ATNConfig\n// is both a state (ala normal conversion) and a RuleContext describing\n// the chain of rules (if any) followed to arrive at that state.</p>\n//\n// <p>A DFA state may have multiple references to a particular state,\n// but with different ATN contexts (with same or different alts)\n// meaning that state was reached via a different set of rule invocations.</p>\n// /\n\nfunction DFAState(stateNumber, configs) {\n\tif (stateNumber === null) {\n\t\tstateNumber = -1;\n\t}\n\tif (configs === null) {\n\t\tconfigs = new ATNConfigSet();\n\t}\n\tthis.stateNumber = stateNumber;\n\tthis.configs = configs;\n\t// {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)\n\t// {@link Token//EOF} maps to {@code edges[0]}.\n\tthis.edges = null;\n\tthis.isAcceptState = false;\n\t// if accept state, what ttype do we match or alt do we predict?\n\t// This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link\n\t// //predicates}{@code !=null} or\n\t// {@link //requiresFullContext}.\n\tthis.prediction = 0;\n\tthis.lexerActionExecutor = null;\n\t// Indicates that this state was created during SLL prediction that\n\t// discovered a conflict between the configurations in the state. Future\n\t// {@link ParserATNSimulator//execATN} invocations immediately jumped doing\n\t// full context prediction if this field is true.\n\tthis.requiresFullContext = false;\n\t// During SLL parsing, this is a list of predicates associated with the\n\t// ATN configurations of the DFA state. When we have predicates,\n\t// {@link //requiresFullContext} is {@code false} since full context\n\t// prediction evaluates predicates\n\t// on-the-fly. If this is not null, then {@link //prediction} is\n\t// {@link ATN//INVALID_ALT_NUMBER}.\n\t//\n\t// <p>We only use these for non-{@link //requiresFullContext} but\n\t// conflicting states. That\n\t// means we know from the context (it's $ or we don't dip into outer\n\t// context) that it's an ambiguity not a conflict.</p>\n\t//\n\t// <p>This list is computed by {@link\n\t// ParserATNSimulator//predicateDFAState}.</p>\n\tthis.predicates = null;\n\treturn this;\n}\n\n// Get the set of all alts mentioned by all ATN configurations in this\n// DFA state.\nDFAState.prototype.getAltSet = function () {\n\tvar alts = new Set();\n\tif (this.configs !== null) {\n\t\tfor (var i = 0; i < this.configs.length; i++) {\n\t\t\tvar c = this.configs[i];\n\t\t\talts.add(c.alt);\n\t\t}\n\t}\n\tif (alts.length === 0) {\n\t\treturn null;\n\t} else {\n\t\treturn alts;\n\t}\n};\n\n// Two {@link DFAState} instances are equal if their ATN configuration sets\n// are the same. This method is used to see if a state already exists.\n//\n// <p>Because the number of alternatives and number of ATN configurations are\n// finite, there is a finite number of DFA states that can be processed.\n// This is necessary to show that the algorithm terminates.</p>\n//\n// <p>Cannot test the DFA state numbers here because in\n// {@link ParserATNSimulator//addDFAState} we need to know if any other state\n// exists that has this exact set of ATN configurations. The\n// {@link //stateNumber} is irrelevant.</p>\nDFAState.prototype.equals = function (other) {\n\t// compare set of ATN configurations in this set with other\n\treturn this === other || other instanceof DFAState && this.configs.equals(other.configs);\n};\n\nDFAState.prototype.toString = function () {\n\tvar s = \"\" + this.stateNumber + \":\" + this.configs;\n\tif (this.isAcceptState) {\n\t\ts = s + \"=>\";\n\t\tif (this.predicates !== null) s = s + this.predicates;else s = s + this.prediction;\n\t}\n\treturn s;\n};\n\nDFAState.prototype.hashCode = function () {\n\tvar hash = new Hash();\n\thash.update(this.configs);\n\tif (this.isAcceptState) {\n\t\tif (this.predicates !== null) hash.update(this.predicates);else hash.update(this.prediction);\n\t}\n\treturn hash.finish();\n};\n\nexports.DFAState = DFAState;\nexports.PredPrediction = PredPrediction;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/dfa/DFAState.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/dfa/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/dfa/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nexports.DFA = __webpack_require__(/*! ./DFA */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/dfa/DFA.js\").DFA;\nexports.DFASerializer = __webpack_require__(/*! ./DFASerializer */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/dfa/DFASerializer.js\").DFASerializer;\nexports.LexerDFASerializer = __webpack_require__(/*! ./DFASerializer */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/dfa/DFASerializer.js\").LexerDFASerializer;\nexports.PredPrediction = __webpack_require__(/*! ./DFAState */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/dfa/DFAState.js\").PredPrediction;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L2RmYS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1SEFBa0M7QUFDbEMsK0pBQWdFO0FBQ2hFLHlLQUEwRTtBQUMxRSx1SkFBNkQiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWMvZmxvd3BvcnQvbm9kZV9tb2R1bGVzL3NvbGlkaXR5LXBhcnNlci1hbnRsci9kaXN0L2FudGxyNC9kZmEvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG5cbmV4cG9ydHMuREZBID0gcmVxdWlyZSgnLi9ERkEnKS5ERkE7XG5leHBvcnRzLkRGQVNlcmlhbGl6ZXIgPSByZXF1aXJlKCcuL0RGQVNlcmlhbGl6ZXInKS5ERkFTZXJpYWxpemVyO1xuZXhwb3J0cy5MZXhlckRGQVNlcmlhbGl6ZXIgPSByZXF1aXJlKCcuL0RGQVNlcmlhbGl6ZXInKS5MZXhlckRGQVNlcmlhbGl6ZXI7XG5leHBvcnRzLlByZWRQcmVkaWN0aW9uID0gcmVxdWlyZSgnLi9ERkFTdGF0ZScpLlByZWRQcmVkaWN0aW9uOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/dfa/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/DiagnosticErrorListener.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/error/DiagnosticErrorListener.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\n//\n// This implementation of {@link ANTLRErrorListener} can be used to identify\n// certain potential correctness and performance problems in grammars. \"Reports\"\n// are made by calling {@link Parser//notifyErrorListeners} with the appropriate\n// message.\n//\n// <ul>\n// <li><b>Ambiguities</b>: These are cases where more than one path through the\n// grammar can match the input.</li>\n// <li><b>Weak context sensitivity</b>: These are cases where full-context\n// prediction resolved an SLL conflict to a unique alternative which equaled the\n// minimum alternative of the SLL conflict.</li>\n// <li><b>Strong (forced) context sensitivity</b>: These are cases where the\n// full-context prediction resolved an SLL conflict to a unique alternative,\n// <em>and</em> the minimum alternative of the SLL conflict was found to not be\n// a truly viable alternative. Two-stage parsing cannot be used for inputs where\n// this situation occurs.</li>\n// </ul>\n\nvar BitSet = (__webpack_require__(/*! ./../Utils */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Utils.js\").BitSet);\nvar ErrorListener = (__webpack_require__(/*! ./ErrorListener */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/ErrorListener.js\").ErrorListener);\nvar Interval = (__webpack_require__(/*! ./../IntervalSet */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/IntervalSet.js\").Interval);\n\nfunction DiagnosticErrorListener(exactOnly) {\n\tErrorListener.call(this);\n\texactOnly = exactOnly || true;\n\t// whether all ambiguities or only exact ambiguities are reported.\n\tthis.exactOnly = exactOnly;\n\treturn this;\n}\n\nDiagnosticErrorListener.prototype = Object.create(ErrorListener.prototype);\nDiagnosticErrorListener.prototype.constructor = DiagnosticErrorListener;\n\nDiagnosticErrorListener.prototype.reportAmbiguity = function (recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n\tif (this.exactOnly && !exact) {\n\t\treturn;\n\t}\n\tvar msg = \"reportAmbiguity d=\" + this.getDecisionDescription(recognizer, dfa) + \": ambigAlts=\" + this.getConflictingAlts(ambigAlts, configs) + \", input='\" + recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\";\n\trecognizer.notifyErrorListeners(msg);\n};\n\nDiagnosticErrorListener.prototype.reportAttemptingFullContext = function (recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n\tvar msg = \"reportAttemptingFullContext d=\" + this.getDecisionDescription(recognizer, dfa) + \", input='\" + recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\";\n\trecognizer.notifyErrorListeners(msg);\n};\n\nDiagnosticErrorListener.prototype.reportContextSensitivity = function (recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n\tvar msg = \"reportContextSensitivity d=\" + this.getDecisionDescription(recognizer, dfa) + \", input='\" + recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\";\n\trecognizer.notifyErrorListeners(msg);\n};\n\nDiagnosticErrorListener.prototype.getDecisionDescription = function (recognizer, dfa) {\n\tvar decision = dfa.decision;\n\tvar ruleIndex = dfa.atnStartState.ruleIndex;\n\n\tvar ruleNames = recognizer.ruleNames;\n\tif (ruleIndex < 0 || ruleIndex >= ruleNames.length) {\n\t\treturn \"\" + decision;\n\t}\n\tvar ruleName = ruleNames[ruleIndex] || null;\n\tif (ruleName === null || ruleName.length === 0) {\n\t\treturn \"\" + decision;\n\t}\n\treturn \"\" + decision + \" (\" + ruleName + \")\";\n};\n\n//\n// Computes the set of conflicting or ambiguous alternatives from a\n// configuration set, if that information was not already provided by the\n// parser.\n//\n// @param reportedAlts The set of conflicting or ambiguous alternatives, as\n// reported by the parser.\n// @param configs The conflicting or ambiguous configuration set.\n// @return Returns {@code reportedAlts} if it is not {@code null}, otherwise\n// returns the set of alternatives represented in {@code configs}.\n//\nDiagnosticErrorListener.prototype.getConflictingAlts = function (reportedAlts, configs) {\n\tif (reportedAlts !== null) {\n\t\treturn reportedAlts;\n\t}\n\tvar result = new BitSet();\n\tfor (var i = 0; i < configs.items.length; i++) {\n\t\tresult.add(configs.items[i].alt);\n\t}\n\treturn \"{\" + result.values().join(\", \") + \"}\";\n};\n\nexports.DiagnosticErrorListener = DiagnosticErrorListener;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L2Vycm9yL0RpYWdub3N0aWNFcnJvckxpc3RlbmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJCQUEyQiwwQkFBMEI7QUFDckQ7QUFDQSx3QkFBd0Isb0NBQW9DO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsYUFBYSxpSEFBNEI7QUFDekMsb0JBQW9CLDJJQUF3QztBQUM1RCxlQUFlLCtIQUFvQzs7QUFFbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixvQkFBb0IsY0FBYyxXQUFXO0FBQ2pFLG1EQUFtRCxjQUFjO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiwwQkFBMEI7QUFDM0M7QUFDQTtBQUNBLFVBQVUsbUNBQW1DO0FBQzdDOztBQUVBLCtCQUErQiIsInNvdXJjZXMiOlsiL1VzZXJzL21hYy9mbG93cG9ydC9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L2Vycm9yL0RpYWdub3N0aWNFcnJvckxpc3RlbmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy9cbi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cbi8vXG5cbi8vXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIG9mIHtAbGluayBBTlRMUkVycm9yTGlzdGVuZXJ9IGNhbiBiZSB1c2VkIHRvIGlkZW50aWZ5XG4vLyBjZXJ0YWluIHBvdGVudGlhbCBjb3JyZWN0bmVzcyBhbmQgcGVyZm9ybWFuY2UgcHJvYmxlbXMgaW4gZ3JhbW1hcnMuIFwiUmVwb3J0c1wiXG4vLyBhcmUgbWFkZSBieSBjYWxsaW5nIHtAbGluayBQYXJzZXIvL25vdGlmeUVycm9yTGlzdGVuZXJzfSB3aXRoIHRoZSBhcHByb3ByaWF0ZVxuLy8gbWVzc2FnZS5cbi8vXG4vLyA8dWw+XG4vLyA8bGk+PGI+QW1iaWd1aXRpZXM8L2I+OiBUaGVzZSBhcmUgY2FzZXMgd2hlcmUgbW9yZSB0aGFuIG9uZSBwYXRoIHRocm91Z2ggdGhlXG4vLyBncmFtbWFyIGNhbiBtYXRjaCB0aGUgaW5wdXQuPC9saT5cbi8vIDxsaT48Yj5XZWFrIGNvbnRleHQgc2Vuc2l0aXZpdHk8L2I+OiBUaGVzZSBhcmUgY2FzZXMgd2hlcmUgZnVsbC1jb250ZXh0XG4vLyBwcmVkaWN0aW9uIHJlc29sdmVkIGFuIFNMTCBjb25mbGljdCB0byBhIHVuaXF1ZSBhbHRlcm5hdGl2ZSB3aGljaCBlcXVhbGVkIHRoZVxuLy8gbWluaW11bSBhbHRlcm5hdGl2ZSBvZiB0aGUgU0xMIGNvbmZsaWN0LjwvbGk+XG4vLyA8bGk+PGI+U3Ryb25nIChmb3JjZWQpIGNvbnRleHQgc2Vuc2l0aXZpdHk8L2I+OiBUaGVzZSBhcmUgY2FzZXMgd2hlcmUgdGhlXG4vLyBmdWxsLWNvbnRleHQgcHJlZGljdGlvbiByZXNvbHZlZCBhbiBTTEwgY29uZmxpY3QgdG8gYSB1bmlxdWUgYWx0ZXJuYXRpdmUsXG4vLyA8ZW0+YW5kPC9lbT4gdGhlIG1pbmltdW0gYWx0ZXJuYXRpdmUgb2YgdGhlIFNMTCBjb25mbGljdCB3YXMgZm91bmQgdG8gbm90IGJlXG4vLyBhIHRydWx5IHZpYWJsZSBhbHRlcm5hdGl2ZS4gVHdvLXN0YWdlIHBhcnNpbmcgY2Fubm90IGJlIHVzZWQgZm9yIGlucHV0cyB3aGVyZVxuLy8gdGhpcyBzaXR1YXRpb24gb2NjdXJzLjwvbGk+XG4vLyA8L3VsPlxuXG52YXIgQml0U2V0ID0gcmVxdWlyZSgnLi8uLi9VdGlscycpLkJpdFNldDtcbnZhciBFcnJvckxpc3RlbmVyID0gcmVxdWlyZSgnLi9FcnJvckxpc3RlbmVyJykuRXJyb3JMaXN0ZW5lcjtcbnZhciBJbnRlcnZhbCA9IHJlcXVpcmUoJy4vLi4vSW50ZXJ2YWxTZXQnKS5JbnRlcnZhbDtcblxuZnVuY3Rpb24gRGlhZ25vc3RpY0Vycm9yTGlzdGVuZXIoZXhhY3RPbmx5KSB7XG5cdEVycm9yTGlzdGVuZXIuY2FsbCh0aGlzKTtcblx0ZXhhY3RPbmx5ID0gZXhhY3RPbmx5IHx8IHRydWU7XG5cdC8vIHdoZXRoZXIgYWxsIGFtYmlndWl0aWVzIG9yIG9ubHkgZXhhY3QgYW1iaWd1aXRpZXMgYXJlIHJlcG9ydGVkLlxuXHR0aGlzLmV4YWN0T25seSA9IGV4YWN0T25seTtcblx0cmV0dXJuIHRoaXM7XG59XG5cbkRpYWdub3N0aWNFcnJvckxpc3RlbmVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3JMaXN0ZW5lci5wcm90b3R5cGUpO1xuRGlhZ25vc3RpY0Vycm9yTGlzdGVuZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRGlhZ25vc3RpY0Vycm9yTGlzdGVuZXI7XG5cbkRpYWdub3N0aWNFcnJvckxpc3RlbmVyLnByb3RvdHlwZS5yZXBvcnRBbWJpZ3VpdHkgPSBmdW5jdGlvbiAocmVjb2duaXplciwgZGZhLCBzdGFydEluZGV4LCBzdG9wSW5kZXgsIGV4YWN0LCBhbWJpZ0FsdHMsIGNvbmZpZ3MpIHtcblx0aWYgKHRoaXMuZXhhY3RPbmx5ICYmICFleGFjdCkge1xuXHRcdHJldHVybjtcblx0fVxuXHR2YXIgbXNnID0gXCJyZXBvcnRBbWJpZ3VpdHkgZD1cIiArIHRoaXMuZ2V0RGVjaXNpb25EZXNjcmlwdGlvbihyZWNvZ25pemVyLCBkZmEpICsgXCI6IGFtYmlnQWx0cz1cIiArIHRoaXMuZ2V0Q29uZmxpY3RpbmdBbHRzKGFtYmlnQWx0cywgY29uZmlncykgKyBcIiwgaW5wdXQ9J1wiICsgcmVjb2duaXplci5nZXRUb2tlblN0cmVhbSgpLmdldFRleHQobmV3IEludGVydmFsKHN0YXJ0SW5kZXgsIHN0b3BJbmRleCkpICsgXCInXCI7XG5cdHJlY29nbml6ZXIubm90aWZ5RXJyb3JMaXN0ZW5lcnMobXNnKTtcbn07XG5cbkRpYWdub3N0aWNFcnJvckxpc3RlbmVyLnByb3RvdHlwZS5yZXBvcnRBdHRlbXB0aW5nRnVsbENvbnRleHQgPSBmdW5jdGlvbiAocmVjb2duaXplciwgZGZhLCBzdGFydEluZGV4LCBzdG9wSW5kZXgsIGNvbmZsaWN0aW5nQWx0cywgY29uZmlncykge1xuXHR2YXIgbXNnID0gXCJyZXBvcnRBdHRlbXB0aW5nRnVsbENvbnRleHQgZD1cIiArIHRoaXMuZ2V0RGVjaXNpb25EZXNjcmlwdGlvbihyZWNvZ25pemVyLCBkZmEpICsgXCIsIGlucHV0PSdcIiArIHJlY29nbml6ZXIuZ2V0VG9rZW5TdHJlYW0oKS5nZXRUZXh0KG5ldyBJbnRlcnZhbChzdGFydEluZGV4LCBzdG9wSW5kZXgpKSArIFwiJ1wiO1xuXHRyZWNvZ25pemVyLm5vdGlmeUVycm9yTGlzdGVuZXJzKG1zZyk7XG59O1xuXG5EaWFnbm9zdGljRXJyb3JMaXN0ZW5lci5wcm90b3R5cGUucmVwb3J0Q29udGV4dFNlbnNpdGl2aXR5ID0gZnVuY3Rpb24gKHJlY29nbml6ZXIsIGRmYSwgc3RhcnRJbmRleCwgc3RvcEluZGV4LCBwcmVkaWN0aW9uLCBjb25maWdzKSB7XG5cdHZhciBtc2cgPSBcInJlcG9ydENvbnRleHRTZW5zaXRpdml0eSBkPVwiICsgdGhpcy5nZXREZWNpc2lvbkRlc2NyaXB0aW9uKHJlY29nbml6ZXIsIGRmYSkgKyBcIiwgaW5wdXQ9J1wiICsgcmVjb2duaXplci5nZXRUb2tlblN0cmVhbSgpLmdldFRleHQobmV3IEludGVydmFsKHN0YXJ0SW5kZXgsIHN0b3BJbmRleCkpICsgXCInXCI7XG5cdHJlY29nbml6ZXIubm90aWZ5RXJyb3JMaXN0ZW5lcnMobXNnKTtcbn07XG5cbkRpYWdub3N0aWNFcnJvckxpc3RlbmVyLnByb3RvdHlwZS5nZXREZWNpc2lvbkRlc2NyaXB0aW9uID0gZnVuY3Rpb24gKHJlY29nbml6ZXIsIGRmYSkge1xuXHR2YXIgZGVjaXNpb24gPSBkZmEuZGVjaXNpb247XG5cdHZhciBydWxlSW5kZXggPSBkZmEuYXRuU3RhcnRTdGF0ZS5ydWxlSW5kZXg7XG5cblx0dmFyIHJ1bGVOYW1lcyA9IHJlY29nbml6ZXIucnVsZU5hbWVzO1xuXHRpZiAocnVsZUluZGV4IDwgMCB8fCBydWxlSW5kZXggPj0gcnVsZU5hbWVzLmxlbmd0aCkge1xuXHRcdHJldHVybiBcIlwiICsgZGVjaXNpb247XG5cdH1cblx0dmFyIHJ1bGVOYW1lID0gcnVsZU5hbWVzW3J1bGVJbmRleF0gfHwgbnVsbDtcblx0aWYgKHJ1bGVOYW1lID09PSBudWxsIHx8IHJ1bGVOYW1lLmxlbmd0aCA9PT0gMCkge1xuXHRcdHJldHVybiBcIlwiICsgZGVjaXNpb247XG5cdH1cblx0cmV0dXJuIFwiXCIgKyBkZWNpc2lvbiArIFwiIChcIiArIHJ1bGVOYW1lICsgXCIpXCI7XG59O1xuXG4vL1xuLy8gQ29tcHV0ZXMgdGhlIHNldCBvZiBjb25mbGljdGluZyBvciBhbWJpZ3VvdXMgYWx0ZXJuYXRpdmVzIGZyb20gYVxuLy8gY29uZmlndXJhdGlvbiBzZXQsIGlmIHRoYXQgaW5mb3JtYXRpb24gd2FzIG5vdCBhbHJlYWR5IHByb3ZpZGVkIGJ5IHRoZVxuLy8gcGFyc2VyLlxuLy9cbi8vIEBwYXJhbSByZXBvcnRlZEFsdHMgVGhlIHNldCBvZiBjb25mbGljdGluZyBvciBhbWJpZ3VvdXMgYWx0ZXJuYXRpdmVzLCBhc1xuLy8gcmVwb3J0ZWQgYnkgdGhlIHBhcnNlci5cbi8vIEBwYXJhbSBjb25maWdzIFRoZSBjb25mbGljdGluZyBvciBhbWJpZ3VvdXMgY29uZmlndXJhdGlvbiBzZXQuXG4vLyBAcmV0dXJuIFJldHVybnMge0Bjb2RlIHJlcG9ydGVkQWx0c30gaWYgaXQgaXMgbm90IHtAY29kZSBudWxsfSwgb3RoZXJ3aXNlXG4vLyByZXR1cm5zIHRoZSBzZXQgb2YgYWx0ZXJuYXRpdmVzIHJlcHJlc2VudGVkIGluIHtAY29kZSBjb25maWdzfS5cbi8vXG5EaWFnbm9zdGljRXJyb3JMaXN0ZW5lci5wcm90b3R5cGUuZ2V0Q29uZmxpY3RpbmdBbHRzID0gZnVuY3Rpb24gKHJlcG9ydGVkQWx0cywgY29uZmlncykge1xuXHRpZiAocmVwb3J0ZWRBbHRzICE9PSBudWxsKSB7XG5cdFx0cmV0dXJuIHJlcG9ydGVkQWx0cztcblx0fVxuXHR2YXIgcmVzdWx0ID0gbmV3IEJpdFNldCgpO1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGNvbmZpZ3MuaXRlbXMubGVuZ3RoOyBpKyspIHtcblx0XHRyZXN1bHQuYWRkKGNvbmZpZ3MuaXRlbXNbaV0uYWx0KTtcblx0fVxuXHRyZXR1cm4gXCJ7XCIgKyByZXN1bHQudmFsdWVzKCkuam9pbihcIiwgXCIpICsgXCJ9XCI7XG59O1xuXG5leHBvcnRzLkRpYWdub3N0aWNFcnJvckxpc3RlbmVyID0gRGlhZ25vc3RpY0Vycm9yTGlzdGVuZXI7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/DiagnosticErrorListener.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/ErrorListener.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/error/ErrorListener.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\n//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n// Provides an empty default implementation of {@link ANTLRErrorListener}. The\n// default implementation of each method does nothing, but can be overridden as\n// necessary.\n\nfunction ErrorListener() {\n  return this;\n}\n\nErrorListener.prototype.syntaxError = function (recognizer, offendingSymbol, line, column, msg, e) {};\n\nErrorListener.prototype.reportAmbiguity = function (recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {};\n\nErrorListener.prototype.reportAttemptingFullContext = function (recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {};\n\nErrorListener.prototype.reportContextSensitivity = function (recognizer, dfa, startIndex, stopIndex, prediction, configs) {};\n\nfunction ConsoleErrorListener() {\n  ErrorListener.call(this);\n  return this;\n}\n\nConsoleErrorListener.prototype = Object.create(ErrorListener.prototype);\nConsoleErrorListener.prototype.constructor = ConsoleErrorListener;\n\n//\n// Provides a default instance of {@link ConsoleErrorListener}.\n//\nConsoleErrorListener.INSTANCE = new ConsoleErrorListener();\n\n//\n// {@inheritDoc}\n//\n// <p>\n// This implementation prints messages to {@link System//err} containing the\n// values of {@code line}, {@code charPositionInLine}, and {@code msg} using\n// the following format.</p>\n//\n// <pre>\n// line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>\n// </pre>\n//\nConsoleErrorListener.prototype.syntaxError = function (recognizer, offendingSymbol, line, column, msg, e) {\n  console.error(\"line \" + line + \":\" + column + \" \" + msg);\n};\n\nfunction ProxyErrorListener(delegates) {\n  ErrorListener.call(this);\n  if (delegates === null) {\n    throw \"delegates\";\n  }\n  this.delegates = delegates;\n  return this;\n}\n\nProxyErrorListener.prototype = Object.create(ErrorListener.prototype);\nProxyErrorListener.prototype.constructor = ProxyErrorListener;\n\nProxyErrorListener.prototype.syntaxError = function (recognizer, offendingSymbol, line, column, msg, e) {\n  this.delegates.map(function (d) {\n    d.syntaxError(recognizer, offendingSymbol, line, column, msg, e);\n  });\n};\n\nProxyErrorListener.prototype.reportAmbiguity = function (recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n  this.delegates.map(function (d) {\n    d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs);\n  });\n};\n\nProxyErrorListener.prototype.reportAttemptingFullContext = function (recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n  this.delegates.map(function (d) {\n    d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs);\n  });\n};\n\nProxyErrorListener.prototype.reportContextSensitivity = function (recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n  this.delegates.map(function (d) {\n    d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs);\n  });\n};\n\nexports.ErrorListener = ErrorListener;\nexports.ConsoleErrorListener = ConsoleErrorListener;\nexports.ProxyErrorListener = ProxyErrorListener;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L2Vycm9yL0Vycm9yTGlzdGVuZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnREFBZ0QseUJBQXlCO0FBQ3pFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxtQ0FBbUMsMkJBQTJCO0FBQzlEO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLDJDQUEyQyxtQkFBbUI7QUFDOUQsY0FBYyxXQUFXLEdBQUcseUJBQXlCLE9BQU8sV0FBVztBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQSxxQkFBcUI7QUFDckIsNEJBQTRCO0FBQzVCLDBCQUEwQiIsInNvdXJjZXMiOlsiL1VzZXJzL21hYy9mbG93cG9ydC9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L2Vycm9yL0Vycm9yTGlzdGVuZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vXG4vKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG5cbi8vIFByb3ZpZGVzIGFuIGVtcHR5IGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIEFOVExSRXJyb3JMaXN0ZW5lcn0uIFRoZVxuLy8gZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBlYWNoIG1ldGhvZCBkb2VzIG5vdGhpbmcsIGJ1dCBjYW4gYmUgb3ZlcnJpZGRlbiBhc1xuLy8gbmVjZXNzYXJ5LlxuXG5mdW5jdGlvbiBFcnJvckxpc3RlbmVyKCkge1xuICByZXR1cm4gdGhpcztcbn1cblxuRXJyb3JMaXN0ZW5lci5wcm90b3R5cGUuc3ludGF4RXJyb3IgPSBmdW5jdGlvbiAocmVjb2duaXplciwgb2ZmZW5kaW5nU3ltYm9sLCBsaW5lLCBjb2x1bW4sIG1zZywgZSkge307XG5cbkVycm9yTGlzdGVuZXIucHJvdG90eXBlLnJlcG9ydEFtYmlndWl0eSA9IGZ1bmN0aW9uIChyZWNvZ25pemVyLCBkZmEsIHN0YXJ0SW5kZXgsIHN0b3BJbmRleCwgZXhhY3QsIGFtYmlnQWx0cywgY29uZmlncykge307XG5cbkVycm9yTGlzdGVuZXIucHJvdG90eXBlLnJlcG9ydEF0dGVtcHRpbmdGdWxsQ29udGV4dCA9IGZ1bmN0aW9uIChyZWNvZ25pemVyLCBkZmEsIHN0YXJ0SW5kZXgsIHN0b3BJbmRleCwgY29uZmxpY3RpbmdBbHRzLCBjb25maWdzKSB7fTtcblxuRXJyb3JMaXN0ZW5lci5wcm90b3R5cGUucmVwb3J0Q29udGV4dFNlbnNpdGl2aXR5ID0gZnVuY3Rpb24gKHJlY29nbml6ZXIsIGRmYSwgc3RhcnRJbmRleCwgc3RvcEluZGV4LCBwcmVkaWN0aW9uLCBjb25maWdzKSB7fTtcblxuZnVuY3Rpb24gQ29uc29sZUVycm9yTGlzdGVuZXIoKSB7XG4gIEVycm9yTGlzdGVuZXIuY2FsbCh0aGlzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbkNvbnNvbGVFcnJvckxpc3RlbmVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3JMaXN0ZW5lci5wcm90b3R5cGUpO1xuQ29uc29sZUVycm9yTGlzdGVuZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29uc29sZUVycm9yTGlzdGVuZXI7XG5cbi8vXG4vLyBQcm92aWRlcyBhIGRlZmF1bHQgaW5zdGFuY2Ugb2Yge0BsaW5rIENvbnNvbGVFcnJvckxpc3RlbmVyfS5cbi8vXG5Db25zb2xlRXJyb3JMaXN0ZW5lci5JTlNUQU5DRSA9IG5ldyBDb25zb2xlRXJyb3JMaXN0ZW5lcigpO1xuXG4vL1xuLy8ge0Bpbmhlcml0RG9jfVxuLy9cbi8vIDxwPlxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBwcmludHMgbWVzc2FnZXMgdG8ge0BsaW5rIFN5c3RlbS8vZXJyfSBjb250YWluaW5nIHRoZVxuLy8gdmFsdWVzIG9mIHtAY29kZSBsaW5lfSwge0Bjb2RlIGNoYXJQb3NpdGlvbkluTGluZX0sIGFuZCB7QGNvZGUgbXNnfSB1c2luZ1xuLy8gdGhlIGZvbGxvd2luZyBmb3JtYXQuPC9wPlxuLy9cbi8vIDxwcmU+XG4vLyBsaW5lIDxlbT5saW5lPC9lbT46PGVtPmNoYXJQb3NpdGlvbkluTGluZTwvZW0+IDxlbT5tc2c8L2VtPlxuLy8gPC9wcmU+XG4vL1xuQ29uc29sZUVycm9yTGlzdGVuZXIucHJvdG90eXBlLnN5bnRheEVycm9yID0gZnVuY3Rpb24gKHJlY29nbml6ZXIsIG9mZmVuZGluZ1N5bWJvbCwgbGluZSwgY29sdW1uLCBtc2csIGUpIHtcbiAgY29uc29sZS5lcnJvcihcImxpbmUgXCIgKyBsaW5lICsgXCI6XCIgKyBjb2x1bW4gKyBcIiBcIiArIG1zZyk7XG59O1xuXG5mdW5jdGlvbiBQcm94eUVycm9yTGlzdGVuZXIoZGVsZWdhdGVzKSB7XG4gIEVycm9yTGlzdGVuZXIuY2FsbCh0aGlzKTtcbiAgaWYgKGRlbGVnYXRlcyA9PT0gbnVsbCkge1xuICAgIHRocm93IFwiZGVsZWdhdGVzXCI7XG4gIH1cbiAgdGhpcy5kZWxlZ2F0ZXMgPSBkZWxlZ2F0ZXM7XG4gIHJldHVybiB0aGlzO1xufVxuXG5Qcm94eUVycm9yTGlzdGVuZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvckxpc3RlbmVyLnByb3RvdHlwZSk7XG5Qcm94eUVycm9yTGlzdGVuZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUHJveHlFcnJvckxpc3RlbmVyO1xuXG5Qcm94eUVycm9yTGlzdGVuZXIucHJvdG90eXBlLnN5bnRheEVycm9yID0gZnVuY3Rpb24gKHJlY29nbml6ZXIsIG9mZmVuZGluZ1N5bWJvbCwgbGluZSwgY29sdW1uLCBtc2csIGUpIHtcbiAgdGhpcy5kZWxlZ2F0ZXMubWFwKGZ1bmN0aW9uIChkKSB7XG4gICAgZC5zeW50YXhFcnJvcihyZWNvZ25pemVyLCBvZmZlbmRpbmdTeW1ib2wsIGxpbmUsIGNvbHVtbiwgbXNnLCBlKTtcbiAgfSk7XG59O1xuXG5Qcm94eUVycm9yTGlzdGVuZXIucHJvdG90eXBlLnJlcG9ydEFtYmlndWl0eSA9IGZ1bmN0aW9uIChyZWNvZ25pemVyLCBkZmEsIHN0YXJ0SW5kZXgsIHN0b3BJbmRleCwgZXhhY3QsIGFtYmlnQWx0cywgY29uZmlncykge1xuICB0aGlzLmRlbGVnYXRlcy5tYXAoZnVuY3Rpb24gKGQpIHtcbiAgICBkLnJlcG9ydEFtYmlndWl0eShyZWNvZ25pemVyLCBkZmEsIHN0YXJ0SW5kZXgsIHN0b3BJbmRleCwgZXhhY3QsIGFtYmlnQWx0cywgY29uZmlncyk7XG4gIH0pO1xufTtcblxuUHJveHlFcnJvckxpc3RlbmVyLnByb3RvdHlwZS5yZXBvcnRBdHRlbXB0aW5nRnVsbENvbnRleHQgPSBmdW5jdGlvbiAocmVjb2duaXplciwgZGZhLCBzdGFydEluZGV4LCBzdG9wSW5kZXgsIGNvbmZsaWN0aW5nQWx0cywgY29uZmlncykge1xuICB0aGlzLmRlbGVnYXRlcy5tYXAoZnVuY3Rpb24gKGQpIHtcbiAgICBkLnJlcG9ydEF0dGVtcHRpbmdGdWxsQ29udGV4dChyZWNvZ25pemVyLCBkZmEsIHN0YXJ0SW5kZXgsIHN0b3BJbmRleCwgY29uZmxpY3RpbmdBbHRzLCBjb25maWdzKTtcbiAgfSk7XG59O1xuXG5Qcm94eUVycm9yTGlzdGVuZXIucHJvdG90eXBlLnJlcG9ydENvbnRleHRTZW5zaXRpdml0eSA9IGZ1bmN0aW9uIChyZWNvZ25pemVyLCBkZmEsIHN0YXJ0SW5kZXgsIHN0b3BJbmRleCwgcHJlZGljdGlvbiwgY29uZmlncykge1xuICB0aGlzLmRlbGVnYXRlcy5tYXAoZnVuY3Rpb24gKGQpIHtcbiAgICBkLnJlcG9ydENvbnRleHRTZW5zaXRpdml0eShyZWNvZ25pemVyLCBkZmEsIHN0YXJ0SW5kZXgsIHN0b3BJbmRleCwgcHJlZGljdGlvbiwgY29uZmlncyk7XG4gIH0pO1xufTtcblxuZXhwb3J0cy5FcnJvckxpc3RlbmVyID0gRXJyb3JMaXN0ZW5lcjtcbmV4cG9ydHMuQ29uc29sZUVycm9yTGlzdGVuZXIgPSBDb25zb2xlRXJyb3JMaXN0ZW5lcjtcbmV4cG9ydHMuUHJveHlFcnJvckxpc3RlbmVyID0gUHJveHlFcnJvckxpc3RlbmVyOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/ErrorListener.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/ErrorStrategy.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/error/ErrorStrategy.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\nvar Token = (__webpack_require__(/*! ./../Token */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Token.js\").Token);\nvar Errors = __webpack_require__(/*! ./Errors */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/Errors.js\");\nvar NoViableAltException = Errors.NoViableAltException;\nvar InputMismatchException = Errors.InputMismatchException;\nvar FailedPredicateException = Errors.FailedPredicateException;\nvar ParseCancellationException = Errors.ParseCancellationException;\nvar ATNState = (__webpack_require__(/*! ./../atn/ATNState */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATNState.js\").ATNState);\nvar Interval = (__webpack_require__(/*! ./../IntervalSet */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/IntervalSet.js\").Interval);\nvar IntervalSet = (__webpack_require__(/*! ./../IntervalSet */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/IntervalSet.js\").IntervalSet);\n\nfunction ErrorStrategy() {}\n\nErrorStrategy.prototype.reset = function (recognizer) {};\n\nErrorStrategy.prototype.recoverInline = function (recognizer) {};\n\nErrorStrategy.prototype.recover = function (recognizer, e) {};\n\nErrorStrategy.prototype.sync = function (recognizer) {};\n\nErrorStrategy.prototype.inErrorRecoveryMode = function (recognizer) {};\n\nErrorStrategy.prototype.reportError = function (recognizer) {};\n\n// This is the default implementation of {@link ANTLRErrorStrategy} used for\n// error reporting and recovery in ANTLR parsers.\n//\nfunction DefaultErrorStrategy() {\n    ErrorStrategy.call(this);\n    // Indicates whether the error strategy is currently \"recovering from an\n    // error\". This is used to suppress reporting multiple error messages while\n    // attempting to recover from a detected syntax error.\n    //\n    // @see //inErrorRecoveryMode\n    //\n    this.errorRecoveryMode = false;\n\n    // The index into the input stream where the last error occurred.\n    // This is used to prevent infinite loops where an error is found\n    // but no token is consumed during recovery...another error is found,\n    // ad nauseum. This is a failsafe mechanism to guarantee that at least\n    // one token/tree node is consumed for two errors.\n    //\n    this.lastErrorIndex = -1;\n    this.lastErrorStates = null;\n    return this;\n}\n\nDefaultErrorStrategy.prototype = Object.create(ErrorStrategy.prototype);\nDefaultErrorStrategy.prototype.constructor = DefaultErrorStrategy;\n\n// <p>The default implementation simply calls {@link //endErrorCondition} to\n// ensure that the handler is not in error recovery mode.</p>\nDefaultErrorStrategy.prototype.reset = function (recognizer) {\n    this.endErrorCondition(recognizer);\n};\n\n//\n// This method is called to enter error recovery mode when a recognition\n// exception is reported.\n//\n// @param recognizer the parser instance\n//\nDefaultErrorStrategy.prototype.beginErrorCondition = function (recognizer) {\n    this.errorRecoveryMode = true;\n};\n\nDefaultErrorStrategy.prototype.inErrorRecoveryMode = function (recognizer) {\n    return this.errorRecoveryMode;\n};\n\n//\n// This method is called to leave error recovery mode after recovering from\n// a recognition exception.\n//\n// @param recognizer\n//\nDefaultErrorStrategy.prototype.endErrorCondition = function (recognizer) {\n    this.errorRecoveryMode = false;\n    this.lastErrorStates = null;\n    this.lastErrorIndex = -1;\n};\n\n//\n// {@inheritDoc}\n//\n// <p>The default implementation simply calls {@link //endErrorCondition}.</p>\n//\nDefaultErrorStrategy.prototype.reportMatch = function (recognizer) {\n    this.endErrorCondition(recognizer);\n};\n\n//\n// {@inheritDoc}\n//\n// <p>The default implementation returns immediately if the handler is already\n// in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}\n// and dispatches the reporting task based on the runtime type of {@code e}\n// according to the following table.</p>\n//\n// <ul>\n// <li>{@link NoViableAltException}: Dispatches the call to\n// {@link //reportNoViableAlternative}</li>\n// <li>{@link InputMismatchException}: Dispatches the call to\n// {@link //reportInputMismatch}</li>\n// <li>{@link FailedPredicateException}: Dispatches the call to\n// {@link //reportFailedPredicate}</li>\n// <li>All other types: calls {@link Parser//notifyErrorListeners} to report\n// the exception</li>\n// </ul>\n//\nDefaultErrorStrategy.prototype.reportError = function (recognizer, e) {\n    // if we've already reported an error and have not matched a token\n    // yet successfully, don't report any errors.\n    if (this.inErrorRecoveryMode(recognizer)) {\n        return; // don't report spurious errors\n    }\n    this.beginErrorCondition(recognizer);\n    if (e instanceof NoViableAltException) {\n        this.reportNoViableAlternative(recognizer, e);\n    } else if (e instanceof InputMismatchException) {\n        this.reportInputMismatch(recognizer, e);\n    } else if (e instanceof FailedPredicateException) {\n        this.reportFailedPredicate(recognizer, e);\n    } else {\n        console.log(\"unknown recognition error type: \" + e.constructor.name);\n        console.log(e.stack);\n        recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);\n    }\n};\n//\n// {@inheritDoc}\n//\n// <p>The default implementation resynchronizes the parser by consuming tokens\n// until we find one in the resynchronization set--loosely the set of tokens\n// that can follow the current rule.</p>\n//\nDefaultErrorStrategy.prototype.recover = function (recognizer, e) {\n    if (this.lastErrorIndex === recognizer.getInputStream().index && this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state) >= 0) {\n        // uh oh, another error at same token index and previously-visited\n        // state in ATN; must be a case where LT(1) is in the recovery\n        // token set so nothing got consumed. Consume a single token\n        // at least to prevent an infinite loop; this is a failsafe.\n        recognizer.consume();\n    }\n    this.lastErrorIndex = recognizer._input.index;\n    if (this.lastErrorStates === null) {\n        this.lastErrorStates = [];\n    }\n    this.lastErrorStates.push(recognizer.state);\n    var followSet = this.getErrorRecoverySet(recognizer);\n    this.consumeUntil(recognizer, followSet);\n};\n\n// The default implementation of {@link ANTLRErrorStrategy//sync} makes sure\n// that the current lookahead symbol is consistent with what were expecting\n// at this point in the ATN. You can call this anytime but ANTLR only\n// generates code to check before subrules/loops and each iteration.\n//\n// <p>Implements Jim Idle's magic sync mechanism in closures and optional\n// subrules. E.g.,</p>\n//\n// <pre>\n// a : sync ( stuff sync )* ;\n// sync : {consume to what can follow sync} ;\n// </pre>\n//\n// At the start of a sub rule upon error, {@link //sync} performs single\n// token deletion, if possible. If it can't do that, it bails on the current\n// rule and uses the default error recovery, which consumes until the\n// resynchronization set of the current rule.\n//\n// <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block\n// with an empty alternative), then the expected set includes what follows\n// the subrule.</p>\n//\n// <p>During loop iteration, it consumes until it sees a token that can start a\n// sub rule or what follows loop. Yes, that is pretty aggressive. We opt to\n// stay in the loop as long as possible.</p>\n//\n// <p><strong>ORIGINS</strong></p>\n//\n// <p>Previous versions of ANTLR did a poor job of their recovery within loops.\n// A single mismatch token or missing token would force the parser to bail\n// out of the entire rules surrounding the loop. So, for rule</p>\n//\n// <pre>\n// classDef : 'class' ID '{' member* '}'\n// </pre>\n//\n// input with an extra token between members would force the parser to\n// consume until it found the next class definition rather than the next\n// member definition of the current class.\n//\n// <p>This functionality cost a little bit of effort because the parser has to\n// compare token set at the start of the loop and at each iteration. If for\n// some reason speed is suffering for you, you can turn off this\n// functionality by simply overriding this method as a blank { }.</p>\n//\nDefaultErrorStrategy.prototype.sync = function (recognizer) {\n    // If already recovering, don't try to sync\n    if (this.inErrorRecoveryMode(recognizer)) {\n        return;\n    }\n    var s = recognizer._interp.atn.states[recognizer.state];\n    var la = recognizer.getTokenStream().LA(1);\n    // try cheaper subset first; might get lucky. seems to shave a wee bit off\n    var nextTokens = recognizer.atn.nextTokens(s);\n    if (nextTokens.contains(Token.EPSILON) || nextTokens.contains(la)) {\n        return;\n    }\n    switch (s.stateType) {\n        case ATNState.BLOCK_START:\n        case ATNState.STAR_BLOCK_START:\n        case ATNState.PLUS_BLOCK_START:\n        case ATNState.STAR_LOOP_ENTRY:\n            // report error and recover if possible\n            if (this.singleTokenDeletion(recognizer) !== null) {\n                return;\n            } else {\n                throw new InputMismatchException(recognizer);\n            }\n            break;\n        case ATNState.PLUS_LOOP_BACK:\n        case ATNState.STAR_LOOP_BACK:\n            this.reportUnwantedToken(recognizer);\n            var expecting = new IntervalSet();\n            expecting.addSet(recognizer.getExpectedTokens());\n            var whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer));\n            this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);\n            break;\n        default:\n        // do nothing if we can't identify the exact kind of ATN state\n    }\n};\n\n// This is called by {@link //reportError} when the exception is a\n// {@link NoViableAltException}.\n//\n// @see //reportError\n//\n// @param recognizer the parser instance\n// @param e the recognition exception\n//\nDefaultErrorStrategy.prototype.reportNoViableAlternative = function (recognizer, e) {\n    var tokens = recognizer.getTokenStream();\n    var input;\n    if (tokens !== null) {\n        if (e.startToken.type === Token.EOF) {\n            input = \"<EOF>\";\n        } else {\n            input = tokens.getText(new Interval(e.startToken, e.offendingToken));\n        }\n    } else {\n        input = \"<unknown input>\";\n    }\n    var msg = \"no viable alternative at input \" + this.escapeWSAndQuote(input);\n    recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n};\n\n//\n// This is called by {@link //reportError} when the exception is an\n// {@link InputMismatchException}.\n//\n// @see //reportError\n//\n// @param recognizer the parser instance\n// @param e the recognition exception\n//\nDefaultErrorStrategy.prototype.reportInputMismatch = function (recognizer, e) {\n    var msg = \"mismatched input \" + this.getTokenErrorDisplay(e.offendingToken) + \" expecting \" + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames);\n    recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n};\n\n//\n// This is called by {@link //reportError} when the exception is a\n// {@link FailedPredicateException}.\n//\n// @see //reportError\n//\n// @param recognizer the parser instance\n// @param e the recognition exception\n//\nDefaultErrorStrategy.prototype.reportFailedPredicate = function (recognizer, e) {\n    var ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex];\n    var msg = \"rule \" + ruleName + \" \" + e.message;\n    recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n};\n\n// This method is called to report a syntax error which requires the removal\n// of a token from the input stream. At the time this method is called, the\n// erroneous symbol is current {@code LT(1)} symbol and has not yet been\n// removed from the input stream. When this method returns,\n// {@code recognizer} is in error recovery mode.\n//\n// <p>This method is called when {@link //singleTokenDeletion} identifies\n// single-token deletion as a viable recovery strategy for a mismatched\n// input error.</p>\n//\n// <p>The default implementation simply returns if the handler is already in\n// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to\n// enter error recovery mode, followed by calling\n// {@link Parser//notifyErrorListeners}.</p>\n//\n// @param recognizer the parser instance\n//\nDefaultErrorStrategy.prototype.reportUnwantedToken = function (recognizer) {\n    if (this.inErrorRecoveryMode(recognizer)) {\n        return;\n    }\n    this.beginErrorCondition(recognizer);\n    var t = recognizer.getCurrentToken();\n    var tokenName = this.getTokenErrorDisplay(t);\n    var expecting = this.getExpectedTokens(recognizer);\n    var msg = \"extraneous input \" + tokenName + \" expecting \" + expecting.toString(recognizer.literalNames, recognizer.symbolicNames);\n    recognizer.notifyErrorListeners(msg, t, null);\n};\n// This method is called to report a syntax error which requires the\n// insertion of a missing token into the input stream. At the time this\n// method is called, the missing token has not yet been inserted. When this\n// method returns, {@code recognizer} is in error recovery mode.\n//\n// <p>This method is called when {@link //singleTokenInsertion} identifies\n// single-token insertion as a viable recovery strategy for a mismatched\n// input error.</p>\n//\n// <p>The default implementation simply returns if the handler is already in\n// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to\n// enter error recovery mode, followed by calling\n// {@link Parser//notifyErrorListeners}.</p>\n//\n// @param recognizer the parser instance\n//\nDefaultErrorStrategy.prototype.reportMissingToken = function (recognizer) {\n    if (this.inErrorRecoveryMode(recognizer)) {\n        return;\n    }\n    this.beginErrorCondition(recognizer);\n    var t = recognizer.getCurrentToken();\n    var expecting = this.getExpectedTokens(recognizer);\n    var msg = \"missing \" + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) + \" at \" + this.getTokenErrorDisplay(t);\n    recognizer.notifyErrorListeners(msg, t, null);\n};\n\n// <p>The default implementation attempts to recover from the mismatched input\n// by using single token insertion and deletion as described below. If the\n// recovery attempt fails, this method throws an\n// {@link InputMismatchException}.</p>\n//\n// <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>\n//\n// <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the\n// right token, however, then assume {@code LA(1)} is some extra spurious\n// token and delete it. Then consume and return the next token (which was\n// the {@code LA(2)} token) as the successful result of the match operation.</p>\n//\n// <p>This recovery strategy is implemented by {@link\n// //singleTokenDeletion}.</p>\n//\n// <p><strong>MISSING TOKEN</strong> (single token insertion)</p>\n//\n// <p>If current token (at {@code LA(1)}) is consistent with what could come\n// after the expected {@code LA(1)} token, then assume the token is missing\n// and use the parser's {@link TokenFactory} to create it on the fly. The\n// \"insertion\" is performed by returning the created token as the successful\n// result of the match operation.</p>\n//\n// <p>This recovery strategy is implemented by {@link\n// //singleTokenInsertion}.</p>\n//\n// <p><strong>EXAMPLE</strong></p>\n//\n// <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When\n// the parser returns from the nested call to {@code expr}, it will have\n// call chain:</p>\n//\n// <pre>\n// stat &rarr; expr &rarr; atom\n// </pre>\n//\n// and it will be trying to match the {@code ')'} at this point in the\n// derivation:\n//\n// <pre>\n// =&gt; ID '=' '(' INT ')' ('+' atom)* ';'\n// ^\n// </pre>\n//\n// The attempt to match {@code ')'} will fail when it sees {@code ';'} and\n// call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}\n// is in the set of tokens that can follow the {@code ')'} token reference\n// in rule {@code atom}. It can assume that you forgot the {@code ')'}.\n//\nDefaultErrorStrategy.prototype.recoverInline = function (recognizer) {\n    // SINGLE TOKEN DELETION\n    var matchedSymbol = this.singleTokenDeletion(recognizer);\n    if (matchedSymbol !== null) {\n        // we have deleted the extra token.\n        // now, move past ttype token as if all were ok\n        recognizer.consume();\n        return matchedSymbol;\n    }\n    // SINGLE TOKEN INSERTION\n    if (this.singleTokenInsertion(recognizer)) {\n        return this.getMissingSymbol(recognizer);\n    }\n    // even that didn't work; must throw the exception\n    throw new InputMismatchException(recognizer);\n};\n\n//\n// This method implements the single-token insertion inline error recovery\n// strategy. It is called by {@link //recoverInline} if the single-token\n// deletion strategy fails to recover from the mismatched input. If this\n// method returns {@code true}, {@code recognizer} will be in error recovery\n// mode.\n//\n// <p>This method determines whether or not single-token insertion is viable by\n// checking if the {@code LA(1)} input symbol could be successfully matched\n// if it were instead the {@code LA(2)} symbol. If this method returns\n// {@code true}, the caller is responsible for creating and inserting a\n// token with the correct type to produce this behavior.</p>\n//\n// @param recognizer the parser instance\n// @return {@code true} if single-token insertion is a viable recovery\n// strategy for the current mismatched input, otherwise {@code false}\n//\nDefaultErrorStrategy.prototype.singleTokenInsertion = function (recognizer) {\n    var currentSymbolType = recognizer.getTokenStream().LA(1);\n    // if current token is consistent with what could come after current\n    // ATN state, then we know we're missing a token; error recovery\n    // is free to conjure up and insert the missing token\n    var atn = recognizer._interp.atn;\n    var currentState = atn.states[recognizer.state];\n    var next = currentState.transitions[0].target;\n    var expectingAtLL2 = atn.nextTokens(next, recognizer._ctx);\n    if (expectingAtLL2.contains(currentSymbolType)) {\n        this.reportMissingToken(recognizer);\n        return true;\n    } else {\n        return false;\n    }\n};\n\n// This method implements the single-token deletion inline error recovery\n// strategy. It is called by {@link //recoverInline} to attempt to recover\n// from mismatched input. If this method returns null, the parser and error\n// handler state will not have changed. If this method returns non-null,\n// {@code recognizer} will <em>not</em> be in error recovery mode since the\n// returned token was a successful match.\n//\n// <p>If the single-token deletion is successful, this method calls\n// {@link //reportUnwantedToken} to report the error, followed by\n// {@link Parser//consume} to actually \"delete\" the extraneous token. Then,\n// before returning {@link //reportMatch} is called to signal a successful\n// match.</p>\n//\n// @param recognizer the parser instance\n// @return the successfully matched {@link Token} instance if single-token\n// deletion successfully recovers from the mismatched input, otherwise\n// {@code null}\n//\nDefaultErrorStrategy.prototype.singleTokenDeletion = function (recognizer) {\n    var nextTokenType = recognizer.getTokenStream().LA(2);\n    var expecting = this.getExpectedTokens(recognizer);\n    if (expecting.contains(nextTokenType)) {\n        this.reportUnwantedToken(recognizer);\n        // print(\"recoverFromMismatchedToken deleting \" \\\n        // + str(recognizer.getTokenStream().LT(1)) \\\n        // + \" since \" + str(recognizer.getTokenStream().LT(2)) \\\n        // + \" is what we want\", file=sys.stderr)\n        recognizer.consume(); // simply delete extra token\n        // we want to return the token we're actually matching\n        var matchedSymbol = recognizer.getCurrentToken();\n        this.reportMatch(recognizer); // we know current token is correct\n        return matchedSymbol;\n    } else {\n        return null;\n    }\n};\n\n// Conjure up a missing token during error recovery.\n//\n// The recognizer attempts to recover from single missing\n// symbols. But, actions might refer to that missing symbol.\n// For example, x=ID {f($x);}. The action clearly assumes\n// that there has been an identifier matched previously and that\n// $x points at that token. If that token is missing, but\n// the next token in the stream is what we want we assume that\n// this token is missing and we keep going. Because we\n// have to return some token to replace the missing token,\n// we have to conjure one up. This method gives the user control\n// over the tokens returned for missing tokens. Mostly,\n// you will want to create something special for identifier\n// tokens. For literals such as '{' and ',', the default\n// action in the parser or tree parser works. It simply creates\n// a CommonToken of the appropriate type. The text will be the token.\n// If you change what tokens must be created by the lexer,\n// override this method to create the appropriate tokens.\n//\nDefaultErrorStrategy.prototype.getMissingSymbol = function (recognizer) {\n    var currentSymbol = recognizer.getCurrentToken();\n    var expecting = this.getExpectedTokens(recognizer);\n    var expectedTokenType = expecting.first(); // get any element\n    var tokenText;\n    if (expectedTokenType === Token.EOF) {\n        tokenText = \"<missing EOF>\";\n    } else {\n        tokenText = \"<missing \" + recognizer.literalNames[expectedTokenType] + \">\";\n    }\n    var current = currentSymbol;\n    var lookback = recognizer.getTokenStream().LT(-1);\n    if (current.type === Token.EOF && lookback !== null) {\n        current = lookback;\n    }\n    return recognizer.getTokenFactory().create(current.source, expectedTokenType, tokenText, Token.DEFAULT_CHANNEL, -1, -1, current.line, current.column);\n};\n\nDefaultErrorStrategy.prototype.getExpectedTokens = function (recognizer) {\n    return recognizer.getExpectedTokens();\n};\n\n// How should a token be displayed in an error message? The default\n// is to display just the text, but during development you might\n// want to have a lot of information spit out. Override in that case\n// to use t.toString() (which, for CommonToken, dumps everything about\n// the token). This is better than forcing you to override a method in\n// your token objects because you don't have to go modify your lexer\n// so that it creates a new Java type.\n//\nDefaultErrorStrategy.prototype.getTokenErrorDisplay = function (t) {\n    if (t === null) {\n        return \"<no token>\";\n    }\n    var s = t.text;\n    if (s === null) {\n        if (t.type === Token.EOF) {\n            s = \"<EOF>\";\n        } else {\n            s = \"<\" + t.type + \">\";\n        }\n    }\n    return this.escapeWSAndQuote(s);\n};\n\nDefaultErrorStrategy.prototype.escapeWSAndQuote = function (s) {\n    s = s.replace(/\\n/g, \"\\\\n\");\n    s = s.replace(/\\r/g, \"\\\\r\");\n    s = s.replace(/\\t/g, \"\\\\t\");\n    return \"'\" + s + \"'\";\n};\n\n// Compute the error recovery set for the current rule. During\n// rule invocation, the parser pushes the set of tokens that can\n// follow that rule reference on the stack; this amounts to\n// computing FIRST of what follows the rule reference in the\n// enclosing rule. See LinearApproximator.FIRST().\n// This local follow set only includes tokens\n// from within the rule; i.e., the FIRST computation done by\n// ANTLR stops at the end of a rule.\n//\n// EXAMPLE\n//\n// When you find a \"no viable alt exception\", the input is not\n// consistent with any of the alternatives for rule r. The best\n// thing to do is to consume tokens until you see something that\n// can legally follow a call to r//or* any rule that called r.\n// You don't want the exact set of viable next tokens because the\n// input might just be missing a token--you might consume the\n// rest of the input looking for one of the missing tokens.\n//\n// Consider grammar:\n//\n// a : '[' b ']'\n// | '(' b ')'\n// ;\n// b : c '^' INT ;\n// c : ID\n// | INT\n// ;\n//\n// At each rule invocation, the set of tokens that could follow\n// that rule is pushed on a stack. Here are the various\n// context-sensitive follow sets:\n//\n// FOLLOW(b1_in_a) = FIRST(']') = ']'\n// FOLLOW(b2_in_a) = FIRST(')') = ')'\n// FOLLOW(c_in_b) = FIRST('^') = '^'\n//\n// Upon erroneous input \"[]\", the call chain is\n//\n// a -> b -> c\n//\n// and, hence, the follow context stack is:\n//\n// depth follow set start of rule execution\n// 0 <EOF> a (from main())\n// 1 ']' b\n// 2 '^' c\n//\n// Notice that ')' is not included, because b would have to have\n// been called from a different context in rule a for ')' to be\n// included.\n//\n// For error recovery, we cannot consider FOLLOW(c)\n// (context-sensitive or otherwise). We need the combined set of\n// all context-sensitive FOLLOW sets--the set of all tokens that\n// could follow any reference in the call chain. We need to\n// resync to one of those tokens. Note that FOLLOW(c)='^' and if\n// we resync'd to that token, we'd consume until EOF. We need to\n// sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.\n// In this case, for input \"[]\", LA(1) is ']' and in the set, so we would\n// not consume anything. After printing an error, rule c would\n// return normally. Rule b would not find the required '^' though.\n// At this point, it gets a mismatched token error and throws an\n// exception (since LA(1) is not in the viable following token\n// set). The rule exception handler tries to recover, but finds\n// the same recovery set and doesn't consume anything. Rule b\n// exits normally returning to rule a. Now it finds the ']' (and\n// with the successful match exits errorRecovery mode).\n//\n// So, you can see that the parser walks up the call chain looking\n// for the token that was a member of the recovery set.\n//\n// Errors are not generated in errorRecovery mode.\n//\n// ANTLR's error recovery mechanism is based upon original ideas:\n//\n// \"Algorithms + Data Structures = Programs\" by Niklaus Wirth\n//\n// and\n//\n// \"A note on error recovery in recursive descent parsers\":\n// http://portal.acm.org/citation.cfm?id=947902.947905\n//\n// Later, Josef Grosch had some good ideas:\n//\n// \"Efficient and Comfortable Error Recovery in Recursive Descent\n// Parsers\":\n// ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip\n//\n// Like Grosch I implement context-sensitive FOLLOW sets that are combined\n// at run-time upon error to avoid overhead during parsing.\n//\nDefaultErrorStrategy.prototype.getErrorRecoverySet = function (recognizer) {\n    var atn = recognizer._interp.atn;\n    var ctx = recognizer._ctx;\n    var recoverSet = new IntervalSet();\n    while (ctx !== null && ctx.invokingState >= 0) {\n        // compute what follows who invoked us\n        var invokingState = atn.states[ctx.invokingState];\n        var rt = invokingState.transitions[0];\n        var follow = atn.nextTokens(rt.followState);\n        recoverSet.addSet(follow);\n        ctx = ctx.parentCtx;\n    }\n    recoverSet.removeOne(Token.EPSILON);\n    return recoverSet;\n};\n\n// Consume tokens until one matches the given token set.//\nDefaultErrorStrategy.prototype.consumeUntil = function (recognizer, set) {\n    var ttype = recognizer.getTokenStream().LA(1);\n    while (ttype !== Token.EOF && !set.contains(ttype)) {\n        recognizer.consume();\n        ttype = recognizer.getTokenStream().LA(1);\n    }\n};\n\n//\n// This implementation of {@link ANTLRErrorStrategy} responds to syntax errors\n// by immediately canceling the parse operation with a\n// {@link ParseCancellationException}. The implementation ensures that the\n// {@link ParserRuleContext//exception} field is set for all parse tree nodes\n// that were not completed prior to encountering the error.\n//\n// <p>\n// This error strategy is useful in the following scenarios.</p>\n//\n// <ul>\n// <li><strong>Two-stage parsing:</strong> This error strategy allows the first\n// stage of two-stage parsing to immediately terminate if an error is\n// encountered, and immediately fall back to the second stage. In addition to\n// avoiding wasted work by attempting to recover from errors here, the empty\n// implementation of {@link BailErrorStrategy//sync} improves the performance of\n// the first stage.</li>\n// <li><strong>Silent validation:</strong> When syntax errors are not being\n// reported or logged, and the parse result is simply ignored if errors occur,\n// the {@link BailErrorStrategy} avoids wasting work on recovering from errors\n// when the result will be ignored either way.</li>\n// </ul>\n//\n// <p>\n// {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>\n//\n// @see Parser//setErrorHandler(ANTLRErrorStrategy)\n//\nfunction BailErrorStrategy() {\n    DefaultErrorStrategy.call(this);\n    return this;\n}\n\nBailErrorStrategy.prototype = Object.create(DefaultErrorStrategy.prototype);\nBailErrorStrategy.prototype.constructor = BailErrorStrategy;\n\n// Instead of recovering from exception {@code e}, re-throw it wrapped\n// in a {@link ParseCancellationException} so it is not caught by the\n// rule function catches. Use {@link Exception//getCause()} to get the\n// original {@link RecognitionException}.\n//\nBailErrorStrategy.prototype.recover = function (recognizer, e) {\n    var context = recognizer._ctx;\n    while (context !== null) {\n        context.exception = e;\n        context = context.parentCtx;\n    }\n    throw new ParseCancellationException(e);\n};\n\n// Make sure we don't attempt to recover inline; if the parser\n// successfully recovers, it won't throw an exception.\n//\nBailErrorStrategy.prototype.recoverInline = function (recognizer) {\n    this.recover(recognizer, new InputMismatchException(recognizer));\n};\n\n// Make sure we don't attempt to recover from problems in subrules.//\nBailErrorStrategy.prototype.sync = function (recognizer) {\n    // pass\n};\n\nexports.BailErrorStrategy = BailErrorStrategy;\nexports.DefaultErrorStrategy = DefaultErrorStrategy;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/ErrorStrategy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/Errors.js":
/*!************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/error/Errors.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n// The root of the ANTLR exception hierarchy. In general, ANTLR tracks just\n//  3 kinds of errors: prediction errors, failed predicate errors, and\n//  mismatched input errors. In each case, the parser knows where it is\n//  in the input, where it is in the ATN, the rule invocation stack,\n//  and what kind of problem occurred.\n\nvar PredicateTransition = (__webpack_require__(/*! ./../atn/Transition */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/Transition.js\").PredicateTransition);\n\nfunction RecognitionException(params) {\n    Error.call(this);\n    if (!!Error.captureStackTrace) {\n        Error.captureStackTrace(this, RecognitionException);\n    } else {\n        var stack = new Error().stack;\n    }\n    this.message = params.message;\n    this.recognizer = params.recognizer;\n    this.input = params.input;\n    this.ctx = params.ctx;\n    // The current {@link Token} when an error occurred. Since not all streams\n    // support accessing symbols by index, we have to track the {@link Token}\n    // instance itself.\n    this.offendingToken = null;\n    // Get the ATN state number the parser was in at the time the error\n    // occurred. For {@link NoViableAltException} and\n    // {@link LexerNoViableAltException} exceptions, this is the\n    // {@link DecisionState} number. For others, it is the state whose outgoing\n    // edge we couldn't match.\n    this.offendingState = -1;\n    if (this.recognizer !== null) {\n        this.offendingState = this.recognizer.state;\n    }\n    return this;\n}\n\nRecognitionException.prototype = Object.create(Error.prototype);\nRecognitionException.prototype.constructor = RecognitionException;\n\n// <p>If the state number is not known, this method returns -1.</p>\n\n//\n// Gets the set of input symbols which could potentially follow the\n// previously matched symbol at the time this exception was thrown.\n//\n// <p>If the set of expected tokens is not known and could not be computed,\n// this method returns {@code null}.</p>\n//\n// @return The set of token types that could potentially follow the current\n// state in the ATN, or {@code null} if the information is not available.\n// /\nRecognitionException.prototype.getExpectedTokens = function () {\n    if (this.recognizer !== null) {\n        return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);\n    } else {\n        return null;\n    }\n};\n\nRecognitionException.prototype.toString = function () {\n    return this.message;\n};\n\nfunction LexerNoViableAltException(lexer, input, startIndex, deadEndConfigs) {\n    RecognitionException.call(this, { message: \"\", recognizer: lexer, input: input, ctx: null });\n    this.startIndex = startIndex;\n    this.deadEndConfigs = deadEndConfigs;\n    return this;\n}\n\nLexerNoViableAltException.prototype = Object.create(RecognitionException.prototype);\nLexerNoViableAltException.prototype.constructor = LexerNoViableAltException;\n\nLexerNoViableAltException.prototype.toString = function () {\n    var symbol = \"\";\n    if (this.startIndex >= 0 && this.startIndex < this.input.size) {\n        symbol = this.input.getText((this.startIndex, this.startIndex));\n    }\n    return \"LexerNoViableAltException\" + symbol;\n};\n\n// Indicates that the parser could not decide which of two or more paths\n// to take based upon the remaining input. It tracks the starting token\n// of the offending input and also knows where the parser was\n// in the various paths when the error. Reported by reportNoViableAlternative()\n//\nfunction NoViableAltException(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {\n    ctx = ctx || recognizer._ctx;\n    offendingToken = offendingToken || recognizer.getCurrentToken();\n    startToken = startToken || recognizer.getCurrentToken();\n    input = input || recognizer.getInputStream();\n    RecognitionException.call(this, { message: \"\", recognizer: recognizer, input: input, ctx: ctx });\n    // Which configurations did we try at input.index() that couldn't match\n    // input.LT(1)?//\n    this.deadEndConfigs = deadEndConfigs;\n    // The token object at the start index; the input stream might\n    // not be buffering tokens so get a reference to it. (At the\n    // time the error occurred, of course the stream needs to keep a\n    // buffer all of the tokens but later we might not have access to those.)\n    this.startToken = startToken;\n    this.offendingToken = offendingToken;\n}\n\nNoViableAltException.prototype = Object.create(RecognitionException.prototype);\nNoViableAltException.prototype.constructor = NoViableAltException;\n\n// This signifies any kind of mismatched input exceptions such as\n// when the current input does not match the expected token.\n//\nfunction InputMismatchException(recognizer) {\n    RecognitionException.call(this, { message: \"\", recognizer: recognizer, input: recognizer.getInputStream(), ctx: recognizer._ctx });\n    this.offendingToken = recognizer.getCurrentToken();\n}\n\nInputMismatchException.prototype = Object.create(RecognitionException.prototype);\nInputMismatchException.prototype.constructor = InputMismatchException;\n\n// A semantic predicate failed during validation. Validation of predicates\n// occurs when normally parsing the alternative just like matching a token.\n// Disambiguating predicate evaluation occurs when we test a predicate during\n// prediction.\n\nfunction FailedPredicateException(recognizer, predicate, message) {\n    RecognitionException.call(this, { message: this.formatMessage(predicate, message || null), recognizer: recognizer,\n        input: recognizer.getInputStream(), ctx: recognizer._ctx });\n    var s = recognizer._interp.atn.states[recognizer.state];\n    var trans = s.transitions[0];\n    if (trans instanceof PredicateTransition) {\n        this.ruleIndex = trans.ruleIndex;\n        this.predicateIndex = trans.predIndex;\n    } else {\n        this.ruleIndex = 0;\n        this.predicateIndex = 0;\n    }\n    this.predicate = predicate;\n    this.offendingToken = recognizer.getCurrentToken();\n    return this;\n}\n\nFailedPredicateException.prototype = Object.create(RecognitionException.prototype);\nFailedPredicateException.prototype.constructor = FailedPredicateException;\n\nFailedPredicateException.prototype.formatMessage = function (predicate, message) {\n    if (message !== null) {\n        return message;\n    } else {\n        return \"failed predicate: {\" + predicate + \"}?\";\n    }\n};\n\nfunction ParseCancellationException() {\n    Error.call(this);\n    Error.captureStackTrace(this, ParseCancellationException);\n    return this;\n}\n\nParseCancellationException.prototype = Object.create(Error.prototype);\nParseCancellationException.prototype.constructor = ParseCancellationException;\n\nexports.RecognitionException = RecognitionException;\nexports.NoViableAltException = NoViableAltException;\nexports.LexerNoViableAltException = LexerNoViableAltException;\nexports.InputMismatchException = InputMismatchException;\nexports.FailedPredicateException = FailedPredicateException;\nexports.ParseCancellationException = ParseCancellationException;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/Errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/error/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nexports.RecognitionException = __webpack_require__(/*! ./Errors */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/Errors.js\").RecognitionException;\nexports.NoViableAltException = __webpack_require__(/*! ./Errors */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/Errors.js\").NoViableAltException;\nexports.LexerNoViableAltException = __webpack_require__(/*! ./Errors */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/Errors.js\").LexerNoViableAltException;\nexports.InputMismatchException = __webpack_require__(/*! ./Errors */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/Errors.js\").InputMismatchException;\nexports.FailedPredicateException = __webpack_require__(/*! ./Errors */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/Errors.js\").FailedPredicateException;\nexports.DiagnosticErrorListener = __webpack_require__(/*! ./DiagnosticErrorListener */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/DiagnosticErrorListener.js\").DiagnosticErrorListener;\nexports.BailErrorStrategy = __webpack_require__(/*! ./ErrorStrategy */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/ErrorStrategy.js\").BailErrorStrategy;\nexports.ErrorListener = __webpack_require__(/*! ./ErrorListener */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/ErrorListener.js\").ErrorListener;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L2Vycm9yL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlLQUF1RTtBQUN2RSxpS0FBdUU7QUFDdkUsMktBQWlGO0FBQ2pGLHFLQUEyRTtBQUMzRSx5S0FBK0U7QUFDL0UseU1BQThGO0FBQzlGLHlLQUF3RTtBQUN4RSxpS0FBZ0UiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWMvZmxvd3BvcnQvbm9kZV9tb2R1bGVzL3NvbGlkaXR5LXBhcnNlci1hbnRsci9kaXN0L2FudGxyNC9lcnJvci9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuZXhwb3J0cy5SZWNvZ25pdGlvbkV4Y2VwdGlvbiA9IHJlcXVpcmUoJy4vRXJyb3JzJykuUmVjb2duaXRpb25FeGNlcHRpb247XG5leHBvcnRzLk5vVmlhYmxlQWx0RXhjZXB0aW9uID0gcmVxdWlyZSgnLi9FcnJvcnMnKS5Ob1ZpYWJsZUFsdEV4Y2VwdGlvbjtcbmV4cG9ydHMuTGV4ZXJOb1ZpYWJsZUFsdEV4Y2VwdGlvbiA9IHJlcXVpcmUoJy4vRXJyb3JzJykuTGV4ZXJOb1ZpYWJsZUFsdEV4Y2VwdGlvbjtcbmV4cG9ydHMuSW5wdXRNaXNtYXRjaEV4Y2VwdGlvbiA9IHJlcXVpcmUoJy4vRXJyb3JzJykuSW5wdXRNaXNtYXRjaEV4Y2VwdGlvbjtcbmV4cG9ydHMuRmFpbGVkUHJlZGljYXRlRXhjZXB0aW9uID0gcmVxdWlyZSgnLi9FcnJvcnMnKS5GYWlsZWRQcmVkaWNhdGVFeGNlcHRpb247XG5leHBvcnRzLkRpYWdub3N0aWNFcnJvckxpc3RlbmVyID0gcmVxdWlyZSgnLi9EaWFnbm9zdGljRXJyb3JMaXN0ZW5lcicpLkRpYWdub3N0aWNFcnJvckxpc3RlbmVyO1xuZXhwb3J0cy5CYWlsRXJyb3JTdHJhdGVneSA9IHJlcXVpcmUoJy4vRXJyb3JTdHJhdGVneScpLkJhaWxFcnJvclN0cmF0ZWd5O1xuZXhwb3J0cy5FcnJvckxpc3RlbmVyID0gcmVxdWlyZSgnLi9FcnJvckxpc3RlbmVyJykuRXJyb3JMaXN0ZW5lcjsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nexports.atn = __webpack_require__(/*! ./atn/index */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/index.js\");\nexports.codepointat = __webpack_require__(/*! ./polyfills/codepointat */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/polyfills/codepointat.js\");\nexports.dfa = __webpack_require__(/*! ./dfa/index */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/dfa/index.js\");\nexports.fromcodepoint = __webpack_require__(/*! ./polyfills/fromcodepoint */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/polyfills/fromcodepoint.js\");\nexports.tree = __webpack_require__(/*! ./tree/index */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/tree/index.js\");\nexports.error = __webpack_require__(/*! ./error/index */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/error/index.js\");\nexports.Token = __webpack_require__(/*! ./Token */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Token.js\").Token;\nexports.CharStreams = __webpack_require__(/*! ./CharStreams */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/CharStreams.js\").CharStreams;\nexports.CommonToken = __webpack_require__(/*! ./Token */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Token.js\").CommonToken;\nexports.InputStream = __webpack_require__(/*! ./InputStream */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/InputStream.js\").InputStream;\nexports.FileStream = __webpack_require__(/*! ./FileStream */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/FileStream.js\").FileStream;\nexports.CommonTokenStream = __webpack_require__(/*! ./CommonTokenStream */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/CommonTokenStream.js\").CommonTokenStream;\nexports.Lexer = __webpack_require__(/*! ./Lexer */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Lexer.js\").Lexer;\nexports.Parser = __webpack_require__(/*! ./Parser */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Parser.js\").Parser;\nvar pc = __webpack_require__(/*! ./PredictionContext */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/PredictionContext.js\");\nexports.PredictionContextCache = pc.PredictionContextCache;\nexports.ParserRuleContext = __webpack_require__(/*! ./ParserRuleContext */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/ParserRuleContext.js\").ParserRuleContext;\nexports.Interval = __webpack_require__(/*! ./IntervalSet */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/IntervalSet.js\").Interval;\nexports.Utils = __webpack_require__(/*! ./Utils */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Utils.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkhBQW9DO0FBQ3BDLDJKQUF3RDtBQUN4RCwySEFBb0M7QUFDcEMsaUtBQTREO0FBQzVELDhIQUFzQztBQUN0QyxpSUFBd0M7QUFDeEMsMkhBQXdDO0FBQ3hDLG1KQUEwRDtBQUMxRCx1SUFBb0Q7QUFDcEQsbUpBQTBEO0FBQzFELCtJQUF1RDtBQUN2RCwyS0FBNEU7QUFDNUUsMkhBQXdDO0FBQ3hDLCtIQUEyQztBQUMzQyxTQUFTLG1CQUFPLENBQUMsd0dBQXFCO0FBQ3RDLDhCQUE4QjtBQUM5QiwyS0FBNEU7QUFDNUUsNklBQW9EO0FBQ3BELHFIQUFrQyIsInNvdXJjZXMiOlsiL1VzZXJzL21hYy9mbG93cG9ydC9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuZXhwb3J0cy5hdG4gPSByZXF1aXJlKCcuL2F0bi9pbmRleCcpO1xuZXhwb3J0cy5jb2RlcG9pbnRhdCA9IHJlcXVpcmUoJy4vcG9seWZpbGxzL2NvZGVwb2ludGF0Jyk7XG5leHBvcnRzLmRmYSA9IHJlcXVpcmUoJy4vZGZhL2luZGV4Jyk7XG5leHBvcnRzLmZyb21jb2RlcG9pbnQgPSByZXF1aXJlKCcuL3BvbHlmaWxscy9mcm9tY29kZXBvaW50Jyk7XG5leHBvcnRzLnRyZWUgPSByZXF1aXJlKCcuL3RyZWUvaW5kZXgnKTtcbmV4cG9ydHMuZXJyb3IgPSByZXF1aXJlKCcuL2Vycm9yL2luZGV4Jyk7XG5leHBvcnRzLlRva2VuID0gcmVxdWlyZSgnLi9Ub2tlbicpLlRva2VuO1xuZXhwb3J0cy5DaGFyU3RyZWFtcyA9IHJlcXVpcmUoJy4vQ2hhclN0cmVhbXMnKS5DaGFyU3RyZWFtcztcbmV4cG9ydHMuQ29tbW9uVG9rZW4gPSByZXF1aXJlKCcuL1Rva2VuJykuQ29tbW9uVG9rZW47XG5leHBvcnRzLklucHV0U3RyZWFtID0gcmVxdWlyZSgnLi9JbnB1dFN0cmVhbScpLklucHV0U3RyZWFtO1xuZXhwb3J0cy5GaWxlU3RyZWFtID0gcmVxdWlyZSgnLi9GaWxlU3RyZWFtJykuRmlsZVN0cmVhbTtcbmV4cG9ydHMuQ29tbW9uVG9rZW5TdHJlYW0gPSByZXF1aXJlKCcuL0NvbW1vblRva2VuU3RyZWFtJykuQ29tbW9uVG9rZW5TdHJlYW07XG5leHBvcnRzLkxleGVyID0gcmVxdWlyZSgnLi9MZXhlcicpLkxleGVyO1xuZXhwb3J0cy5QYXJzZXIgPSByZXF1aXJlKCcuL1BhcnNlcicpLlBhcnNlcjtcbnZhciBwYyA9IHJlcXVpcmUoJy4vUHJlZGljdGlvbkNvbnRleHQnKTtcbmV4cG9ydHMuUHJlZGljdGlvbkNvbnRleHRDYWNoZSA9IHBjLlByZWRpY3Rpb25Db250ZXh0Q2FjaGU7XG5leHBvcnRzLlBhcnNlclJ1bGVDb250ZXh0ID0gcmVxdWlyZSgnLi9QYXJzZXJSdWxlQ29udGV4dCcpLlBhcnNlclJ1bGVDb250ZXh0O1xuZXhwb3J0cy5JbnRlcnZhbCA9IHJlcXVpcmUoJy4vSW50ZXJ2YWxTZXQnKS5JbnRlcnZhbDtcbmV4cG9ydHMuVXRpbHMgPSByZXF1aXJlKCcuL1V0aWxzJyk7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/polyfills/codepointat.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/polyfills/codepointat.js ***!
  \*********************************************************************************/
/***/ (() => {

eval("\n\n/*! https://mths.be/codepointat v0.2.0 by @mathias */\nif (!String.prototype.codePointAt) {\n\t(function () {\n\t\t'use strict'; // needed to support `apply`/`call` with `undefined`/`null`\n\n\t\tvar defineProperty = function () {\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\ttry {\n\t\t\t\tvar object = {};\n\t\t\t\tvar $defineProperty = Object.defineProperty;\n\t\t\t\tvar result = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t} catch (error) {}\n\t\t\treturn result;\n\t\t}();\n\t\tvar codePointAt = function codePointAt(position) {\n\t\t\tif (this == null) {\n\t\t\t\tthrow TypeError();\n\t\t\t}\n\t\t\tvar string = String(this);\n\t\t\tvar size = string.length;\n\t\t\t// `ToInteger`\n\t\t\tvar index = position ? Number(position) : 0;\n\t\t\tif (index != index) {\n\t\t\t\t// better `isNaN`\n\t\t\t\tindex = 0;\n\t\t\t}\n\t\t\t// Account for out-of-bounds indices:\n\t\t\tif (index < 0 || index >= size) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\t// Get the first code unit\n\t\t\tvar first = string.charCodeAt(index);\n\t\t\tvar second;\n\t\t\tif ( // check if it’s the start of a surrogate pair\n\t\t\tfirst >= 0xD800 && first <= 0xDBFF && // high surrogate\n\t\t\tsize > index + 1 // there is a next code unit\n\t\t\t) {\n\t\t\t\t\tsecond = string.charCodeAt(index + 1);\n\t\t\t\t\tif (second >= 0xDC00 && second <= 0xDFFF) {\n\t\t\t\t\t\t// low surrogate\n\t\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\t\treturn (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\treturn first;\n\t\t};\n\t\tif (defineProperty) {\n\t\t\tdefineProperty(String.prototype, 'codePointAt', {\n\t\t\t\t'value': codePointAt,\n\t\t\t\t'configurable': true,\n\t\t\t\t'writable': true\n\t\t\t});\n\t\t} else {\n\t\t\tString.prototype.codePointAt = codePointAt;\n\t\t}\n\t})();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L3BvbHlmaWxscy9jb2RlcG9pbnRhdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7O0FBRWhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixJQUFJO0FBQ0o7QUFDQTtBQUNBLEVBQUU7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL21hYy9mbG93cG9ydC9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L3BvbHlmaWxscy9jb2RlcG9pbnRhdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qISBodHRwczovL210aHMuYmUvY29kZXBvaW50YXQgdjAuMi4wIGJ5IEBtYXRoaWFzICovXG5pZiAoIVN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQpIHtcblx0KGZ1bmN0aW9uICgpIHtcblx0XHQndXNlIHN0cmljdCc7IC8vIG5lZWRlZCB0byBzdXBwb3J0IGBhcHBseWAvYGNhbGxgIHdpdGggYHVuZGVmaW5lZGAvYG51bGxgXG5cblx0XHR2YXIgZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHQvLyBJRSA4IG9ubHkgc3VwcG9ydHMgYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgb24gRE9NIGVsZW1lbnRzXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR2YXIgb2JqZWN0ID0ge307XG5cdFx0XHRcdHZhciAkZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cdFx0XHRcdHZhciByZXN1bHQgPSAkZGVmaW5lUHJvcGVydHkob2JqZWN0LCBvYmplY3QsIG9iamVjdCkgJiYgJGRlZmluZVByb3BlcnR5O1xuXHRcdFx0fSBjYXRjaCAoZXJyb3IpIHt9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH0oKTtcblx0XHR2YXIgY29kZVBvaW50QXQgPSBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3NpdGlvbikge1xuXHRcdFx0aWYgKHRoaXMgPT0gbnVsbCkge1xuXHRcdFx0XHR0aHJvdyBUeXBlRXJyb3IoKTtcblx0XHRcdH1cblx0XHRcdHZhciBzdHJpbmcgPSBTdHJpbmcodGhpcyk7XG5cdFx0XHR2YXIgc2l6ZSA9IHN0cmluZy5sZW5ndGg7XG5cdFx0XHQvLyBgVG9JbnRlZ2VyYFxuXHRcdFx0dmFyIGluZGV4ID0gcG9zaXRpb24gPyBOdW1iZXIocG9zaXRpb24pIDogMDtcblx0XHRcdGlmIChpbmRleCAhPSBpbmRleCkge1xuXHRcdFx0XHQvLyBiZXR0ZXIgYGlzTmFOYFxuXHRcdFx0XHRpbmRleCA9IDA7XG5cdFx0XHR9XG5cdFx0XHQvLyBBY2NvdW50IGZvciBvdXQtb2YtYm91bmRzIGluZGljZXM6XG5cdFx0XHRpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHNpemUpIHtcblx0XHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdC8vIEdldCB0aGUgZmlyc3QgY29kZSB1bml0XG5cdFx0XHR2YXIgZmlyc3QgPSBzdHJpbmcuY2hhckNvZGVBdChpbmRleCk7XG5cdFx0XHR2YXIgc2Vjb25kO1xuXHRcdFx0aWYgKCAvLyBjaGVjayBpZiBpdOKAmXMgdGhlIHN0YXJ0IG9mIGEgc3Vycm9nYXRlIHBhaXJcblx0XHRcdGZpcnN0ID49IDB4RDgwMCAmJiBmaXJzdCA8PSAweERCRkYgJiYgLy8gaGlnaCBzdXJyb2dhdGVcblx0XHRcdHNpemUgPiBpbmRleCArIDEgLy8gdGhlcmUgaXMgYSBuZXh0IGNvZGUgdW5pdFxuXHRcdFx0KSB7XG5cdFx0XHRcdFx0c2Vjb25kID0gc3RyaW5nLmNoYXJDb2RlQXQoaW5kZXggKyAxKTtcblx0XHRcdFx0XHRpZiAoc2Vjb25kID49IDB4REMwMCAmJiBzZWNvbmQgPD0gMHhERkZGKSB7XG5cdFx0XHRcdFx0XHQvLyBsb3cgc3Vycm9nYXRlXG5cdFx0XHRcdFx0XHQvLyBodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZyNzdXJyb2dhdGUtZm9ybXVsYWVcblx0XHRcdFx0XHRcdHJldHVybiAoZmlyc3QgLSAweEQ4MDApICogMHg0MDAgKyBzZWNvbmQgLSAweERDMDAgKyAweDEwMDAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZpcnN0O1xuXHRcdH07XG5cdFx0aWYgKGRlZmluZVByb3BlcnR5KSB7XG5cdFx0XHRkZWZpbmVQcm9wZXJ0eShTdHJpbmcucHJvdG90eXBlLCAnY29kZVBvaW50QXQnLCB7XG5cdFx0XHRcdCd2YWx1ZSc6IGNvZGVQb2ludEF0LFxuXHRcdFx0XHQnY29uZmlndXJhYmxlJzogdHJ1ZSxcblx0XHRcdFx0J3dyaXRhYmxlJzogdHJ1ZVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQgPSBjb2RlUG9pbnRBdDtcblx0XHR9XG5cdH0pKCk7XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/polyfills/codepointat.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/polyfills/fromcodepoint.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/polyfills/fromcodepoint.js ***!
  \***********************************************************************************/
/***/ (() => {

eval("\n\n/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */\nif (!String.fromCodePoint) {\n\t(function () {\n\t\tvar defineProperty = function () {\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\ttry {\n\t\t\t\tvar object = {};\n\t\t\t\tvar $defineProperty = Object.defineProperty;\n\t\t\t\tvar result = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t} catch (error) {}\n\t\t\treturn result;\n\t\t}();\n\t\tvar stringFromCharCode = String.fromCharCode;\n\t\tvar floor = Math.floor;\n\t\tvar fromCodePoint = function fromCodePoint(_) {\n\t\t\tvar MAX_SIZE = 0x4000;\n\t\t\tvar codeUnits = [];\n\t\t\tvar highSurrogate;\n\t\t\tvar lowSurrogate;\n\t\t\tvar index = -1;\n\t\t\tvar length = arguments.length;\n\t\t\tif (!length) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tvar result = '';\n\t\t\twhile (++index < length) {\n\t\t\t\tvar codePoint = Number(arguments[index]);\n\t\t\t\tif (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n\t\t\t\tcodePoint < 0 || // not a valid Unicode code point\n\t\t\t\tcodePoint > 0x10FFFF || // not a valid Unicode code point\n\t\t\t\tfloor(codePoint) != codePoint // not an integer\n\t\t\t\t) {\n\t\t\t\t\t\tthrow RangeError('Invalid code point: ' + codePoint);\n\t\t\t\t\t}\n\t\t\t\tif (codePoint <= 0xFFFF) {\n\t\t\t\t\t// BMP code point\n\t\t\t\t\tcodeUnits.push(codePoint);\n\t\t\t\t} else {\n\t\t\t\t\t// Astral code point; split in surrogate halves\n\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\tcodePoint -= 0x10000;\n\t\t\t\t\thighSurrogate = (codePoint >> 10) + 0xD800;\n\t\t\t\t\tlowSurrogate = codePoint % 0x400 + 0xDC00;\n\t\t\t\t\tcodeUnits.push(highSurrogate, lowSurrogate);\n\t\t\t\t}\n\t\t\t\tif (index + 1 == length || codeUnits.length > MAX_SIZE) {\n\t\t\t\t\tresult += stringFromCharCode.apply(null, codeUnits);\n\t\t\t\t\tcodeUnits.length = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t\tif (defineProperty) {\n\t\t\tdefineProperty(String, 'fromCodePoint', {\n\t\t\t\t'value': fromCodePoint,\n\t\t\t\t'configurable': true,\n\t\t\t\t'writable': true\n\t\t\t});\n\t\t} else {\n\t\t\tString.fromCodePoint = fromCodePoint;\n\t\t}\n\t})();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L3BvbHlmaWxscy9mcm9tY29kZXBvaW50LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTiwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLElBQUk7QUFDSjtBQUNBO0FBQ0EsRUFBRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvbWFjL2Zsb3dwb3J0L25vZGVfbW9kdWxlcy9zb2xpZGl0eS1wYXJzZXItYW50bHIvZGlzdC9hbnRscjQvcG9seWZpbGxzL2Zyb21jb2RlcG9pbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKiEgaHR0cHM6Ly9tdGhzLmJlL2Zyb21jb2RlcG9pbnQgdjAuMi4xIGJ5IEBtYXRoaWFzICovXG5pZiAoIVN0cmluZy5mcm9tQ29kZVBvaW50KSB7XG5cdChmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0Ly8gSUUgOCBvbmx5IHN1cHBvcnRzIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG9uIERPTSBlbGVtZW50c1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dmFyIG9iamVjdCA9IHt9O1xuXHRcdFx0XHR2YXIgJGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gJGRlZmluZVByb3BlcnR5KG9iamVjdCwgb2JqZWN0LCBvYmplY3QpICYmICRkZWZpbmVQcm9wZXJ0eTtcblx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9KCk7XG5cdFx0dmFyIHN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG5cdFx0dmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblx0XHR2YXIgZnJvbUNvZGVQb2ludCA9IGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoXykge1xuXHRcdFx0dmFyIE1BWF9TSVpFID0gMHg0MDAwO1xuXHRcdFx0dmFyIGNvZGVVbml0cyA9IFtdO1xuXHRcdFx0dmFyIGhpZ2hTdXJyb2dhdGU7XG5cdFx0XHR2YXIgbG93U3Vycm9nYXRlO1xuXHRcdFx0dmFyIGluZGV4ID0gLTE7XG5cdFx0XHR2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcblx0XHRcdGlmICghbGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiAnJztcblx0XHRcdH1cblx0XHRcdHZhciByZXN1bHQgPSAnJztcblx0XHRcdHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG5cdFx0XHRcdHZhciBjb2RlUG9pbnQgPSBOdW1iZXIoYXJndW1lbnRzW2luZGV4XSk7XG5cdFx0XHRcdGlmICghaXNGaW5pdGUoY29kZVBvaW50KSB8fCAvLyBgTmFOYCwgYCtJbmZpbml0eWAsIG9yIGAtSW5maW5pdHlgXG5cdFx0XHRcdGNvZGVQb2ludCA8IDAgfHwgLy8gbm90IGEgdmFsaWQgVW5pY29kZSBjb2RlIHBvaW50XG5cdFx0XHRcdGNvZGVQb2ludCA+IDB4MTBGRkZGIHx8IC8vIG5vdCBhIHZhbGlkIFVuaWNvZGUgY29kZSBwb2ludFxuXHRcdFx0XHRmbG9vcihjb2RlUG9pbnQpICE9IGNvZGVQb2ludCAvLyBub3QgYW4gaW50ZWdlclxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdHRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludDogJyArIGNvZGVQb2ludCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoY29kZVBvaW50IDw9IDB4RkZGRikge1xuXHRcdFx0XHRcdC8vIEJNUCBjb2RlIHBvaW50XG5cdFx0XHRcdFx0Y29kZVVuaXRzLnB1c2goY29kZVBvaW50KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyBBc3RyYWwgY29kZSBwb2ludDsgc3BsaXQgaW4gc3Vycm9nYXRlIGhhbHZlc1xuXHRcdFx0XHRcdC8vIGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nI3N1cnJvZ2F0ZS1mb3JtdWxhZVxuXHRcdFx0XHRcdGNvZGVQb2ludCAtPSAweDEwMDAwO1xuXHRcdFx0XHRcdGhpZ2hTdXJyb2dhdGUgPSAoY29kZVBvaW50ID4+IDEwKSArIDB4RDgwMDtcblx0XHRcdFx0XHRsb3dTdXJyb2dhdGUgPSBjb2RlUG9pbnQgJSAweDQwMCArIDB4REMwMDtcblx0XHRcdFx0XHRjb2RlVW5pdHMucHVzaChoaWdoU3Vycm9nYXRlLCBsb3dTdXJyb2dhdGUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChpbmRleCArIDEgPT0gbGVuZ3RoIHx8IGNvZGVVbml0cy5sZW5ndGggPiBNQVhfU0laRSkge1xuXHRcdFx0XHRcdHJlc3VsdCArPSBzdHJpbmdGcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgY29kZVVuaXRzKTtcblx0XHRcdFx0XHRjb2RlVW5pdHMubGVuZ3RoID0gMDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9O1xuXHRcdGlmIChkZWZpbmVQcm9wZXJ0eSkge1xuXHRcdFx0ZGVmaW5lUHJvcGVydHkoU3RyaW5nLCAnZnJvbUNvZGVQb2ludCcsIHtcblx0XHRcdFx0J3ZhbHVlJzogZnJvbUNvZGVQb2ludCxcblx0XHRcdFx0J2NvbmZpZ3VyYWJsZSc6IHRydWUsXG5cdFx0XHRcdCd3cml0YWJsZSc6IHRydWVcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRTdHJpbmcuZnJvbUNvZGVQb2ludCA9IGZyb21Db2RlUG9pbnQ7XG5cdFx0fVxuXHR9KSgpO1xufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/polyfills/fromcodepoint.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/tree/Tree.js":
/*!*********************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/tree/Tree.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\n// The basic notion of a tree has a parent, a payload, and a list of children.\n//  It is the most abstract interface for all the trees used by ANTLR.\n///\n\nvar Token = (__webpack_require__(/*! ./../Token */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Token.js\").Token);\nvar Interval = (__webpack_require__(/*! ./../IntervalSet */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/IntervalSet.js\").Interval);\nvar INVALID_INTERVAL = new Interval(-1, -2);\nvar Utils = __webpack_require__(/*! ../Utils.js */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Utils.js\");\n\nfunction Tree() {\n\treturn this;\n}\n\nfunction SyntaxTree() {\n\tTree.call(this);\n\treturn this;\n}\n\nSyntaxTree.prototype = Object.create(Tree.prototype);\nSyntaxTree.prototype.constructor = SyntaxTree;\n\nfunction ParseTree() {\n\tSyntaxTree.call(this);\n\treturn this;\n}\n\nParseTree.prototype = Object.create(SyntaxTree.prototype);\nParseTree.prototype.constructor = ParseTree;\n\nfunction RuleNode() {\n\tParseTree.call(this);\n\treturn this;\n}\n\nRuleNode.prototype = Object.create(ParseTree.prototype);\nRuleNode.prototype.constructor = RuleNode;\n\nfunction TerminalNode() {\n\tParseTree.call(this);\n\treturn this;\n}\n\nTerminalNode.prototype = Object.create(ParseTree.prototype);\nTerminalNode.prototype.constructor = TerminalNode;\n\nfunction ErrorNode() {\n\tTerminalNode.call(this);\n\treturn this;\n}\n\nErrorNode.prototype = Object.create(TerminalNode.prototype);\nErrorNode.prototype.constructor = ErrorNode;\n\nfunction ParseTreeVisitor() {\n\treturn this;\n}\n\nParseTreeVisitor.prototype.visit = function (ctx) {\n\tif (Array.isArray(ctx)) {\n\t\treturn ctx.map(function (child) {\n\t\t\treturn child.accept(this);\n\t\t}, this);\n\t} else {\n\t\treturn ctx.accept(this);\n\t}\n};\n\nParseTreeVisitor.prototype.visitChildren = function (ctx) {\n\treturn this.visit(ctx.children);\n};\n\nParseTreeVisitor.prototype.visitTerminal = function (node) {};\n\nParseTreeVisitor.prototype.visitErrorNode = function (node) {};\n\nfunction ParseTreeListener() {\n\treturn this;\n}\n\nParseTreeListener.prototype.visitTerminal = function (node) {};\n\nParseTreeListener.prototype.visitErrorNode = function (node) {};\n\nParseTreeListener.prototype.enterEveryRule = function (node) {};\n\nParseTreeListener.prototype.exitEveryRule = function (node) {};\n\nfunction TerminalNodeImpl(symbol) {\n\tTerminalNode.call(this);\n\tthis.parentCtx = null;\n\tthis.symbol = symbol;\n\treturn this;\n}\n\nTerminalNodeImpl.prototype = Object.create(TerminalNode.prototype);\nTerminalNodeImpl.prototype.constructor = TerminalNodeImpl;\n\nTerminalNodeImpl.prototype.getChild = function (i) {\n\treturn null;\n};\n\nTerminalNodeImpl.prototype.getSymbol = function () {\n\treturn this.symbol;\n};\n\nTerminalNodeImpl.prototype.getParent = function () {\n\treturn this.parentCtx;\n};\n\nTerminalNodeImpl.prototype.getPayload = function () {\n\treturn this.symbol;\n};\n\nTerminalNodeImpl.prototype.getSourceInterval = function () {\n\tif (this.symbol === null) {\n\t\treturn INVALID_INTERVAL;\n\t}\n\tvar tokenIndex = this.symbol.tokenIndex;\n\treturn new Interval(tokenIndex, tokenIndex);\n};\n\nTerminalNodeImpl.prototype.getChildCount = function () {\n\treturn 0;\n};\n\nTerminalNodeImpl.prototype.accept = function (visitor) {\n\treturn visitor.visitTerminal(this);\n};\n\nTerminalNodeImpl.prototype.getText = function () {\n\treturn this.symbol.text;\n};\n\nTerminalNodeImpl.prototype.toString = function () {\n\tif (this.symbol.type === Token.EOF) {\n\t\treturn \"<EOF>\";\n\t} else {\n\t\treturn this.symbol.text;\n\t}\n};\n\n// Represents a token that was consumed during resynchronization\n// rather than during a valid match operation. For example,\n// we will create this kind of a node during single token insertion\n// and deletion as well as during \"consume until error recovery set\"\n// upon no viable alternative exceptions.\n\nfunction ErrorNodeImpl(token) {\n\tTerminalNodeImpl.call(this, token);\n\treturn this;\n}\n\nErrorNodeImpl.prototype = Object.create(TerminalNodeImpl.prototype);\nErrorNodeImpl.prototype.constructor = ErrorNodeImpl;\n\nErrorNodeImpl.prototype.isErrorNode = function () {\n\treturn true;\n};\n\nErrorNodeImpl.prototype.accept = function (visitor) {\n\treturn visitor.visitErrorNode(this);\n};\n\nfunction ParseTreeWalker() {\n\treturn this;\n}\n\nParseTreeWalker.prototype.walk = function (listener, t) {\n\tvar errorNode = t instanceof ErrorNode || t.isErrorNode !== undefined && t.isErrorNode();\n\tif (errorNode) {\n\t\tlistener.visitErrorNode(t);\n\t} else if (t instanceof TerminalNode) {\n\t\tlistener.visitTerminal(t);\n\t} else {\n\t\tthis.enterRule(listener, t);\n\t\tfor (var i = 0; i < t.getChildCount(); i++) {\n\t\t\tvar child = t.getChild(i);\n\t\t\tthis.walk(listener, child);\n\t\t}\n\t\tthis.exitRule(listener, t);\n\t}\n};\n//\n// The discovery of a rule node, involves sending two events: the generic\n// {@link ParseTreeListener//enterEveryRule} and a\n// {@link RuleContext}-specific event. First we trigger the generic and then\n// the rule specific. We to them in reverse order upon finishing the node.\n//\nParseTreeWalker.prototype.enterRule = function (listener, r) {\n\tvar ctx = r.getRuleContext();\n\tlistener.enterEveryRule(ctx);\n\tctx.enterRule(listener);\n};\n\nParseTreeWalker.prototype.exitRule = function (listener, r) {\n\tvar ctx = r.getRuleContext();\n\tctx.exitRule(listener);\n\tlistener.exitEveryRule(ctx);\n};\n\nParseTreeWalker.DEFAULT = new ParseTreeWalker();\n\nexports.RuleNode = RuleNode;\nexports.ErrorNode = ErrorNode;\nexports.TerminalNode = TerminalNode;\nexports.ErrorNodeImpl = ErrorNodeImpl;\nexports.TerminalNodeImpl = TerminalNodeImpl;\nexports.ParseTreeListener = ParseTreeListener;\nexports.ParseTreeVisitor = ParseTreeVisitor;\nexports.ParseTreeWalker = ParseTreeWalker;\nexports.INVALID_INTERVAL = INVALID_INTERVAL;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/tree/Tree.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/tree/Trees.js":
/*!**********************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/tree/Trees.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nvar Utils = __webpack_require__(/*! ./../Utils */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Utils.js\");\nvar Token = (__webpack_require__(/*! ./../Token */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/Token.js\").Token);\nvar RuleNode = (__webpack_require__(/*! ./Tree */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/tree/Tree.js\").RuleNode);\nvar ErrorNode = (__webpack_require__(/*! ./Tree */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/tree/Tree.js\").ErrorNode);\nvar TerminalNode = (__webpack_require__(/*! ./Tree */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/tree/Tree.js\").TerminalNode);\nvar ParserRuleContext = (__webpack_require__(/*! ./../ParserRuleContext */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/ParserRuleContext.js\").ParserRuleContext);\nvar RuleContext = (__webpack_require__(/*! ./../RuleContext */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/RuleContext.js\").RuleContext);\nvar INVALID_ALT_NUMBER = (__webpack_require__(/*! ./../atn/ATN */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/atn/ATN.js\").INVALID_ALT_NUMBER);\n\n/** A set of utility routines useful for all kinds of ANTLR trees. */\nfunction Trees() {}\n\n// Print out a whole tree in LISP form. {@link //getNodeText} is used on the\n//  node payloads to get the text for the nodes.  Detect\n//  parse trees and extract data appropriately.\nTrees.toStringTree = function (tree, ruleNames, recog) {\n    ruleNames = ruleNames || null;\n    recog = recog || null;\n    if (recog !== null) {\n        ruleNames = recog.ruleNames;\n    }\n    var s = Trees.getNodeText(tree, ruleNames);\n    s = Utils.escapeWhitespace(s, false);\n    var c = tree.getChildCount();\n    if (c === 0) {\n        return s;\n    }\n    var res = \"(\" + s + ' ';\n    if (c > 0) {\n        s = Trees.toStringTree(tree.getChild(0), ruleNames);\n        res = res.concat(s);\n    }\n    for (var i = 1; i < c; i++) {\n        s = Trees.toStringTree(tree.getChild(i), ruleNames);\n        res = res.concat(' ' + s);\n    }\n    res = res.concat(\")\");\n    return res;\n};\n\nTrees.getNodeText = function (t, ruleNames, recog) {\n    ruleNames = ruleNames || null;\n    recog = recog || null;\n    if (recog !== null) {\n        ruleNames = recog.ruleNames;\n    }\n    if (ruleNames !== null) {\n        if (t instanceof RuleContext) {\n            var altNumber = t.getAltNumber();\n            if (altNumber != INVALID_ALT_NUMBER) {\n                return ruleNames[t.ruleIndex] + \":\" + altNumber;\n            }\n            return ruleNames[t.ruleIndex];\n        } else if (t instanceof ErrorNode) {\n            return t.toString();\n        } else if (t instanceof TerminalNode) {\n            if (t.symbol !== null) {\n                return t.symbol.text;\n            }\n        }\n    }\n    // no recog for rule names\n    var payload = t.getPayload();\n    if (payload instanceof Token) {\n        return payload.text;\n    }\n    return t.getPayload().toString();\n};\n\n// Return ordered list of all children of this node\nTrees.getChildren = function (t) {\n    var list = [];\n    for (var i = 0; i < t.getChildCount(); i++) {\n        list.push(t.getChild(i));\n    }\n    return list;\n};\n\n// Return a list of all ancestors of this node.  The first node of\n//  list is the root and the last is the parent of this node.\n//\nTrees.getAncestors = function (t) {\n    var ancestors = [];\n    t = t.getParent();\n    while (t !== null) {\n        ancestors = [t].concat(ancestors);\n        t = t.getParent();\n    }\n    return ancestors;\n};\n\nTrees.findAllTokenNodes = function (t, ttype) {\n    return Trees.findAllNodes(t, ttype, true);\n};\n\nTrees.findAllRuleNodes = function (t, ruleIndex) {\n    return Trees.findAllNodes(t, ruleIndex, false);\n};\n\nTrees.findAllNodes = function (t, index, findTokens) {\n    var nodes = [];\n    Trees._findAllNodes(t, index, findTokens, nodes);\n    return nodes;\n};\n\nTrees._findAllNodes = function (t, index, findTokens, nodes) {\n    // check this node (the root) first\n    if (findTokens && t instanceof TerminalNode) {\n        if (t.symbol.type === index) {\n            nodes.push(t);\n        }\n    } else if (!findTokens && t instanceof ParserRuleContext) {\n        if (t.ruleIndex === index) {\n            nodes.push(t);\n        }\n    }\n    // check children\n    for (var i = 0; i < t.getChildCount(); i++) {\n        Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);\n    }\n};\n\nTrees.descendants = function (t) {\n    var nodes = [t];\n    for (var i = 0; i < t.getChildCount(); i++) {\n        nodes = nodes.concat(Trees.descendants(t.getChild(i)));\n    }\n    return nodes;\n};\n\nexports.Trees = Trees;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L3RyZWUvVHJlZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsWUFBWSxtQkFBTyxDQUFDLG1GQUFZO0FBQ2hDLFlBQVksZ0hBQTJCO0FBQ3ZDLGVBQWUsbUhBQTBCO0FBQ3pDLGdCQUFnQixvSEFBMkI7QUFDM0MsbUJBQW1CLHVIQUE4QjtBQUNqRCx3QkFBd0Isb0pBQW1EO0FBQzNFLGtCQUFrQixrSUFBdUM7QUFDekQseUJBQXlCLGlJQUEwQzs7QUFFbkU7QUFDQTs7QUFFQSx5Q0FBeUMscUJBQXFCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLE9BQU87QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsdUJBQXVCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsdUJBQXVCO0FBQzNDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLHVCQUF1QjtBQUMzQztBQUNBO0FBQ0E7QUFDQTs7QUFFQSxhQUFhIiwic291cmNlcyI6WyIvVXNlcnMvbWFjL2Zsb3dwb3J0L25vZGVfbW9kdWxlcy9zb2xpZGl0eS1wYXJzZXItYW50bHIvZGlzdC9hbnRscjQvdHJlZS9UcmVlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxudmFyIFV0aWxzID0gcmVxdWlyZSgnLi8uLi9VdGlscycpO1xudmFyIFRva2VuID0gcmVxdWlyZSgnLi8uLi9Ub2tlbicpLlRva2VuO1xudmFyIFJ1bGVOb2RlID0gcmVxdWlyZSgnLi9UcmVlJykuUnVsZU5vZGU7XG52YXIgRXJyb3JOb2RlID0gcmVxdWlyZSgnLi9UcmVlJykuRXJyb3JOb2RlO1xudmFyIFRlcm1pbmFsTm9kZSA9IHJlcXVpcmUoJy4vVHJlZScpLlRlcm1pbmFsTm9kZTtcbnZhciBQYXJzZXJSdWxlQ29udGV4dCA9IHJlcXVpcmUoJy4vLi4vUGFyc2VyUnVsZUNvbnRleHQnKS5QYXJzZXJSdWxlQ29udGV4dDtcbnZhciBSdWxlQ29udGV4dCA9IHJlcXVpcmUoJy4vLi4vUnVsZUNvbnRleHQnKS5SdWxlQ29udGV4dDtcbnZhciBJTlZBTElEX0FMVF9OVU1CRVIgPSByZXF1aXJlKCcuLy4uL2F0bi9BVE4nKS5JTlZBTElEX0FMVF9OVU1CRVI7XG5cbi8qKiBBIHNldCBvZiB1dGlsaXR5IHJvdXRpbmVzIHVzZWZ1bCBmb3IgYWxsIGtpbmRzIG9mIEFOVExSIHRyZWVzLiAqL1xuZnVuY3Rpb24gVHJlZXMoKSB7fVxuXG4vLyBQcmludCBvdXQgYSB3aG9sZSB0cmVlIGluIExJU1AgZm9ybS4ge0BsaW5rIC8vZ2V0Tm9kZVRleHR9IGlzIHVzZWQgb24gdGhlXG4vLyAgbm9kZSBwYXlsb2FkcyB0byBnZXQgdGhlIHRleHQgZm9yIHRoZSBub2Rlcy4gIERldGVjdFxuLy8gIHBhcnNlIHRyZWVzIGFuZCBleHRyYWN0IGRhdGEgYXBwcm9wcmlhdGVseS5cblRyZWVzLnRvU3RyaW5nVHJlZSA9IGZ1bmN0aW9uICh0cmVlLCBydWxlTmFtZXMsIHJlY29nKSB7XG4gICAgcnVsZU5hbWVzID0gcnVsZU5hbWVzIHx8IG51bGw7XG4gICAgcmVjb2cgPSByZWNvZyB8fCBudWxsO1xuICAgIGlmIChyZWNvZyAhPT0gbnVsbCkge1xuICAgICAgICBydWxlTmFtZXMgPSByZWNvZy5ydWxlTmFtZXM7XG4gICAgfVxuICAgIHZhciBzID0gVHJlZXMuZ2V0Tm9kZVRleHQodHJlZSwgcnVsZU5hbWVzKTtcbiAgICBzID0gVXRpbHMuZXNjYXBlV2hpdGVzcGFjZShzLCBmYWxzZSk7XG4gICAgdmFyIGMgPSB0cmVlLmdldENoaWxkQ291bnQoKTtcbiAgICBpZiAoYyA9PT0gMCkge1xuICAgICAgICByZXR1cm4gcztcbiAgICB9XG4gICAgdmFyIHJlcyA9IFwiKFwiICsgcyArICcgJztcbiAgICBpZiAoYyA+IDApIHtcbiAgICAgICAgcyA9IFRyZWVzLnRvU3RyaW5nVHJlZSh0cmVlLmdldENoaWxkKDApLCBydWxlTmFtZXMpO1xuICAgICAgICByZXMgPSByZXMuY29uY2F0KHMpO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGM7IGkrKykge1xuICAgICAgICBzID0gVHJlZXMudG9TdHJpbmdUcmVlKHRyZWUuZ2V0Q2hpbGQoaSksIHJ1bGVOYW1lcyk7XG4gICAgICAgIHJlcyA9IHJlcy5jb25jYXQoJyAnICsgcyk7XG4gICAgfVxuICAgIHJlcyA9IHJlcy5jb25jYXQoXCIpXCIpO1xuICAgIHJldHVybiByZXM7XG59O1xuXG5UcmVlcy5nZXROb2RlVGV4dCA9IGZ1bmN0aW9uICh0LCBydWxlTmFtZXMsIHJlY29nKSB7XG4gICAgcnVsZU5hbWVzID0gcnVsZU5hbWVzIHx8IG51bGw7XG4gICAgcmVjb2cgPSByZWNvZyB8fCBudWxsO1xuICAgIGlmIChyZWNvZyAhPT0gbnVsbCkge1xuICAgICAgICBydWxlTmFtZXMgPSByZWNvZy5ydWxlTmFtZXM7XG4gICAgfVxuICAgIGlmIChydWxlTmFtZXMgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBSdWxlQ29udGV4dCkge1xuICAgICAgICAgICAgdmFyIGFsdE51bWJlciA9IHQuZ2V0QWx0TnVtYmVyKCk7XG4gICAgICAgICAgICBpZiAoYWx0TnVtYmVyICE9IElOVkFMSURfQUxUX05VTUJFUikge1xuICAgICAgICAgICAgICAgIHJldHVybiBydWxlTmFtZXNbdC5ydWxlSW5kZXhdICsgXCI6XCIgKyBhbHROdW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcnVsZU5hbWVzW3QucnVsZUluZGV4XTtcbiAgICAgICAgfSBlbHNlIGlmICh0IGluc3RhbmNlb2YgRXJyb3JOb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gdC50b1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHQgaW5zdGFuY2VvZiBUZXJtaW5hbE5vZGUpIHtcbiAgICAgICAgICAgIGlmICh0LnN5bWJvbCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0LnN5bWJvbC50ZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIG5vIHJlY29nIGZvciBydWxlIG5hbWVzXG4gICAgdmFyIHBheWxvYWQgPSB0LmdldFBheWxvYWQoKTtcbiAgICBpZiAocGF5bG9hZCBpbnN0YW5jZW9mIFRva2VuKSB7XG4gICAgICAgIHJldHVybiBwYXlsb2FkLnRleHQ7XG4gICAgfVxuICAgIHJldHVybiB0LmdldFBheWxvYWQoKS50b1N0cmluZygpO1xufTtcblxuLy8gUmV0dXJuIG9yZGVyZWQgbGlzdCBvZiBhbGwgY2hpbGRyZW4gb2YgdGhpcyBub2RlXG5UcmVlcy5nZXRDaGlsZHJlbiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgdmFyIGxpc3QgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHQuZ2V0Q2hpbGRDb3VudCgpOyBpKyspIHtcbiAgICAgICAgbGlzdC5wdXNoKHQuZ2V0Q2hpbGQoaSkpO1xuICAgIH1cbiAgICByZXR1cm4gbGlzdDtcbn07XG5cbi8vIFJldHVybiBhIGxpc3Qgb2YgYWxsIGFuY2VzdG9ycyBvZiB0aGlzIG5vZGUuICBUaGUgZmlyc3Qgbm9kZSBvZlxuLy8gIGxpc3QgaXMgdGhlIHJvb3QgYW5kIHRoZSBsYXN0IGlzIHRoZSBwYXJlbnQgb2YgdGhpcyBub2RlLlxuLy9cblRyZWVzLmdldEFuY2VzdG9ycyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgdmFyIGFuY2VzdG9ycyA9IFtdO1xuICAgIHQgPSB0LmdldFBhcmVudCgpO1xuICAgIHdoaWxlICh0ICE9PSBudWxsKSB7XG4gICAgICAgIGFuY2VzdG9ycyA9IFt0XS5jb25jYXQoYW5jZXN0b3JzKTtcbiAgICAgICAgdCA9IHQuZ2V0UGFyZW50KCk7XG4gICAgfVxuICAgIHJldHVybiBhbmNlc3RvcnM7XG59O1xuXG5UcmVlcy5maW5kQWxsVG9rZW5Ob2RlcyA9IGZ1bmN0aW9uICh0LCB0dHlwZSkge1xuICAgIHJldHVybiBUcmVlcy5maW5kQWxsTm9kZXModCwgdHR5cGUsIHRydWUpO1xufTtcblxuVHJlZXMuZmluZEFsbFJ1bGVOb2RlcyA9IGZ1bmN0aW9uICh0LCBydWxlSW5kZXgpIHtcbiAgICByZXR1cm4gVHJlZXMuZmluZEFsbE5vZGVzKHQsIHJ1bGVJbmRleCwgZmFsc2UpO1xufTtcblxuVHJlZXMuZmluZEFsbE5vZGVzID0gZnVuY3Rpb24gKHQsIGluZGV4LCBmaW5kVG9rZW5zKSB7XG4gICAgdmFyIG5vZGVzID0gW107XG4gICAgVHJlZXMuX2ZpbmRBbGxOb2Rlcyh0LCBpbmRleCwgZmluZFRva2Vucywgbm9kZXMpO1xuICAgIHJldHVybiBub2Rlcztcbn07XG5cblRyZWVzLl9maW5kQWxsTm9kZXMgPSBmdW5jdGlvbiAodCwgaW5kZXgsIGZpbmRUb2tlbnMsIG5vZGVzKSB7XG4gICAgLy8gY2hlY2sgdGhpcyBub2RlICh0aGUgcm9vdCkgZmlyc3RcbiAgICBpZiAoZmluZFRva2VucyAmJiB0IGluc3RhbmNlb2YgVGVybWluYWxOb2RlKSB7XG4gICAgICAgIGlmICh0LnN5bWJvbC50eXBlID09PSBpbmRleCkge1xuICAgICAgICAgICAgbm9kZXMucHVzaCh0KTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWZpbmRUb2tlbnMgJiYgdCBpbnN0YW5jZW9mIFBhcnNlclJ1bGVDb250ZXh0KSB7XG4gICAgICAgIGlmICh0LnJ1bGVJbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgIG5vZGVzLnB1c2godCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gY2hlY2sgY2hpbGRyZW5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHQuZ2V0Q2hpbGRDb3VudCgpOyBpKyspIHtcbiAgICAgICAgVHJlZXMuX2ZpbmRBbGxOb2Rlcyh0LmdldENoaWxkKGkpLCBpbmRleCwgZmluZFRva2Vucywgbm9kZXMpO1xuICAgIH1cbn07XG5cblRyZWVzLmRlc2NlbmRhbnRzID0gZnVuY3Rpb24gKHQpIHtcbiAgICB2YXIgbm9kZXMgPSBbdF07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0LmdldENoaWxkQ291bnQoKTsgaSsrKSB7XG4gICAgICAgIG5vZGVzID0gbm9kZXMuY29uY2F0KFRyZWVzLmRlc2NlbmRhbnRzKHQuZ2V0Q2hpbGQoaSkpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGVzO1xufTtcblxuZXhwb3J0cy5UcmVlcyA9IFRyZWVzOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/tree/Trees.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/tree/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/antlr4/tree/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nvar Tree = __webpack_require__(/*! ./Tree */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/tree/Tree.js\");\nexports.Trees = __webpack_require__(/*! ./Trees */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/tree/Trees.js\").Trees;\nexports.RuleNode = Tree.RuleNode;\nexports.ParseTreeListener = Tree.ParseTreeListener;\nexports.ParseTreeVisitor = Tree.ParseTreeVisitor;\nexports.ParseTreeWalker = Tree.ParseTreeWalker;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvYW50bHI0L3RyZWUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsV0FBVyxtQkFBTyxDQUFDLG1GQUFRO0FBQzNCLGdJQUF3QztBQUN4QyxnQkFBZ0I7QUFDaEIseUJBQXlCO0FBQ3pCLHdCQUF3QjtBQUN4Qix1QkFBdUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWMvZmxvd3BvcnQvbm9kZV9tb2R1bGVzL3NvbGlkaXR5LXBhcnNlci1hbnRsci9kaXN0L2FudGxyNC90cmVlL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG52YXIgVHJlZSA9IHJlcXVpcmUoJy4vVHJlZScpO1xuZXhwb3J0cy5UcmVlcyA9IHJlcXVpcmUoJy4vVHJlZXMnKS5UcmVlcztcbmV4cG9ydHMuUnVsZU5vZGUgPSBUcmVlLlJ1bGVOb2RlO1xuZXhwb3J0cy5QYXJzZVRyZWVMaXN0ZW5lciA9IFRyZWUuUGFyc2VUcmVlTGlzdGVuZXI7XG5leHBvcnRzLlBhcnNlVHJlZVZpc2l0b3IgPSBUcmVlLlBhcnNlVHJlZVZpc2l0b3I7XG5leHBvcnRzLlBhcnNlVHJlZVdhbGtlciA9IFRyZWUuUGFyc2VUcmVlV2Fsa2VyOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/tree/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar antlr4 = __webpack_require__(/*! ./antlr4/index */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/index.js\");\n\nvar _require = __webpack_require__(/*! ./lib/SolidityLexer */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/lib/SolidityLexer.js\"),\n    SolidityLexer = _require.SolidityLexer;\n\nvar _require2 = __webpack_require__(/*! ./lib/SolidityParser */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/lib/SolidityParser.js\"),\n    SolidityParser = _require2.SolidityParser;\n\nvar ASTBuilder = __webpack_require__(/*! ./ASTBuilder */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/ASTBuilder.js\");\nvar ErrorListener = __webpack_require__(/*! ./ErrorListener */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/ErrorListener.js\");\n\nvar _require3 = __webpack_require__(/*! ./tokens */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/tokens.js\"),\n    buildTokenList = _require3.buildTokenList;\n\nfunction ParserError(args) {\n  var _args$errors$ = args.errors[0],\n      message = _args$errors$.message,\n      line = _args$errors$.line,\n      column = _args$errors$.column;\n\n  this.message = message + ' (' + line + ':' + column + ')';\n  this.errors = args.errors;\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    this.stack = new Error().stack;\n  }\n}\n\nParserError.prototype = Object.create(Error.prototype);\nParserError.prototype.constructor = ParserError;\nParserError.prototype.name = 'ParserError';\n\nfunction tokenize(input, options) {\n  options = options || {};\n\n  var chars = antlr4.CharStreams.fromString(input);\n  var lexer = new SolidityLexer(chars);\n  var tokens = new antlr4.CommonTokenStream(lexer);\n\n  return buildTokenList(tokens.tokenSource.getAllTokens(), options);\n}\n\nfunction parse(input, options) {\n  options = options || {};\n\n  var chars = antlr4.CharStreams.fromString(input);\n\n  var listener = new ErrorListener();\n\n  var lexer = new SolidityLexer(chars);\n  lexer.removeErrorListeners();\n  lexer.addErrorListener(listener);\n\n  var tokens = new antlr4.CommonTokenStream(lexer);\n\n  var parser = new SolidityParser(tokens);\n\n  parser.removeErrorListeners();\n  parser.addErrorListener(listener);\n  parser.buildParseTrees = true;\n\n  var tree = parser.sourceUnit();\n\n  var tokenList = void 0;\n  if (options.tokens) {\n    var tokenSource = tokens.tokenSource;\n    tokenSource.reset();\n\n    tokenList = buildTokenList(tokenSource.getAllTokens(), options);\n  }\n\n  if (!options.tolerant && listener.hasErrors()) {\n    throw new ParserError({ errors: listener.getErrors() });\n  }\n\n  var visitor = new ASTBuilder(options);\n  var ast = visitor.visit(tree);\n\n  if (options.tolerant && listener.hasErrors()) {\n    ast.errors = listener.getErrors();\n  }\n  if (options.tokens) {\n    ast.tokens = tokenList;\n  }\n\n  return ast;\n}\n\nfunction _isASTNode(node) {\n  return !!node && (typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object' && node.hasOwnProperty('type');\n}\n\nfunction visit(node, visitor) {\n  if (Array.isArray(node)) {\n    node.forEach(function (child) {\n      return visit(child, visitor);\n    });\n  }\n\n  if (!_isASTNode(node)) return;\n\n  var cont = true;\n\n  if (visitor[node.type]) {\n    cont = visitor[node.type](node);\n  }\n\n  if (cont === false) return;\n\n  for (var prop in node) {\n    if (node.hasOwnProperty(prop)) {\n      visit(node[prop], visitor);\n    }\n  }\n\n  var selector = node.type + ':exit';\n  if (visitor[selector]) {\n    visitor[selector](node);\n  }\n}\n\nexports.tokenize = tokenize;\nexports.parse = parse;\nexports.visit = visit;\nexports.ParserError = ParserError;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIscUdBQXFHLHFCQUFxQixtQkFBbUI7O0FBRTdJLGFBQWEsbUJBQU8sQ0FBQyx1RkFBZ0I7O0FBRXJDLGVBQWUsbUJBQU8sQ0FBQyxpR0FBcUI7QUFDNUM7O0FBRUEsZ0JBQWdCLG1CQUFPLENBQUMsbUdBQXNCO0FBQzlDOztBQUVBLGlCQUFpQixtQkFBTyxDQUFDLG1GQUFjO0FBQ3ZDLG9CQUFvQixtQkFBTyxDQUFDLHlGQUFpQjs7QUFFN0MsZ0JBQWdCLG1CQUFPLENBQUMsMkVBQVU7QUFDbEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsNEJBQTRCLDhCQUE4QjtBQUMxRDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdCQUFnQjtBQUNoQixhQUFhO0FBQ2IsYUFBYTtBQUNiLG1CQUFtQiIsInNvdXJjZXMiOlsiL1VzZXJzL21hYy9mbG93cG9ydC9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBhbnRscjQgPSByZXF1aXJlKCcuL2FudGxyNC9pbmRleCcpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL2xpYi9Tb2xpZGl0eUxleGVyJyksXG4gICAgU29saWRpdHlMZXhlciA9IF9yZXF1aXJlLlNvbGlkaXR5TGV4ZXI7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCcuL2xpYi9Tb2xpZGl0eVBhcnNlcicpLFxuICAgIFNvbGlkaXR5UGFyc2VyID0gX3JlcXVpcmUyLlNvbGlkaXR5UGFyc2VyO1xuXG52YXIgQVNUQnVpbGRlciA9IHJlcXVpcmUoJy4vQVNUQnVpbGRlcicpO1xudmFyIEVycm9yTGlzdGVuZXIgPSByZXF1aXJlKCcuL0Vycm9yTGlzdGVuZXInKTtcblxudmFyIF9yZXF1aXJlMyA9IHJlcXVpcmUoJy4vdG9rZW5zJyksXG4gICAgYnVpbGRUb2tlbkxpc3QgPSBfcmVxdWlyZTMuYnVpbGRUb2tlbkxpc3Q7XG5cbmZ1bmN0aW9uIFBhcnNlckVycm9yKGFyZ3MpIHtcbiAgdmFyIF9hcmdzJGVycm9ycyQgPSBhcmdzLmVycm9yc1swXSxcbiAgICAgIG1lc3NhZ2UgPSBfYXJncyRlcnJvcnMkLm1lc3NhZ2UsXG4gICAgICBsaW5lID0gX2FyZ3MkZXJyb3JzJC5saW5lLFxuICAgICAgY29sdW1uID0gX2FyZ3MkZXJyb3JzJC5jb2x1bW47XG5cbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZSArICcgKCcgKyBsaW5lICsgJzonICsgY29sdW1uICsgJyknO1xuICB0aGlzLmVycm9ycyA9IGFyZ3MuZXJyb3JzO1xuXG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgfVxufVxuXG5QYXJzZXJFcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG5QYXJzZXJFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQYXJzZXJFcnJvcjtcblBhcnNlckVycm9yLnByb3RvdHlwZS5uYW1lID0gJ1BhcnNlckVycm9yJztcblxuZnVuY3Rpb24gdG9rZW5pemUoaW5wdXQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdmFyIGNoYXJzID0gYW50bHI0LkNoYXJTdHJlYW1zLmZyb21TdHJpbmcoaW5wdXQpO1xuICB2YXIgbGV4ZXIgPSBuZXcgU29saWRpdHlMZXhlcihjaGFycyk7XG4gIHZhciB0b2tlbnMgPSBuZXcgYW50bHI0LkNvbW1vblRva2VuU3RyZWFtKGxleGVyKTtcblxuICByZXR1cm4gYnVpbGRUb2tlbkxpc3QodG9rZW5zLnRva2VuU291cmNlLmdldEFsbFRva2VucygpLCBvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcGFyc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdmFyIGNoYXJzID0gYW50bHI0LkNoYXJTdHJlYW1zLmZyb21TdHJpbmcoaW5wdXQpO1xuXG4gIHZhciBsaXN0ZW5lciA9IG5ldyBFcnJvckxpc3RlbmVyKCk7XG5cbiAgdmFyIGxleGVyID0gbmV3IFNvbGlkaXR5TGV4ZXIoY2hhcnMpO1xuICBsZXhlci5yZW1vdmVFcnJvckxpc3RlbmVycygpO1xuICBsZXhlci5hZGRFcnJvckxpc3RlbmVyKGxpc3RlbmVyKTtcblxuICB2YXIgdG9rZW5zID0gbmV3IGFudGxyNC5Db21tb25Ub2tlblN0cmVhbShsZXhlcik7XG5cbiAgdmFyIHBhcnNlciA9IG5ldyBTb2xpZGl0eVBhcnNlcih0b2tlbnMpO1xuXG4gIHBhcnNlci5yZW1vdmVFcnJvckxpc3RlbmVycygpO1xuICBwYXJzZXIuYWRkRXJyb3JMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIHBhcnNlci5idWlsZFBhcnNlVHJlZXMgPSB0cnVlO1xuXG4gIHZhciB0cmVlID0gcGFyc2VyLnNvdXJjZVVuaXQoKTtcblxuICB2YXIgdG9rZW5MaXN0ID0gdm9pZCAwO1xuICBpZiAob3B0aW9ucy50b2tlbnMpIHtcbiAgICB2YXIgdG9rZW5Tb3VyY2UgPSB0b2tlbnMudG9rZW5Tb3VyY2U7XG4gICAgdG9rZW5Tb3VyY2UucmVzZXQoKTtcblxuICAgIHRva2VuTGlzdCA9IGJ1aWxkVG9rZW5MaXN0KHRva2VuU291cmNlLmdldEFsbFRva2VucygpLCBvcHRpb25zKTtcbiAgfVxuXG4gIGlmICghb3B0aW9ucy50b2xlcmFudCAmJiBsaXN0ZW5lci5oYXNFcnJvcnMoKSkge1xuICAgIHRocm93IG5ldyBQYXJzZXJFcnJvcih7IGVycm9yczogbGlzdGVuZXIuZ2V0RXJyb3JzKCkgfSk7XG4gIH1cblxuICB2YXIgdmlzaXRvciA9IG5ldyBBU1RCdWlsZGVyKG9wdGlvbnMpO1xuICB2YXIgYXN0ID0gdmlzaXRvci52aXNpdCh0cmVlKTtcblxuICBpZiAob3B0aW9ucy50b2xlcmFudCAmJiBsaXN0ZW5lci5oYXNFcnJvcnMoKSkge1xuICAgIGFzdC5lcnJvcnMgPSBsaXN0ZW5lci5nZXRFcnJvcnMoKTtcbiAgfVxuICBpZiAob3B0aW9ucy50b2tlbnMpIHtcbiAgICBhc3QudG9rZW5zID0gdG9rZW5MaXN0O1xuICB9XG5cbiAgcmV0dXJuIGFzdDtcbn1cblxuZnVuY3Rpb24gX2lzQVNUTm9kZShub2RlKSB7XG4gIHJldHVybiAhIW5vZGUgJiYgKHR5cGVvZiBub2RlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihub2RlKSkgPT09ICdvYmplY3QnICYmIG5vZGUuaGFzT3duUHJvcGVydHkoJ3R5cGUnKTtcbn1cblxuZnVuY3Rpb24gdmlzaXQobm9kZSwgdmlzaXRvcikge1xuICBpZiAoQXJyYXkuaXNBcnJheShub2RlKSkge1xuICAgIG5vZGUuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHJldHVybiB2aXNpdChjaGlsZCwgdmlzaXRvcik7XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIV9pc0FTVE5vZGUobm9kZSkpIHJldHVybjtcblxuICB2YXIgY29udCA9IHRydWU7XG5cbiAgaWYgKHZpc2l0b3Jbbm9kZS50eXBlXSkge1xuICAgIGNvbnQgPSB2aXNpdG9yW25vZGUudHlwZV0obm9kZSk7XG4gIH1cblxuICBpZiAoY29udCA9PT0gZmFsc2UpIHJldHVybjtcblxuICBmb3IgKHZhciBwcm9wIGluIG5vZGUpIHtcbiAgICBpZiAobm9kZS5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgdmlzaXQobm9kZVtwcm9wXSwgdmlzaXRvcik7XG4gICAgfVxuICB9XG5cbiAgdmFyIHNlbGVjdG9yID0gbm9kZS50eXBlICsgJzpleGl0JztcbiAgaWYgKHZpc2l0b3Jbc2VsZWN0b3JdKSB7XG4gICAgdmlzaXRvcltzZWxlY3Rvcl0obm9kZSk7XG4gIH1cbn1cblxuZXhwb3J0cy50b2tlbml6ZSA9IHRva2VuaXplO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy52aXNpdCA9IHZpc2l0O1xuZXhwb3J0cy5QYXJzZXJFcnJvciA9IFBhcnNlckVycm9yOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/lib/SolidityLexer.js":
/*!**********************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/lib/SolidityLexer.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n// Generated from solidity-antlr4/Solidity.g4 by ANTLR 4.7.2\n// jshint ignore: start\nvar antlr4 = __webpack_require__(/*! ../antlr4/index */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/index.js\");\n\nvar serializedATN = [\"\\x03\\u608B\\uA72A\\u8133\\uB9ED\\u417C\\u3BE7\\u7786\\u5964\", \"\\x02z\\u06BD\\b\\x01\\x04\\x02\\t\\x02\\x04\\x03\\t\\x03\\x04\", \"\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\\x07\\t\", \"\\x07\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\x0B\\t\\x0B\\x04\", \"\\f\\t\\f\\x04\\r\\t\\r\\x04\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x04\\x10\", \"\\t\\x10\\x04\\x11\\t\\x11\\x04\\x12\\t\\x12\\x04\\x13\\t\\x13\", \"\\x04\\x14\\t\\x14\\x04\\x15\\t\\x15\\x04\\x16\\t\\x16\\x04\\x17\", \"\\t\\x17\\x04\\x18\\t\\x18\\x04\\x19\\t\\x19\\x04\\x1A\\t\\x1A\", \"\\x04\\x1B\\t\\x1B\\x04\\x1C\\t\\x1C\\x04\\x1D\\t\\x1D\\x04\\x1E\", \"\\t\\x1E\\x04\\x1F\\t\\x1F\\x04 \\t \\x04!\\t!\\x04\\\"\\t\\\"\\x04#\", \"\\t#\\x04$\\t$\\x04%\\t%\\x04&\\t&\\x04'\\t'\\x04(\\t(\\x04)\\t)\\x04\", \"*\\t*\\x04+\\t+\\x04,\\t,\\x04-\\t-\\x04.\\t.\\x04/\\t/\\x040\\t0\\x04\", \"1\\t1\\x042\\t2\\x043\\t3\\x044\\t4\\x045\\t5\\x046\\t6\\x047\\t7\\x04\", \"8\\t8\\x049\\t9\\x04:\\t:\\x04;\\t;\\x04<\\t<\\x04=\\t=\\x04>\\t>\\x04\", \"?\\t?\\x04@\\t@\\x04A\\tA\\x04B\\tB\\x04C\\tC\\x04D\\tD\\x04E\\tE\\x04\", \"F\\tF\\x04G\\tG\\x04H\\tH\\x04I\\tI\\x04J\\tJ\\x04K\\tK\\x04L\\tL\\x04\", \"M\\tM\\x04N\\tN\\x04O\\tO\\x04P\\tP\\x04Q\\tQ\\x04R\\tR\\x04S\\tS\\x04\", \"T\\tT\\x04U\\tU\\x04V\\tV\\x04W\\tW\\x04X\\tX\\x04Y\\tY\\x04Z\\tZ\\x04\", \"[\\t[\\x04\\\\\\t\\\\\\x04]\\t]\\x04^\\t^\\x04_\\t_\\x04`\\t`\\x04a\\ta\\x04\", \"b\\tb\\x04c\\tc\\x04d\\td\\x04e\\te\\x04f\\tf\\x04g\\tg\\x04h\\th\\x04\", \"i\\ti\\x04j\\tj\\x04k\\tk\\x04l\\tl\\x04m\\tm\\x04n\\tn\\x04o\\to\\x04\", \"p\\tp\\x04q\\tq\\x04r\\tr\\x04s\\ts\\x04t\\tt\\x04u\\tu\\x04v\\tv\\x04\", \"w\\tw\\x04x\\tx\\x04y\\ty\\x04z\\tz\\x04{\\t{\\x04|\\t|\\x04}\\t}\\x04\", \"~\\t~\\x04\\x7F\\t\\x7F\\x04\\x80\\t\\x80\\x04\\x81\\t\\x81\\x03\", \"\\x02\\x03\\x02\\x03\\x02\\x03\\x02\\x03\\x02\\x03\\x02\\x03\", \"\\x02\\x03\\x03\\x03\\x03\\x03\\x04\\x03\\x04\\x03\\x05\\x03\", \"\\x05\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x07\\x03\\x07\\x03\", \"\\b\\x03\\b\\x03\\t\\x03\\t\\x03\\t\\x03\\n\\x03\\n\\x03\\x0B\\x03\", \"\\x0B\\x03\\x0B\\x03\\f\\x03\\f\\x03\\f\\x03\\f\\x03\\f\\x03\\f\\x03\", \"\\f\\x03\\r\\x03\\r\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\", \"\\x0E\\x03\\x0F\\x03\\x0F\\x03\\x10\\x03\\x10\\x03\\x11\\x03\", \"\\x11\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\", \"\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x13\\x03\\x13\\x03\", \"\\x13\\x03\\x13\\x03\\x13\\x03\\x13\\x03\\x13\\x03\\x13\\x03\", \"\\x13\\x03\\x13\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\", \"\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x15\\x03\\x15\\x03\", \"\\x15\\x03\\x16\\x03\\x16\\x03\\x17\\x03\\x17\\x03\\x18\\x03\", \"\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x19\\x03\", \"\\x19\\x03\\x19\\x03\\x19\\x03\\x1A\\x03\\x1A\\x03\\x1A\\x03\", \"\\x1A\\x03\\x1A\\x03\\x1A\\x03\\x1A\\x03\\x1B\\x03\\x1B\\x03\", \"\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\", \"\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1C\\x03\\x1C\\x03\", \"\\x1C\\x03\\x1C\\x03\\x1C\\x03\\x1C\\x03\\x1C\\x03\\x1C\\x03\", \"\\x1C\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\", \"\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1E\\x03\\x1E\\x03\", \"\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x03\", \"\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\", \" \\x03 \\x03 \\x03 \\x03 \\x03!\\x03!\\x03\\\"\\x03\\\"\\x03#\\x03\", \"#\\x03#\\x03#\\x03#\\x03#\\x03#\\x03#\\x03$\\x03$\\x03%\\x03\", \"%\\x03%\\x03%\\x03%\\x03%\\x03%\\x03%\\x03&\\x03&\\x03&\\x03\", \"'\\x03'\\x03'\\x03'\\x03'\\x03'\\x03'\\x03(\\x03(\\x03\", \"(\\x03(\\x03(\\x03(\\x03(\\x03(\\x03)\\x03)\\x03)\\x03)\\x03\", \")\\x03)\\x03)\\x03)\\x03)\\x03*\\x03*\\x03*\\x03+\\x03+\\x03\", \"+\\x03+\\x03+\\x03,\\x03,\\x03,\\x03,\\x03,\\x03,\\x03-\\x03\", \"-\\x03-\\x03-\\x03-\\x03-\\x03-\\x03-\\x03-\\x03.\\x03.\\x03\", \".\\x03/\\x03/\\x03/\\x03/\\x03/\\x03/\\x03/\\x030\\x030\\x03\", \"0\\x030\\x030\\x030\\x031\\x031\\x031\\x031\\x031\\x032\\x03\", \"2\\x032\\x032\\x033\\x033\\x033\\x033\\x033\\x034\\x034\\x03\", \"4\\x034\\x034\\x034\\x034\\x035\\x035\\x035\\x035\\x035\\x03\", \"6\\x036\\x036\\x037\\x037\\x037\\x038\\x038\\x038\\x038\\x03\", \"9\\x039\\x03:\\x03:\\x03;\\x03;\\x03;\\x03;\\x03;\\x03;\\x03\", \"<\\x03<\\x03<\\x03<\\x03<\\x03<\\x03<\\x03=\\x03=\\x03>\\x03\", \">\\x03>\\x03?\\x03?\\x03@\\x03@\\x03A\\x03A\\x03A\\x03B\\x03\", \"B\\x03B\\x03C\\x03C\\x03D\\x03D\\x03E\\x03E\\x03E\\x03F\\x03\", \"F\\x03F\\x03G\\x03G\\x03G\\x03H\\x03H\\x03H\\x03I\\x03I\\x03\", \"J\\x03J\\x03K\\x03K\\x03K\\x03L\\x03L\\x03L\\x03M\\x03M\\x03\", \"M\\x03N\\x03N\\x03N\\x03N\\x03O\\x03O\\x03O\\x03O\\x03P\\x03\", \"P\\x03P\\x03Q\\x03Q\\x03Q\\x03R\\x03R\\x03R\\x03S\\x03S\\x03\", \"S\\x03T\\x03T\\x03T\\x03U\\x03U\\x03U\\x03U\\x03V\\x03V\\x03\", \"V\\x03W\\x03W\\x03W\\x03X\\x03X\\x03X\\x03X\\x03X\\x03X\\x03\", \"X\\x03Y\\x03Y\\x03Y\\x03Y\\x03Y\\x03Z\\x03Z\\x03Z\\x03Z\\x03\", \"Z\\x03Z\\x03Z\\x03Z\\x03[\\x03[\\x03[\\x03\\\\\\x03\\\\\\x03\\\\\", \"\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\", \"\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\", \"\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\", \"\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\", \"\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\", \"\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\", \"\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\", \"\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\", \"\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\", \"\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\", \"\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\", \"\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\", \"\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\", \"\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\", \"\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\", \"\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\", \"\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\", \"\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\", \"\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\", \"\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x05\", \"\\\\\\u033F\\n\\\\\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03\", \"]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03\", \"]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03\", \"]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03\", \"]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03\", \"]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03\", \"]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03\", \"]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03\", \"]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03\", \"]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03\", \"]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03\", \"]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03\", \"]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03\", \"]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03\", \"]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03\", \"]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03\", \"]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03\", \"]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03\", \"]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03\", \"]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03\", \"]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03\", \"]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x05]\\u0418\\n]\\x03\", \"^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03\", \"^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03\", \"^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03\", \"^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03\", \"^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03\", \"^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03\", \"^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03\", \"^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03\", \"^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03\", \"^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03\", \"^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03\", \"^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03\", \"^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03\", \"^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03\", \"^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03\", \"^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03\", \"^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03\", \"^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03\", \"^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03\", \"^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03\", \"^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03\", \"^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x05\", \"^\\u04F6\\n^\\x03_\\x03_\\x03_\\x03_\\x03_\\x03_\\x03_\\x03_\\x03\", \"_\\x03_\\x03_\\x03_\\x06_\\u0504\\n_\\r_\\x0E_\\u0505\\x03_\\x03\", \"_\\x06_\\u050A\\n_\\r_\\x0E_\\u050B\\x05_\\u050E\\n_\\x03`\\x03`\\x03\", \"`\\x03`\\x03`\\x03`\\x03`\\x03`\\x03`\\x03`\\x03`\\x03`\\x03\", \"`\\x03`\\x06`\\u051E\\n`\\r`\\x0E`\\u051F\\x03`\\x03`\\x06`\\u0524\", \"\\n`\\r`\\x0E`\\u0525\\x05`\\u0528\\n`\\x03a\\x06a\\u052B\\na\\ra\\x0E\", \"a\\u052C\\x03a\\x03a\\x06a\\u0531\\na\\ra\\x0Ea\\u0532\\x03a\\x03a\", \"\\x06a\\u0537\\na\\ra\\x0Ea\\u0538\\x03b\\x03b\\x03b\\x03b\\x03b\", \"\\x03b\\x03b\\x03b\\x03b\\x05b\\u0544\\nb\\x03c\\x03c\\x05c\\u0548\", \"\\nc\\x03c\\x03c\\x05c\\u054C\\nc\\x03c\\x03c\\x05c\\u0550\\nc\\x03\", \"d\\x03d\\x05d\\u0554\\nd\\x03d\\x07d\\u0557\\nd\\fd\\x0Ed\\u055A\\x0B\", \"d\\x03e\\x03e\\x03e\\x03e\\x03f\\x03f\\x05f\\u0562\\nf\\x03f\\x07\", \"f\\u0565\\nf\\ff\\x0Ef\\u0568\\x0Bf\\x03g\\x03g\\x03g\\x03g\\x03\", \"g\\x03g\\x03g\\x03g\\x03g\\x03g\\x03g\\x03g\\x03g\\x03g\\x03\", \"g\\x03g\\x03g\\x03g\\x03g\\x03g\\x03g\\x03g\\x03g\\x03g\\x03\", \"g\\x03g\\x03g\\x03g\\x03g\\x03g\\x03g\\x03g\\x03g\\x03g\\x03\", \"g\\x03g\\x03g\\x03g\\x03g\\x03g\\x03g\\x03g\\x03g\\x03g\\x03\", \"g\\x03g\\x03g\\x03g\\x03g\\x03g\\x03g\\x03g\\x05g\\u059E\\ng\\x03\", \"h\\x03h\\x03h\\x03h\\x03h\\x03h\\x07h\\u05A6\\nh\\fh\\x0Eh\\u05A9\", \"\\x0Bh\\x03h\\x03h\\x03h\\x07h\\u05AE\\nh\\fh\\x0Eh\\u05B1\\x0Bh\", \"\\x03h\\x05h\\u05B4\\nh\\x03i\\x03i\\x03i\\x03j\\x03j\\x03k\\x03\", \"k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03\", \"k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03\", \"k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03\", \"k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03\", \"k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03\", \"k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03\", \"k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03\", \"k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03\", \"k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x05k\\u0613\\nk\\x03l\\x03\", \"l\\x03l\\x03l\\x03l\\x03l\\x03l\\x03l\\x03l\\x03l\\x03m\\x03\", \"m\\x03m\\x03m\\x03m\\x03m\\x03n\\x03n\\x03n\\x03n\\x03n\\x03\", \"n\\x03n\\x03n\\x03n\\x03o\\x03o\\x03o\\x03o\\x03o\\x03o\\x03\", \"o\\x03o\\x03o\\x03p\\x03p\\x03p\\x03p\\x03p\\x03p\\x03p\\x03\", \"p\\x03p\\x03q\\x03q\\x03q\\x03q\\x03q\\x03q\\x03q\\x03q\\x03\", \"r\\x03r\\x03r\\x03r\\x03r\\x03r\\x03r\\x03r\\x03r\\x03s\\x03\", \"s\\x03s\\x03s\\x03s\\x03s\\x03s\\x03s\\x03t\\x03t\\x03t\\x03\", \"t\\x03t\\x03t\\x03t\\x03t\\x03u\\x03u\\x03u\\x03u\\x03u\\x03\", \"u\\x03u\\x03v\\x03v\\x03v\\x03v\\x03v\\x03w\\x03w\\x03w\\x03\", \"w\\x03w\\x03x\\x03x\\x03x\\x03x\\x03x\\x03y\\x03y\\x07y\\u0679\", \"\\ny\\fy\\x0Ey\\u067C\\x0By\\x03z\\x03z\\x03{\\x03{\\x03|\\x03\", \"|\\x07|\\u0684\\n|\\f|\\x0E|\\u0687\\x0B|\\x03|\\x03|\\x03|\\x07\", \"|\\u068C\\n|\\f|\\x0E|\\u068F\\x0B|\\x03|\\x05|\\u0692\\n|\\x03}\\x03\", \"}\\x03}\\x05}\\u0697\\n}\\x03~\\x03~\\x03~\\x05~\\u069C\\n~\\x03\", \"\\x7F\\x06\\x7F\\u069F\\n\\x7F\\r\\x7F\\x0E\\x7F\\u06A0\\x03\\x7F\", \"\\x03\\x7F\\x03\\x80\\x03\\x80\\x03\\x80\\x03\\x80\\x07\\x80\", \"\\u06A9\\n\\x80\\f\\x80\\x0E\\x80\\u06AC\\x0B\\x80\\x03\\x80\\x03\", \"\\x80\\x03\\x80\\x03\\x80\\x03\\x80\\x03\\x81\\x03\\x81\\x03\", \"\\x81\\x03\\x81\\x07\\x81\\u06B7\\n\\x81\\f\\x81\\x0E\\x81\\u06BA\", \"\\x0B\\x81\\x03\\x81\\x03\\x81\\x03\\u06AA\\x02\\x82\\x03\\x03\", \"\\x05\\x04\\x07\\x05\\t\\x06\\x0B\\x07\\r\\b\\x0F\\t\\x11\\n\\x13\", \"\\x0B\\x15\\f\\x17\\r\\x19\\x0E\\x1B\\x0F\\x1D\\x10\\x1F\\x11\", \"!\\x12#\\x13%\\x14'\\x15)\\x16+\\x17-\\x18/\\x191\\x1A3\\x1B\", \"5\\x1C7\\x1D9\\x1E;\\x1F= ?!A\\\"C#E$G%I&K'M(O)Q*S+U,W-Y.[/]0_1a\", \"2c3e4g5i6k7m8o9q:s;u<w=y>{?}@\\x7FA\\x81B\\x83C\\x85D\\x87E\\x89\", \"F\\x8BG\\x8DH\\x8FI\\x91J\\x93K\\x95L\\x97M\\x99N\\x9BO\\x9D\", \"P\\x9FQ\\xA1R\\xA3S\\xA5T\\xA7U\\xA9V\\xABW\\xADX\\xAFY\\xB1\", \"Z\\xB3[\\xB5\\\\\\xB7]\\xB9^\\xBB_\\xBD`\\xBFa\\xC1b\\xC3c\\xC5\", \"d\\xC7\\x02\\xC9e\\xCB\\x02\\xCDf\\xCFg\\xD1\\x02\\xD3\\x02\", \"\\xD5h\\xD7i\\xD9j\\xDBk\\xDDl\\xDFm\\xE1n\\xE3o\\xE5p\\xE7\", \"q\\xE9r\\xEBs\\xEDt\\xEFu\\xF1v\\xF3\\x02\\xF5\\x02\\xF7w\", \"\\xF9\\x02\\xFB\\x02\\xFDx\\xFFy\\u0101z\\x03\\x02\\f\\x03\\x02\", \"2;\\x04\\x02GGgg\\x04\\x02ZZzz\\x05\\x022;CHch\\x06\\x02&&C\", \"\\\\aac|\\x07\\x02&&2;C\\\\aac|\\x06\\x02\\f\\f\\x0F\\x0F$$^^\\x06\", \"\\x02\\f\\f\\x0F\\x0F))^^\\x05\\x02\\x0B\\f\\x0E\\x0F\\\"\\\"\\x04\", \"\\x02\\f\\f\\x0F\\x0F\\x02\\u074A\\x02\\x03\\x03\\x02\\x02\\x02\", \"\\x02\\x05\\x03\\x02\\x02\\x02\\x02\\x07\\x03\\x02\\x02\\x02\", \"\\x02\\t\\x03\\x02\\x02\\x02\\x02\\x0B\\x03\\x02\\x02\\x02\", \"\\x02\\r\\x03\\x02\\x02\\x02\\x02\\x0F\\x03\\x02\\x02\\x02\", \"\\x02\\x11\\x03\\x02\\x02\\x02\\x02\\x13\\x03\\x02\\x02\\x02\", \"\\x02\\x15\\x03\\x02\\x02\\x02\\x02\\x17\\x03\\x02\\x02\\x02\", \"\\x02\\x19\\x03\\x02\\x02\\x02\\x02\\x1B\\x03\\x02\\x02\\x02\", \"\\x02\\x1D\\x03\\x02\\x02\\x02\\x02\\x1F\\x03\\x02\\x02\\x02\", \"\\x02!\\x03\\x02\\x02\\x02\\x02#\\x03\\x02\\x02\\x02\\x02\", \"%\\x03\\x02\\x02\\x02\\x02'\\x03\\x02\\x02\\x02\\x02)\\x03\", \"\\x02\\x02\\x02\\x02+\\x03\\x02\\x02\\x02\\x02-\\x03\\x02\", \"\\x02\\x02\\x02/\\x03\\x02\\x02\\x02\\x021\\x03\\x02\\x02\", \"\\x02\\x023\\x03\\x02\\x02\\x02\\x025\\x03\\x02\\x02\\x02\", \"\\x027\\x03\\x02\\x02\\x02\\x029\\x03\\x02\\x02\\x02\\x02\", \";\\x03\\x02\\x02\\x02\\x02=\\x03\\x02\\x02\\x02\\x02?\\x03\", \"\\x02\\x02\\x02\\x02A\\x03\\x02\\x02\\x02\\x02C\\x03\\x02\", \"\\x02\\x02\\x02E\\x03\\x02\\x02\\x02\\x02G\\x03\\x02\\x02\", \"\\x02\\x02I\\x03\\x02\\x02\\x02\\x02K\\x03\\x02\\x02\\x02\", \"\\x02M\\x03\\x02\\x02\\x02\\x02O\\x03\\x02\\x02\\x02\\x02\", \"Q\\x03\\x02\\x02\\x02\\x02S\\x03\\x02\\x02\\x02\\x02U\\x03\", \"\\x02\\x02\\x02\\x02W\\x03\\x02\\x02\\x02\\x02Y\\x03\\x02\", \"\\x02\\x02\\x02[\\x03\\x02\\x02\\x02\\x02]\\x03\\x02\\x02\", \"\\x02\\x02_\\x03\\x02\\x02\\x02\\x02a\\x03\\x02\\x02\\x02\", \"\\x02c\\x03\\x02\\x02\\x02\\x02e\\x03\\x02\\x02\\x02\\x02\", \"g\\x03\\x02\\x02\\x02\\x02i\\x03\\x02\\x02\\x02\\x02k\\x03\", \"\\x02\\x02\\x02\\x02m\\x03\\x02\\x02\\x02\\x02o\\x03\\x02\", \"\\x02\\x02\\x02q\\x03\\x02\\x02\\x02\\x02s\\x03\\x02\\x02\", \"\\x02\\x02u\\x03\\x02\\x02\\x02\\x02w\\x03\\x02\\x02\\x02\", \"\\x02y\\x03\\x02\\x02\\x02\\x02{\\x03\\x02\\x02\\x02\\x02\", \"}\\x03\\x02\\x02\\x02\\x02\\x7F\\x03\\x02\\x02\\x02\\x02\", \"\\x81\\x03\\x02\\x02\\x02\\x02\\x83\\x03\\x02\\x02\\x02\\x02\", \"\\x85\\x03\\x02\\x02\\x02\\x02\\x87\\x03\\x02\\x02\\x02\\x02\", \"\\x89\\x03\\x02\\x02\\x02\\x02\\x8B\\x03\\x02\\x02\\x02\\x02\", \"\\x8D\\x03\\x02\\x02\\x02\\x02\\x8F\\x03\\x02\\x02\\x02\\x02\", \"\\x91\\x03\\x02\\x02\\x02\\x02\\x93\\x03\\x02\\x02\\x02\\x02\", \"\\x95\\x03\\x02\\x02\\x02\\x02\\x97\\x03\\x02\\x02\\x02\\x02\", \"\\x99\\x03\\x02\\x02\\x02\\x02\\x9B\\x03\\x02\\x02\\x02\\x02\", \"\\x9D\\x03\\x02\\x02\\x02\\x02\\x9F\\x03\\x02\\x02\\x02\\x02\", \"\\xA1\\x03\\x02\\x02\\x02\\x02\\xA3\\x03\\x02\\x02\\x02\\x02\", \"\\xA5\\x03\\x02\\x02\\x02\\x02\\xA7\\x03\\x02\\x02\\x02\\x02\", \"\\xA9\\x03\\x02\\x02\\x02\\x02\\xAB\\x03\\x02\\x02\\x02\\x02\", \"\\xAD\\x03\\x02\\x02\\x02\\x02\\xAF\\x03\\x02\\x02\\x02\\x02\", \"\\xB1\\x03\\x02\\x02\\x02\\x02\\xB3\\x03\\x02\\x02\\x02\\x02\", \"\\xB5\\x03\\x02\\x02\\x02\\x02\\xB7\\x03\\x02\\x02\\x02\\x02\", \"\\xB9\\x03\\x02\\x02\\x02\\x02\\xBB\\x03\\x02\\x02\\x02\\x02\", \"\\xBD\\x03\\x02\\x02\\x02\\x02\\xBF\\x03\\x02\\x02\\x02\\x02\", \"\\xC1\\x03\\x02\\x02\\x02\\x02\\xC3\\x03\\x02\\x02\\x02\\x02\", \"\\xC5\\x03\\x02\\x02\\x02\\x02\\xC9\\x03\\x02\\x02\\x02\\x02\", \"\\xCD\\x03\\x02\\x02\\x02\\x02\\xCF\\x03\\x02\\x02\\x02\\x02\", \"\\xD5\\x03\\x02\\x02\\x02\\x02\\xD7\\x03\\x02\\x02\\x02\\x02\", \"\\xD9\\x03\\x02\\x02\\x02\\x02\\xDB\\x03\\x02\\x02\\x02\\x02\", \"\\xDD\\x03\\x02\\x02\\x02\\x02\\xDF\\x03\\x02\\x02\\x02\\x02\", \"\\xE1\\x03\\x02\\x02\\x02\\x02\\xE3\\x03\\x02\\x02\\x02\\x02\", \"\\xE5\\x03\\x02\\x02\\x02\\x02\\xE7\\x03\\x02\\x02\\x02\\x02\", \"\\xE9\\x03\\x02\\x02\\x02\\x02\\xEB\\x03\\x02\\x02\\x02\\x02\", \"\\xED\\x03\\x02\\x02\\x02\\x02\\xEF\\x03\\x02\\x02\\x02\\x02\", \"\\xF1\\x03\\x02\\x02\\x02\\x02\\xF7\\x03\\x02\\x02\\x02\\x02\", \"\\xFD\\x03\\x02\\x02\\x02\\x02\\xFF\\x03\\x02\\x02\\x02\\x02\", \"\\u0101\\x03\\x02\\x02\\x02\\x03\\u0103\\x03\\x02\\x02\\x02\\x05\", \"\\u010A\\x03\\x02\\x02\\x02\\x07\\u010C\\x03\\x02\\x02\\x02\\t\", \"\\u010E\\x03\\x02\\x02\\x02\\x0B\\u0110\\x03\\x02\\x02\\x02\\r\", \"\\u0113\\x03\\x02\\x02\\x02\\x0F\\u0115\\x03\\x02\\x02\\x02\\x11\", \"\\u0117\\x03\\x02\\x02\\x02\\x13\\u011A\\x03\\x02\\x02\\x02\\x15\", \"\\u011C\\x03\\x02\\x02\\x02\\x17\\u011F\\x03\\x02\\x02\\x02\\x19\", \"\\u0126\\x03\\x02\\x02\\x02\\x1B\\u0128\\x03\\x02\\x02\\x02\\x1D\", \"\\u012D\\x03\\x02\\x02\\x02\\x1F\\u012F\\x03\\x02\\x02\\x02!\", \"\\u0131\\x03\\x02\\x02\\x02#\\u0133\\x03\\x02\\x02\\x02%\\u013C\", \"\\x03\\x02\\x02\\x02'\\u0146\\x03\\x02\\x02\\x02)\\u014E\\x03\", \"\\x02\\x02\\x02+\\u0151\\x03\\x02\\x02\\x02-\\u0153\\x03\\x02\", \"\\x02\\x02/\\u0155\\x03\\x02\\x02\\x021\\u015B\\x03\\x02\\x02\", \"\\x023\\u015F\\x03\\x02\\x02\\x025\\u0166\\x03\\x02\\x02\\x02\", \"7\\u0172\\x03\\x02\\x02\\x029\\u017B\\x03\\x02\\x02\\x02;\\u0184\", \"\\x03\\x02\\x02\\x02=\\u018C\\x03\\x02\\x02\\x02?\\u0192\\x03\", \"\\x02\\x02\\x02A\\u0197\\x03\\x02\\x02\\x02C\\u0199\\x03\\x02\", \"\\x02\\x02E\\u019B\\x03\\x02\\x02\\x02G\\u01A3\\x03\\x02\\x02\", \"\\x02I\\u01A5\\x03\\x02\\x02\\x02K\\u01AD\\x03\\x02\\x02\\x02\", \"M\\u01B0\\x03\\x02\\x02\\x02O\\u01B7\\x03\\x02\\x02\\x02Q\\u01BF\", \"\\x03\\x02\\x02\\x02S\\u01C8\\x03\\x02\\x02\\x02U\\u01CB\\x03\", \"\\x02\\x02\\x02W\\u01D0\\x03\\x02\\x02\\x02Y\\u01D6\\x03\\x02\", \"\\x02\\x02[\\u01DF\\x03\\x02\\x02\\x02]\\u01E2\\x03\\x02\\x02\", \"\\x02_\\u01E9\\x03\\x02\\x02\\x02a\\u01EF\\x03\\x02\\x02\\x02\", \"c\\u01F4\\x03\\x02\\x02\\x02e\\u01F8\\x03\\x02\\x02\\x02g\\u01FD\", \"\\x03\\x02\\x02\\x02i\\u0204\\x03\\x02\\x02\\x02k\\u0209\\x03\", \"\\x02\\x02\\x02m\\u020C\\x03\\x02\\x02\\x02o\\u020F\\x03\\x02\", \"\\x02\\x02q\\u0213\\x03\\x02\\x02\\x02s\\u0215\\x03\\x02\\x02\", \"\\x02u\\u0217\\x03\\x02\\x02\\x02w\\u021D\\x03\\x02\\x02\\x02\", \"y\\u0224\\x03\\x02\\x02\\x02{\\u0226\\x03\\x02\\x02\\x02}\\u0229\", \"\\x03\\x02\\x02\\x02\\x7F\\u022B\\x03\\x02\\x02\\x02\\x81\\u022D\", \"\\x03\\x02\\x02\\x02\\x83\\u0230\\x03\\x02\\x02\\x02\\x85\\u0233\", \"\\x03\\x02\\x02\\x02\\x87\\u0235\\x03\\x02\\x02\\x02\\x89\\u0237\", \"\\x03\\x02\\x02\\x02\\x8B\\u023A\\x03\\x02\\x02\\x02\\x8D\\u023D\", \"\\x03\\x02\\x02\\x02\\x8F\\u0240\\x03\\x02\\x02\\x02\\x91\\u0243\", \"\\x03\\x02\\x02\\x02\\x93\\u0245\\x03\\x02\\x02\\x02\\x95\\u0247\", \"\\x03\\x02\\x02\\x02\\x97\\u024A\\x03\\x02\\x02\\x02\\x99\\u024D\", \"\\x03\\x02\\x02\\x02\\x9B\\u0250\\x03\\x02\\x02\\x02\\x9D\\u0254\", \"\\x03\\x02\\x02\\x02\\x9F\\u0258\\x03\\x02\\x02\\x02\\xA1\\u025B\", \"\\x03\\x02\\x02\\x02\\xA3\\u025E\\x03\\x02\\x02\\x02\\xA5\\u0261\", \"\\x03\\x02\\x02\\x02\\xA7\\u0264\\x03\\x02\\x02\\x02\\xA9\\u0267\", \"\\x03\\x02\\x02\\x02\\xAB\\u026B\\x03\\x02\\x02\\x02\\xAD\\u026E\", \"\\x03\\x02\\x02\\x02\\xAF\\u0271\\x03\\x02\\x02\\x02\\xB1\\u0278\", \"\\x03\\x02\\x02\\x02\\xB3\\u027D\\x03\\x02\\x02\\x02\\xB5\\u0285\", \"\\x03\\x02\\x02\\x02\\xB7\\u033E\\x03\\x02\\x02\\x02\\xB9\\u0417\", \"\\x03\\x02\\x02\\x02\\xBB\\u04F5\\x03\\x02\\x02\\x02\\xBD\\u050D\", \"\\x03\\x02\\x02\\x02\\xBF\\u0527\\x03\\x02\\x02\\x02\\xC1\\u052A\", \"\\x03\\x02\\x02\\x02\\xC3\\u0543\\x03\\x02\\x02\\x02\\xC5\\u054B\", \"\\x03\\x02\\x02\\x02\\xC7\\u0551\\x03\\x02\\x02\\x02\\xC9\\u055B\", \"\\x03\\x02\\x02\\x02\\xCB\\u055F\\x03\\x02\\x02\\x02\\xCD\\u059D\", \"\\x03\\x02\\x02\\x02\\xCF\\u059F\\x03\\x02\\x02\\x02\\xD1\\u05B5\", \"\\x03\\x02\\x02\\x02\\xD3\\u05B8\\x03\\x02\\x02\\x02\\xD5\\u0612\", \"\\x03\\x02\\x02\\x02\\xD7\\u0614\\x03\\x02\\x02\\x02\\xD9\\u061E\", \"\\x03\\x02\\x02\\x02\\xDB\\u0624\\x03\\x02\\x02\\x02\\xDD\\u062D\", \"\\x03\\x02\\x02\\x02\\xDF\\u0636\\x03\\x02\\x02\\x02\\xE1\\u063F\", \"\\x03\\x02\\x02\\x02\\xE3\\u0647\\x03\\x02\\x02\\x02\\xE5\\u0650\", \"\\x03\\x02\\x02\\x02\\xE7\\u0658\\x03\\x02\\x02\\x02\\xE9\\u0660\", \"\\x03\\x02\\x02\\x02\\xEB\\u0667\\x03\\x02\\x02\\x02\\xED\\u066C\", \"\\x03\\x02\\x02\\x02\\xEF\\u0671\\x03\\x02\\x02\\x02\\xF1\\u0676\", \"\\x03\\x02\\x02\\x02\\xF3\\u067D\\x03\\x02\\x02\\x02\\xF5\\u067F\", \"\\x03\\x02\\x02\\x02\\xF7\\u0691\\x03\\x02\\x02\\x02\\xF9\\u0696\", \"\\x03\\x02\\x02\\x02\\xFB\\u069B\\x03\\x02\\x02\\x02\\xFD\\u069E\", \"\\x03\\x02\\x02\\x02\\xFF\\u06A4\\x03\\x02\\x02\\x02\\u0101\\u06B2\", \"\\x03\\x02\\x02\\x02\\u0103\\u0104\\x07r\\x02\\x02\\u0104\\u0105\", \"\\x07t\\x02\\x02\\u0105\\u0106\\x07c\\x02\\x02\\u0106\\u0107\\x07\", \"i\\x02\\x02\\u0107\\u0108\\x07o\\x02\\x02\\u0108\\u0109\\x07c\\x02\", \"\\x02\\u0109\\x04\\x03\\x02\\x02\\x02\\u010A\\u010B\\x07=\\x02\", \"\\x02\\u010B\\x06\\x03\\x02\\x02\\x02\\u010C\\u010D\\x07`\\x02\", \"\\x02\\u010D\\b\\x03\\x02\\x02\\x02\\u010E\\u010F\\x07\\x80\\x02\", \"\\x02\\u010F\\n\\x03\\x02\\x02\\x02\\u0110\\u0111\\x07@\\x02\\x02\", \"\\u0111\\u0112\\x07?\\x02\\x02\\u0112\\f\\x03\\x02\\x02\\x02\\u0113\", \"\\u0114\\x07@\\x02\\x02\\u0114\\x0E\\x03\\x02\\x02\\x02\\u0115\", \"\\u0116\\x07>\\x02\\x02\\u0116\\x10\\x03\\x02\\x02\\x02\\u0117\", \"\\u0118\\x07>\\x02\\x02\\u0118\\u0119\\x07?\\x02\\x02\\u0119\\x12\", \"\\x03\\x02\\x02\\x02\\u011A\\u011B\\x07?\\x02\\x02\\u011B\\x14\", \"\\x03\\x02\\x02\\x02\\u011C\\u011D\\x07c\\x02\\x02\\u011D\\u011E\", \"\\x07u\\x02\\x02\\u011E\\x16\\x03\\x02\\x02\\x02\\u011F\\u0120\", \"\\x07k\\x02\\x02\\u0120\\u0121\\x07o\\x02\\x02\\u0121\\u0122\\x07\", \"r\\x02\\x02\\u0122\\u0123\\x07q\\x02\\x02\\u0123\\u0124\\x07t\\x02\", \"\\x02\\u0124\\u0125\\x07v\\x02\\x02\\u0125\\x18\\x03\\x02\\x02\", \"\\x02\\u0126\\u0127\\x07,\\x02\\x02\\u0127\\x1A\\x03\\x02\\x02\", \"\\x02\\u0128\\u0129\\x07h\\x02\\x02\\u0129\\u012A\\x07t\\x02\\x02\", \"\\u012A\\u012B\\x07q\\x02\\x02\\u012B\\u012C\\x07o\\x02\\x02\\u012C\", \"\\x1C\\x03\\x02\\x02\\x02\\u012D\\u012E\\x07}\\x02\\x02\\u012E\", \"\\x1E\\x03\\x02\\x02\\x02\\u012F\\u0130\\x07.\\x02\\x02\\u0130\", \" \\x03\\x02\\x02\\x02\\u0131\\u0132\\x07\\x7F\\x02\\x02\\u0132\", \"\\\"\\x03\\x02\\x02\\x02\\u0133\\u0134\\x07e\\x02\\x02\\u0134\\u0135\", \"\\x07q\\x02\\x02\\u0135\\u0136\\x07p\\x02\\x02\\u0136\\u0137\\x07\", \"v\\x02\\x02\\u0137\\u0138\\x07t\\x02\\x02\\u0138\\u0139\\x07c\\x02\", \"\\x02\\u0139\\u013A\\x07e\\x02\\x02\\u013A\\u013B\\x07v\\x02\\x02\", \"\\u013B$\\x03\\x02\\x02\\x02\\u013C\\u013D\\x07k\\x02\\x02\\u013D\", \"\\u013E\\x07p\\x02\\x02\\u013E\\u013F\\x07v\\x02\\x02\\u013F\\u0140\", \"\\x07g\\x02\\x02\\u0140\\u0141\\x07t\\x02\\x02\\u0141\\u0142\\x07\", \"h\\x02\\x02\\u0142\\u0143\\x07c\\x02\\x02\\u0143\\u0144\\x07e\\x02\", \"\\x02\\u0144\\u0145\\x07g\\x02\\x02\\u0145&\\x03\\x02\\x02\\x02\", \"\\u0146\\u0147\\x07n\\x02\\x02\\u0147\\u0148\\x07k\\x02\\x02\\u0148\", \"\\u0149\\x07d\\x02\\x02\\u0149\\u014A\\x07t\\x02\\x02\\u014A\\u014B\", \"\\x07c\\x02\\x02\\u014B\\u014C\\x07t\\x02\\x02\\u014C\\u014D\\x07\", \"{\\x02\\x02\\u014D(\\x03\\x02\\x02\\x02\\u014E\\u014F\\x07k\\x02\", \"\\x02\\u014F\\u0150\\x07u\\x02\\x02\\u0150*\\x03\\x02\\x02\\x02\", \"\\u0151\\u0152\\x07*\\x02\\x02\\u0152,\\x03\\x02\\x02\\x02\\u0153\", \"\\u0154\\x07+\\x02\\x02\\u0154.\\x03\\x02\\x02\\x02\\u0155\\u0156\", \"\\x07w\\x02\\x02\\u0156\\u0157\\x07u\\x02\\x02\\u0157\\u0158\\x07\", \"k\\x02\\x02\\u0158\\u0159\\x07p\\x02\\x02\\u0159\\u015A\\x07i\\x02\", \"\\x02\\u015A0\\x03\\x02\\x02\\x02\\u015B\\u015C\\x07h\\x02\\x02\", \"\\u015C\\u015D\\x07q\\x02\\x02\\u015D\\u015E\\x07t\\x02\\x02\\u015E\", \"2\\x03\\x02\\x02\\x02\\u015F\\u0160\\x07u\\x02\\x02\\u0160\\u0161\", \"\\x07v\\x02\\x02\\u0161\\u0162\\x07t\\x02\\x02\\u0162\\u0163\\x07\", \"w\\x02\\x02\\u0163\\u0164\\x07e\\x02\\x02\\u0164\\u0165\\x07v\\x02\", \"\\x02\\u01654\\x03\\x02\\x02\\x02\\u0166\\u0167\\x07e\\x02\\x02\", \"\\u0167\\u0168\\x07q\\x02\\x02\\u0168\\u0169\\x07p\\x02\\x02\\u0169\", \"\\u016A\\x07u\\x02\\x02\\u016A\\u016B\\x07v\\x02\\x02\\u016B\\u016C\", \"\\x07t\\x02\\x02\\u016C\\u016D\\x07w\\x02\\x02\\u016D\\u016E\\x07\", \"e\\x02\\x02\\u016E\\u016F\\x07v\\x02\\x02\\u016F\\u0170\\x07q\\x02\", \"\\x02\\u0170\\u0171\\x07t\\x02\\x02\\u01716\\x03\\x02\\x02\\x02\", \"\\u0172\\u0173\\x07o\\x02\\x02\\u0173\\u0174\\x07q\\x02\\x02\\u0174\", \"\\u0175\\x07f\\x02\\x02\\u0175\\u0176\\x07k\\x02\\x02\\u0176\\u0177\", \"\\x07h\\x02\\x02\\u0177\\u0178\\x07k\\x02\\x02\\u0178\\u0179\\x07\", \"g\\x02\\x02\\u0179\\u017A\\x07t\\x02\\x02\\u017A8\\x03\\x02\\x02\", \"\\x02\\u017B\\u017C\\x07h\\x02\\x02\\u017C\\u017D\\x07w\\x02\\x02\", \"\\u017D\\u017E\\x07p\\x02\\x02\\u017E\\u017F\\x07e\\x02\\x02\\u017F\", \"\\u0180\\x07v\\x02\\x02\\u0180\\u0181\\x07k\\x02\\x02\\u0181\\u0182\", \"\\x07q\\x02\\x02\\u0182\\u0183\\x07p\\x02\\x02\\u0183:\\x03\\x02\", \"\\x02\\x02\\u0184\\u0185\\x07t\\x02\\x02\\u0185\\u0186\\x07g\\x02\", \"\\x02\\u0186\\u0187\\x07v\\x02\\x02\\u0187\\u0188\\x07w\\x02\\x02\", \"\\u0188\\u0189\\x07t\\x02\\x02\\u0189\\u018A\\x07p\\x02\\x02\\u018A\", \"\\u018B\\x07u\\x02\\x02\\u018B<\\x03\\x02\\x02\\x02\\u018C\\u018D\", \"\\x07g\\x02\\x02\\u018D\\u018E\\x07x\\x02\\x02\\u018E\\u018F\\x07\", \"g\\x02\\x02\\u018F\\u0190\\x07p\\x02\\x02\\u0190\\u0191\\x07v\\x02\", \"\\x02\\u0191>\\x03\\x02\\x02\\x02\\u0192\\u0193\\x07g\\x02\\x02\", \"\\u0193\\u0194\\x07p\\x02\\x02\\u0194\\u0195\\x07w\\x02\\x02\\u0195\", \"\\u0196\\x07o\\x02\\x02\\u0196@\\x03\\x02\\x02\\x02\\u0197\\u0198\", \"\\x07]\\x02\\x02\\u0198B\\x03\\x02\\x02\\x02\\u0199\\u019A\\x07\", \"_\\x02\\x02\\u019AD\\x03\\x02\\x02\\x02\\u019B\\u019C\\x07c\\x02\", \"\\x02\\u019C\\u019D\\x07f\\x02\\x02\\u019D\\u019E\\x07f\\x02\\x02\", \"\\u019E\\u019F\\x07t\\x02\\x02\\u019F\\u01A0\\x07g\\x02\\x02\\u01A0\", \"\\u01A1\\x07u\\x02\\x02\\u01A1\\u01A2\\x07u\\x02\\x02\\u01A2F\\x03\", \"\\x02\\x02\\x02\\u01A3\\u01A4\\x070\\x02\\x02\\u01A4H\\x03\\x02\", \"\\x02\\x02\\u01A5\\u01A6\\x07o\\x02\\x02\\u01A6\\u01A7\\x07c\\x02\", \"\\x02\\u01A7\\u01A8\\x07r\\x02\\x02\\u01A8\\u01A9\\x07r\\x02\\x02\", \"\\u01A9\\u01AA\\x07k\\x02\\x02\\u01AA\\u01AB\\x07p\\x02\\x02\\u01AB\", \"\\u01AC\\x07i\\x02\\x02\\u01ACJ\\x03\\x02\\x02\\x02\\u01AD\\u01AE\", \"\\x07?\\x02\\x02\\u01AE\\u01AF\\x07@\\x02\\x02\\u01AFL\\x03\\x02\", \"\\x02\\x02\\u01B0\\u01B1\\x07o\\x02\\x02\\u01B1\\u01B2\\x07g\\x02\", \"\\x02\\u01B2\\u01B3\\x07o\\x02\\x02\\u01B3\\u01B4\\x07q\\x02\\x02\", \"\\u01B4\\u01B5\\x07t\\x02\\x02\\u01B5\\u01B6\\x07{\\x02\\x02\\u01B6\", \"N\\x03\\x02\\x02\\x02\\u01B7\\u01B8\\x07u\\x02\\x02\\u01B8\\u01B9\", \"\\x07v\\x02\\x02\\u01B9\\u01BA\\x07q\\x02\\x02\\u01BA\\u01BB\\x07\", \"t\\x02\\x02\\u01BB\\u01BC\\x07c\\x02\\x02\\u01BC\\u01BD\\x07i\\x02\", \"\\x02\\u01BD\\u01BE\\x07g\\x02\\x02\\u01BEP\\x03\\x02\\x02\\x02\", \"\\u01BF\\u01C0\\x07e\\x02\\x02\\u01C0\\u01C1\\x07c\\x02\\x02\\u01C1\", \"\\u01C2\\x07n\\x02\\x02\\u01C2\\u01C3\\x07n\\x02\\x02\\u01C3\\u01C4\", \"\\x07f\\x02\\x02\\u01C4\\u01C5\\x07c\\x02\\x02\\u01C5\\u01C6\\x07\", \"v\\x02\\x02\\u01C6\\u01C7\\x07c\\x02\\x02\\u01C7R\\x03\\x02\\x02\", \"\\x02\\u01C8\\u01C9\\x07k\\x02\\x02\\u01C9\\u01CA\\x07h\\x02\\x02\", \"\\u01CAT\\x03\\x02\\x02\\x02\\u01CB\\u01CC\\x07g\\x02\\x02\\u01CC\", \"\\u01CD\\x07n\\x02\\x02\\u01CD\\u01CE\\x07u\\x02\\x02\\u01CE\\u01CF\", \"\\x07g\\x02\\x02\\u01CFV\\x03\\x02\\x02\\x02\\u01D0\\u01D1\\x07\", \"y\\x02\\x02\\u01D1\\u01D2\\x07j\\x02\\x02\\u01D2\\u01D3\\x07k\\x02\", \"\\x02\\u01D3\\u01D4\\x07n\\x02\\x02\\u01D4\\u01D5\\x07g\\x02\\x02\", \"\\u01D5X\\x03\\x02\\x02\\x02\\u01D6\\u01D7\\x07c\\x02\\x02\\u01D7\", \"\\u01D8\\x07u\\x02\\x02\\u01D8\\u01D9\\x07u\\x02\\x02\\u01D9\\u01DA\", \"\\x07g\\x02\\x02\\u01DA\\u01DB\\x07o\\x02\\x02\\u01DB\\u01DC\\x07\", \"d\\x02\\x02\\u01DC\\u01DD\\x07n\\x02\\x02\\u01DD\\u01DE\\x07{\\x02\", \"\\x02\\u01DEZ\\x03\\x02\\x02\\x02\\u01DF\\u01E0\\x07f\\x02\\x02\", \"\\u01E0\\u01E1\\x07q\\x02\\x02\\u01E1\\\\\\x03\\x02\\x02\\x02\\u01E2\", \"\\u01E3\\x07t\\x02\\x02\\u01E3\\u01E4\\x07g\\x02\\x02\\u01E4\\u01E5\", \"\\x07v\\x02\\x02\\u01E5\\u01E6\\x07w\\x02\\x02\\u01E6\\u01E7\\x07\", \"t\\x02\\x02\\u01E7\\u01E8\\x07p\\x02\\x02\\u01E8^\\x03\\x02\\x02\", \"\\x02\\u01E9\\u01EA\\x07v\\x02\\x02\\u01EA\\u01EB\\x07j\\x02\\x02\", \"\\u01EB\\u01EC\\x07t\\x02\\x02\\u01EC\\u01ED\\x07q\\x02\\x02\\u01ED\", \"\\u01EE\\x07y\\x02\\x02\\u01EE`\\x03\\x02\\x02\\x02\\u01EF\\u01F0\", \"\\x07g\\x02\\x02\\u01F0\\u01F1\\x07o\\x02\\x02\\u01F1\\u01F2\\x07\", \"k\\x02\\x02\\u01F2\\u01F3\\x07v\\x02\\x02\\u01F3b\\x03\\x02\\x02\", \"\\x02\\u01F4\\u01F5\\x07x\\x02\\x02\\u01F5\\u01F6\\x07c\\x02\\x02\", \"\\u01F6\\u01F7\\x07t\\x02\\x02\\u01F7d\\x03\\x02\\x02\\x02\\u01F8\", \"\\u01F9\\x07d\\x02\\x02\\u01F9\\u01FA\\x07q\\x02\\x02\\u01FA\\u01FB\", \"\\x07q\\x02\\x02\\u01FB\\u01FC\\x07n\\x02\\x02\\u01FCf\\x03\\x02\", \"\\x02\\x02\\u01FD\\u01FE\\x07u\\x02\\x02\\u01FE\\u01FF\\x07v\\x02\", \"\\x02\\u01FF\\u0200\\x07t\\x02\\x02\\u0200\\u0201\\x07k\\x02\\x02\", \"\\u0201\\u0202\\x07p\\x02\\x02\\u0202\\u0203\\x07i\\x02\\x02\\u0203\", \"h\\x03\\x02\\x02\\x02\\u0204\\u0205\\x07d\\x02\\x02\\u0205\\u0206\", \"\\x07{\\x02\\x02\\u0206\\u0207\\x07v\\x02\\x02\\u0207\\u0208\\x07\", \"g\\x02\\x02\\u0208j\\x03\\x02\\x02\\x02\\u0209\\u020A\\x07-\\x02\", \"\\x02\\u020A\\u020B\\x07-\\x02\\x02\\u020Bl\\x03\\x02\\x02\\x02\", \"\\u020C\\u020D\\x07/\\x02\\x02\\u020D\\u020E\\x07/\\x02\\x02\\u020E\", \"n\\x03\\x02\\x02\\x02\\u020F\\u0210\\x07p\\x02\\x02\\u0210\\u0211\", \"\\x07g\\x02\\x02\\u0211\\u0212\\x07y\\x02\\x02\\u0212p\\x03\\x02\", \"\\x02\\x02\\u0213\\u0214\\x07-\\x02\\x02\\u0214r\\x03\\x02\\x02\", \"\\x02\\u0215\\u0216\\x07/\\x02\\x02\\u0216t\\x03\\x02\\x02\\x02\", \"\\u0217\\u0218\\x07c\\x02\\x02\\u0218\\u0219\\x07h\\x02\\x02\\u0219\", \"\\u021A\\x07v\\x02\\x02\\u021A\\u021B\\x07g\\x02\\x02\\u021B\\u021C\", \"\\x07t\\x02\\x02\\u021Cv\\x03\\x02\\x02\\x02\\u021D\\u021E\\x07\", \"f\\x02\\x02\\u021E\\u021F\\x07g\\x02\\x02\\u021F\\u0220\\x07n\\x02\", \"\\x02\\u0220\\u0221\\x07g\\x02\\x02\\u0221\\u0222\\x07v\\x02\\x02\", \"\\u0222\\u0223\\x07g\\x02\\x02\\u0223x\\x03\\x02\\x02\\x02\\u0224\", \"\\u0225\\x07#\\x02\\x02\\u0225z\\x03\\x02\\x02\\x02\\u0226\\u0227\", \"\\x07,\\x02\\x02\\u0227\\u0228\\x07,\\x02\\x02\\u0228|\\x03\\x02\", \"\\x02\\x02\\u0229\\u022A\\x071\\x02\\x02\\u022A~\\x03\\x02\\x02\", \"\\x02\\u022B\\u022C\\x07'\\x02\\x02\\u022C\\x80\\x03\\x02\\x02\", \"\\x02\\u022D\\u022E\\x07>\\x02\\x02\\u022E\\u022F\\x07>\\x02\\x02\", \"\\u022F\\x82\\x03\\x02\\x02\\x02\\u0230\\u0231\\x07@\\x02\\x02\", \"\\u0231\\u0232\\x07@\\x02\\x02\\u0232\\x84\\x03\\x02\\x02\\x02\", \"\\u0233\\u0234\\x07(\\x02\\x02\\u0234\\x86\\x03\\x02\\x02\\x02\", \"\\u0235\\u0236\\x07~\\x02\\x02\\u0236\\x88\\x03\\x02\\x02\\x02\", \"\\u0237\\u0238\\x07?\\x02\\x02\\u0238\\u0239\\x07?\\x02\\x02\\u0239\", \"\\x8A\\x03\\x02\\x02\\x02\\u023A\\u023B\\x07#\\x02\\x02\\u023B\", \"\\u023C\\x07?\\x02\\x02\\u023C\\x8C\\x03\\x02\\x02\\x02\\u023D\", \"\\u023E\\x07(\\x02\\x02\\u023E\\u023F\\x07(\\x02\\x02\\u023F\\x8E\", \"\\x03\\x02\\x02\\x02\\u0240\\u0241\\x07~\\x02\\x02\\u0241\\u0242\", \"\\x07~\\x02\\x02\\u0242\\x90\\x03\\x02\\x02\\x02\\u0243\\u0244\", \"\\x07A\\x02\\x02\\u0244\\x92\\x03\\x02\\x02\\x02\\u0245\\u0246\", \"\\x07<\\x02\\x02\\u0246\\x94\\x03\\x02\\x02\\x02\\u0247\\u0248\", \"\\x07~\\x02\\x02\\u0248\\u0249\\x07?\\x02\\x02\\u0249\\x96\\x03\", \"\\x02\\x02\\x02\\u024A\\u024B\\x07`\\x02\\x02\\u024B\\u024C\\x07\", \"?\\x02\\x02\\u024C\\x98\\x03\\x02\\x02\\x02\\u024D\\u024E\\x07\", \"(\\x02\\x02\\u024E\\u024F\\x07?\\x02\\x02\\u024F\\x9A\\x03\\x02\", \"\\x02\\x02\\u0250\\u0251\\x07>\\x02\\x02\\u0251\\u0252\\x07>\\x02\", \"\\x02\\u0252\\u0253\\x07?\\x02\\x02\\u0253\\x9C\\x03\\x02\\x02\", \"\\x02\\u0254\\u0255\\x07@\\x02\\x02\\u0255\\u0256\\x07@\\x02\\x02\", \"\\u0256\\u0257\\x07?\\x02\\x02\\u0257\\x9E\\x03\\x02\\x02\\x02\", \"\\u0258\\u0259\\x07-\\x02\\x02\\u0259\\u025A\\x07?\\x02\\x02\\u025A\", \"\\xA0\\x03\\x02\\x02\\x02\\u025B\\u025C\\x07/\\x02\\x02\\u025C\", \"\\u025D\\x07?\\x02\\x02\\u025D\\xA2\\x03\\x02\\x02\\x02\\u025E\", \"\\u025F\\x07,\\x02\\x02\\u025F\\u0260\\x07?\\x02\\x02\\u0260\\xA4\", \"\\x03\\x02\\x02\\x02\\u0261\\u0262\\x071\\x02\\x02\\u0262\\u0263\", \"\\x07?\\x02\\x02\\u0263\\xA6\\x03\\x02\\x02\\x02\\u0264\\u0265\", \"\\x07'\\x02\\x02\\u0265\\u0266\\x07?\\x02\\x02\\u0266\\xA8\\x03\", \"\\x02\\x02\\x02\\u0267\\u0268\\x07n\\x02\\x02\\u0268\\u0269\\x07\", \"g\\x02\\x02\\u0269\\u026A\\x07v\\x02\\x02\\u026A\\xAA\\x03\\x02\", \"\\x02\\x02\\u026B\\u026C\\x07<\\x02\\x02\\u026C\\u026D\\x07?\\x02\", \"\\x02\\u026D\\xAC\\x03\\x02\\x02\\x02\\u026E\\u026F\\x07?\\x02\", \"\\x02\\u026F\\u0270\\x07<\\x02\\x02\\u0270\\xAE\\x03\\x02\\x02\", \"\\x02\\u0271\\u0272\\x07u\\x02\\x02\\u0272\\u0273\\x07y\\x02\\x02\", \"\\u0273\\u0274\\x07k\\x02\\x02\\u0274\\u0275\\x07v\\x02\\x02\\u0275\", \"\\u0276\\x07e\\x02\\x02\\u0276\\u0277\\x07j\\x02\\x02\\u0277\\xB0\", \"\\x03\\x02\\x02\\x02\\u0278\\u0279\\x07e\\x02\\x02\\u0279\\u027A\", \"\\x07c\\x02\\x02\\u027A\\u027B\\x07u\\x02\\x02\\u027B\\u027C\\x07\", \"g\\x02\\x02\\u027C\\xB2\\x03\\x02\\x02\\x02\\u027D\\u027E\\x07\", \"f\\x02\\x02\\u027E\\u027F\\x07g\\x02\\x02\\u027F\\u0280\\x07h\\x02\", \"\\x02\\u0280\\u0281\\x07c\\x02\\x02\\u0281\\u0282\\x07w\\x02\\x02\", \"\\u0282\\u0283\\x07n\\x02\\x02\\u0283\\u0284\\x07v\\x02\\x02\\u0284\", \"\\xB4\\x03\\x02\\x02\\x02\\u0285\\u0286\\x07/\\x02\\x02\\u0286\", \"\\u0287\\x07@\\x02\\x02\\u0287\\xB6\\x03\\x02\\x02\\x02\\u0288\", \"\\u0289\\x07k\\x02\\x02\\u0289\\u028A\\x07p\\x02\\x02\\u028A\\u033F\", \"\\x07v\\x02\\x02\\u028B\\u028C\\x07k\\x02\\x02\\u028C\\u028D\\x07\", \"p\\x02\\x02\\u028D\\u028E\\x07v\\x02\\x02\\u028E\\u033F\\x07:\\x02\", \"\\x02\\u028F\\u0290\\x07k\\x02\\x02\\u0290\\u0291\\x07p\\x02\\x02\", \"\\u0291\\u0292\\x07v\\x02\\x02\\u0292\\u0293\\x073\\x02\\x02\\u0293\", \"\\u033F\\x078\\x02\\x02\\u0294\\u0295\\x07k\\x02\\x02\\u0295\\u0296\", \"\\x07p\\x02\\x02\\u0296\\u0297\\x07v\\x02\\x02\\u0297\\u0298\\x07\", \"4\\x02\\x02\\u0298\\u033F\\x076\\x02\\x02\\u0299\\u029A\\x07k\\x02\", \"\\x02\\u029A\\u029B\\x07p\\x02\\x02\\u029B\\u029C\\x07v\\x02\\x02\", \"\\u029C\\u029D\\x075\\x02\\x02\\u029D\\u033F\\x074\\x02\\x02\\u029E\", \"\\u029F\\x07k\\x02\\x02\\u029F\\u02A0\\x07p\\x02\\x02\\u02A0\\u02A1\", \"\\x07v\\x02\\x02\\u02A1\\u02A2\\x076\\x02\\x02\\u02A2\\u033F\\x07\", \"2\\x02\\x02\\u02A3\\u02A4\\x07k\\x02\\x02\\u02A4\\u02A5\\x07p\\x02\", \"\\x02\\u02A5\\u02A6\\x07v\\x02\\x02\\u02A6\\u02A7\\x076\\x02\\x02\", \"\\u02A7\\u033F\\x07:\\x02\\x02\\u02A8\\u02A9\\x07k\\x02\\x02\\u02A9\", \"\\u02AA\\x07p\\x02\\x02\\u02AA\\u02AB\\x07v\\x02\\x02\\u02AB\\u02AC\", \"\\x077\\x02\\x02\\u02AC\\u033F\\x078\\x02\\x02\\u02AD\\u02AE\\x07\", \"k\\x02\\x02\\u02AE\\u02AF\\x07p\\x02\\x02\\u02AF\\u02B0\\x07v\\x02\", \"\\x02\\u02B0\\u02B1\\x078\\x02\\x02\\u02B1\\u033F\\x076\\x02\\x02\", \"\\u02B2\\u02B3\\x07k\\x02\\x02\\u02B3\\u02B4\\x07p\\x02\\x02\\u02B4\", \"\\u02B5\\x07v\\x02\\x02\\u02B5\\u02B6\\x079\\x02\\x02\\u02B6\\u033F\", \"\\x074\\x02\\x02\\u02B7\\u02B8\\x07k\\x02\\x02\\u02B8\\u02B9\\x07\", \"p\\x02\\x02\\u02B9\\u02BA\\x07v\\x02\\x02\\u02BA\\u02BB\\x07:\\x02\", \"\\x02\\u02BB\\u033F\\x072\\x02\\x02\\u02BC\\u02BD\\x07k\\x02\\x02\", \"\\u02BD\\u02BE\\x07p\\x02\\x02\\u02BE\\u02BF\\x07v\\x02\\x02\\u02BF\", \"\\u02C0\\x07:\\x02\\x02\\u02C0\\u033F\\x07:\\x02\\x02\\u02C1\\u02C2\", \"\\x07k\\x02\\x02\\u02C2\\u02C3\\x07p\\x02\\x02\\u02C3\\u02C4\\x07\", \"v\\x02\\x02\\u02C4\\u02C5\\x07;\\x02\\x02\\u02C5\\u033F\\x078\\x02\", \"\\x02\\u02C6\\u02C7\\x07k\\x02\\x02\\u02C7\\u02C8\\x07p\\x02\\x02\", \"\\u02C8\\u02C9\\x07v\\x02\\x02\\u02C9\\u02CA\\x073\\x02\\x02\\u02CA\", \"\\u02CB\\x072\\x02\\x02\\u02CB\\u033F\\x076\\x02\\x02\\u02CC\\u02CD\", \"\\x07k\\x02\\x02\\u02CD\\u02CE\\x07p\\x02\\x02\\u02CE\\u02CF\\x07\", \"v\\x02\\x02\\u02CF\\u02D0\\x073\\x02\\x02\\u02D0\\u02D1\\x073\\x02\", \"\\x02\\u02D1\\u033F\\x074\\x02\\x02\\u02D2\\u02D3\\x07k\\x02\\x02\", \"\\u02D3\\u02D4\\x07p\\x02\\x02\\u02D4\\u02D5\\x07v\\x02\\x02\\u02D5\", \"\\u02D6\\x073\\x02\\x02\\u02D6\\u02D7\\x074\\x02\\x02\\u02D7\\u033F\", \"\\x072\\x02\\x02\\u02D8\\u02D9\\x07k\\x02\\x02\\u02D9\\u02DA\\x07\", \"p\\x02\\x02\\u02DA\\u02DB\\x07v\\x02\\x02\\u02DB\\u02DC\\x073\\x02\", \"\\x02\\u02DC\\u02DD\\x074\\x02\\x02\\u02DD\\u033F\\x07:\\x02\\x02\", \"\\u02DE\\u02DF\\x07k\\x02\\x02\\u02DF\\u02E0\\x07p\\x02\\x02\\u02E0\", \"\\u02E1\\x07v\\x02\\x02\\u02E1\\u02E2\\x073\\x02\\x02\\u02E2\\u02E3\", \"\\x075\\x02\\x02\\u02E3\\u033F\\x078\\x02\\x02\\u02E4\\u02E5\\x07\", \"k\\x02\\x02\\u02E5\\u02E6\\x07p\\x02\\x02\\u02E6\\u02E7\\x07v\\x02\", \"\\x02\\u02E7\\u02E8\\x073\\x02\\x02\\u02E8\\u02E9\\x076\\x02\\x02\", \"\\u02E9\\u033F\\x076\\x02\\x02\\u02EA\\u02EB\\x07k\\x02\\x02\\u02EB\", \"\\u02EC\\x07p\\x02\\x02\\u02EC\\u02ED\\x07v\\x02\\x02\\u02ED\\u02EE\", \"\\x073\\x02\\x02\\u02EE\\u02EF\\x077\\x02\\x02\\u02EF\\u033F\\x07\", \"4\\x02\\x02\\u02F0\\u02F1\\x07k\\x02\\x02\\u02F1\\u02F2\\x07p\\x02\", \"\\x02\\u02F2\\u02F3\\x07v\\x02\\x02\\u02F3\\u02F4\\x073\\x02\\x02\", \"\\u02F4\\u02F5\\x078\\x02\\x02\\u02F5\\u033F\\x072\\x02\\x02\\u02F6\", \"\\u02F7\\x07k\\x02\\x02\\u02F7\\u02F8\\x07p\\x02\\x02\\u02F8\\u02F9\", \"\\x07v\\x02\\x02\\u02F9\\u02FA\\x073\\x02\\x02\\u02FA\\u02FB\\x07\", \"8\\x02\\x02\\u02FB\\u033F\\x07:\\x02\\x02\\u02FC\\u02FD\\x07k\\x02\", \"\\x02\\u02FD\\u02FE\\x07p\\x02\\x02\\u02FE\\u02FF\\x07v\\x02\\x02\", \"\\u02FF\\u0300\\x073\\x02\\x02\\u0300\\u0301\\x079\\x02\\x02\\u0301\", \"\\u033F\\x078\\x02\\x02\\u0302\\u0303\\x07k\\x02\\x02\\u0303\\u0304\", \"\\x07p\\x02\\x02\\u0304\\u0305\\x07v\\x02\\x02\\u0305\\u0306\\x07\", \"3\\x02\\x02\\u0306\\u0307\\x07:\\x02\\x02\\u0307\\u033F\\x076\\x02\", \"\\x02\\u0308\\u0309\\x07k\\x02\\x02\\u0309\\u030A\\x07p\\x02\\x02\", \"\\u030A\\u030B\\x07v\\x02\\x02\\u030B\\u030C\\x073\\x02\\x02\\u030C\", \"\\u030D\\x07;\\x02\\x02\\u030D\\u033F\\x074\\x02\\x02\\u030E\\u030F\", \"\\x07k\\x02\\x02\\u030F\\u0310\\x07p\\x02\\x02\\u0310\\u0311\\x07\", \"v\\x02\\x02\\u0311\\u0312\\x074\\x02\\x02\\u0312\\u0313\\x072\\x02\", \"\\x02\\u0313\\u033F\\x072\\x02\\x02\\u0314\\u0315\\x07k\\x02\\x02\", \"\\u0315\\u0316\\x07p\\x02\\x02\\u0316\\u0317\\x07v\\x02\\x02\\u0317\", \"\\u0318\\x074\\x02\\x02\\u0318\\u0319\\x072\\x02\\x02\\u0319\\u033F\", \"\\x07:\\x02\\x02\\u031A\\u031B\\x07k\\x02\\x02\\u031B\\u031C\\x07\", \"p\\x02\\x02\\u031C\\u031D\\x07v\\x02\\x02\\u031D\\u031E\\x074\\x02\", \"\\x02\\u031E\\u031F\\x073\\x02\\x02\\u031F\\u033F\\x078\\x02\\x02\", \"\\u0320\\u0321\\x07k\\x02\\x02\\u0321\\u0322\\x07p\\x02\\x02\\u0322\", \"\\u0323\\x07v\\x02\\x02\\u0323\\u0324\\x074\\x02\\x02\\u0324\\u0325\", \"\\x074\\x02\\x02\\u0325\\u033F\\x076\\x02\\x02\\u0326\\u0327\\x07\", \"k\\x02\\x02\\u0327\\u0328\\x07p\\x02\\x02\\u0328\\u0329\\x07v\\x02\", \"\\x02\\u0329\\u032A\\x074\\x02\\x02\\u032A\\u032B\\x075\\x02\\x02\", \"\\u032B\\u033F\\x074\\x02\\x02\\u032C\\u032D\\x07k\\x02\\x02\\u032D\", \"\\u032E\\x07p\\x02\\x02\\u032E\\u032F\\x07v\\x02\\x02\\u032F\\u0330\", \"\\x074\\x02\\x02\\u0330\\u0331\\x076\\x02\\x02\\u0331\\u033F\\x07\", \"2\\x02\\x02\\u0332\\u0333\\x07k\\x02\\x02\\u0333\\u0334\\x07p\\x02\", \"\\x02\\u0334\\u0335\\x07v\\x02\\x02\\u0335\\u0336\\x074\\x02\\x02\", \"\\u0336\\u0337\\x076\\x02\\x02\\u0337\\u033F\\x07:\\x02\\x02\\u0338\", \"\\u0339\\x07k\\x02\\x02\\u0339\\u033A\\x07p\\x02\\x02\\u033A\\u033B\", \"\\x07v\\x02\\x02\\u033B\\u033C\\x074\\x02\\x02\\u033C\\u033D\\x07\", \"7\\x02\\x02\\u033D\\u033F\\x078\\x02\\x02\\u033E\\u0288\\x03\\x02\", \"\\x02\\x02\\u033E\\u028B\\x03\\x02\\x02\\x02\\u033E\\u028F\\x03\\x02\", \"\\x02\\x02\\u033E\\u0294\\x03\\x02\\x02\\x02\\u033E\\u0299\\x03\\x02\", \"\\x02\\x02\\u033E\\u029E\\x03\\x02\\x02\\x02\\u033E\\u02A3\\x03\\x02\", \"\\x02\\x02\\u033E\\u02A8\\x03\\x02\\x02\\x02\\u033E\\u02AD\\x03\\x02\", \"\\x02\\x02\\u033E\\u02B2\\x03\\x02\\x02\\x02\\u033E\\u02B7\\x03\\x02\", \"\\x02\\x02\\u033E\\u02BC\\x03\\x02\\x02\\x02\\u033E\\u02C1\\x03\\x02\", \"\\x02\\x02\\u033E\\u02C6\\x03\\x02\\x02\\x02\\u033E\\u02CC\\x03\\x02\", \"\\x02\\x02\\u033E\\u02D2\\x03\\x02\\x02\\x02\\u033E\\u02D8\\x03\\x02\", \"\\x02\\x02\\u033E\\u02DE\\x03\\x02\\x02\\x02\\u033E\\u02E4\\x03\\x02\", \"\\x02\\x02\\u033E\\u02EA\\x03\\x02\\x02\\x02\\u033E\\u02F0\\x03\\x02\", \"\\x02\\x02\\u033E\\u02F6\\x03\\x02\\x02\\x02\\u033E\\u02FC\\x03\\x02\", \"\\x02\\x02\\u033E\\u0302\\x03\\x02\\x02\\x02\\u033E\\u0308\\x03\\x02\", \"\\x02\\x02\\u033E\\u030E\\x03\\x02\\x02\\x02\\u033E\\u0314\\x03\\x02\", \"\\x02\\x02\\u033E\\u031A\\x03\\x02\\x02\\x02\\u033E\\u0320\\x03\\x02\", \"\\x02\\x02\\u033E\\u0326\\x03\\x02\\x02\\x02\\u033E\\u032C\\x03\\x02\", \"\\x02\\x02\\u033E\\u0332\\x03\\x02\\x02\\x02\\u033E\\u0338\\x03\\x02\", \"\\x02\\x02\\u033F\\xB8\\x03\\x02\\x02\\x02\\u0340\\u0341\\x07w\", \"\\x02\\x02\\u0341\\u0342\\x07k\\x02\\x02\\u0342\\u0343\\x07p\\x02\", \"\\x02\\u0343\\u0418\\x07v\\x02\\x02\\u0344\\u0345\\x07w\\x02\\x02\", \"\\u0345\\u0346\\x07k\\x02\\x02\\u0346\\u0347\\x07p\\x02\\x02\\u0347\", \"\\u0348\\x07v\\x02\\x02\\u0348\\u0418\\x07:\\x02\\x02\\u0349\\u034A\", \"\\x07w\\x02\\x02\\u034A\\u034B\\x07k\\x02\\x02\\u034B\\u034C\\x07\", \"p\\x02\\x02\\u034C\\u034D\\x07v\\x02\\x02\\u034D\\u034E\\x073\\x02\", \"\\x02\\u034E\\u0418\\x078\\x02\\x02\\u034F\\u0350\\x07w\\x02\\x02\", \"\\u0350\\u0351\\x07k\\x02\\x02\\u0351\\u0352\\x07p\\x02\\x02\\u0352\", \"\\u0353\\x07v\\x02\\x02\\u0353\\u0354\\x074\\x02\\x02\\u0354\\u0418\", \"\\x076\\x02\\x02\\u0355\\u0356\\x07w\\x02\\x02\\u0356\\u0357\\x07\", \"k\\x02\\x02\\u0357\\u0358\\x07p\\x02\\x02\\u0358\\u0359\\x07v\\x02\", \"\\x02\\u0359\\u035A\\x075\\x02\\x02\\u035A\\u0418\\x074\\x02\\x02\", \"\\u035B\\u035C\\x07w\\x02\\x02\\u035C\\u035D\\x07k\\x02\\x02\\u035D\", \"\\u035E\\x07p\\x02\\x02\\u035E\\u035F\\x07v\\x02\\x02\\u035F\\u0360\", \"\\x076\\x02\\x02\\u0360\\u0418\\x072\\x02\\x02\\u0361\\u0362\\x07\", \"w\\x02\\x02\\u0362\\u0363\\x07k\\x02\\x02\\u0363\\u0364\\x07p\\x02\", \"\\x02\\u0364\\u0365\\x07v\\x02\\x02\\u0365\\u0366\\x076\\x02\\x02\", \"\\u0366\\u0418\\x07:\\x02\\x02\\u0367\\u0368\\x07w\\x02\\x02\\u0368\", \"\\u0369\\x07k\\x02\\x02\\u0369\\u036A\\x07p\\x02\\x02\\u036A\\u036B\", \"\\x07v\\x02\\x02\\u036B\\u036C\\x077\\x02\\x02\\u036C\\u0418\\x07\", \"8\\x02\\x02\\u036D\\u036E\\x07w\\x02\\x02\\u036E\\u036F\\x07k\\x02\", \"\\x02\\u036F\\u0370\\x07p\\x02\\x02\\u0370\\u0371\\x07v\\x02\\x02\", \"\\u0371\\u0372\\x078\\x02\\x02\\u0372\\u0418\\x076\\x02\\x02\\u0373\", \"\\u0374\\x07w\\x02\\x02\\u0374\\u0375\\x07k\\x02\\x02\\u0375\\u0376\", \"\\x07p\\x02\\x02\\u0376\\u0377\\x07v\\x02\\x02\\u0377\\u0378\\x07\", \"9\\x02\\x02\\u0378\\u0418\\x074\\x02\\x02\\u0379\\u037A\\x07w\\x02\", \"\\x02\\u037A\\u037B\\x07k\\x02\\x02\\u037B\\u037C\\x07p\\x02\\x02\", \"\\u037C\\u037D\\x07v\\x02\\x02\\u037D\\u037E\\x07:\\x02\\x02\\u037E\", \"\\u0418\\x072\\x02\\x02\\u037F\\u0380\\x07w\\x02\\x02\\u0380\\u0381\", \"\\x07k\\x02\\x02\\u0381\\u0382\\x07p\\x02\\x02\\u0382\\u0383\\x07\", \"v\\x02\\x02\\u0383\\u0384\\x07:\\x02\\x02\\u0384\\u0418\\x07:\\x02\", \"\\x02\\u0385\\u0386\\x07w\\x02\\x02\\u0386\\u0387\\x07k\\x02\\x02\", \"\\u0387\\u0388\\x07p\\x02\\x02\\u0388\\u0389\\x07v\\x02\\x02\\u0389\", \"\\u038A\\x07;\\x02\\x02\\u038A\\u0418\\x078\\x02\\x02\\u038B\\u038C\", \"\\x07w\\x02\\x02\\u038C\\u038D\\x07k\\x02\\x02\\u038D\\u038E\\x07\", \"p\\x02\\x02\\u038E\\u038F\\x07v\\x02\\x02\\u038F\\u0390\\x073\\x02\", \"\\x02\\u0390\\u0391\\x072\\x02\\x02\\u0391\\u0418\\x076\\x02\\x02\", \"\\u0392\\u0393\\x07w\\x02\\x02\\u0393\\u0394\\x07k\\x02\\x02\\u0394\", \"\\u0395\\x07p\\x02\\x02\\u0395\\u0396\\x07v\\x02\\x02\\u0396\\u0397\", \"\\x073\\x02\\x02\\u0397\\u0398\\x073\\x02\\x02\\u0398\\u0418\\x07\", \"4\\x02\\x02\\u0399\\u039A\\x07w\\x02\\x02\\u039A\\u039B\\x07k\\x02\", \"\\x02\\u039B\\u039C\\x07p\\x02\\x02\\u039C\\u039D\\x07v\\x02\\x02\", \"\\u039D\\u039E\\x073\\x02\\x02\\u039E\\u039F\\x074\\x02\\x02\\u039F\", \"\\u0418\\x072\\x02\\x02\\u03A0\\u03A1\\x07w\\x02\\x02\\u03A1\\u03A2\", \"\\x07k\\x02\\x02\\u03A2\\u03A3\\x07p\\x02\\x02\\u03A3\\u03A4\\x07\", \"v\\x02\\x02\\u03A4\\u03A5\\x073\\x02\\x02\\u03A5\\u03A6\\x074\\x02\", \"\\x02\\u03A6\\u0418\\x07:\\x02\\x02\\u03A7\\u03A8\\x07w\\x02\\x02\", \"\\u03A8\\u03A9\\x07k\\x02\\x02\\u03A9\\u03AA\\x07p\\x02\\x02\\u03AA\", \"\\u03AB\\x07v\\x02\\x02\\u03AB\\u03AC\\x073\\x02\\x02\\u03AC\\u03AD\", \"\\x075\\x02\\x02\\u03AD\\u0418\\x078\\x02\\x02\\u03AE\\u03AF\\x07\", \"w\\x02\\x02\\u03AF\\u03B0\\x07k\\x02\\x02\\u03B0\\u03B1\\x07p\\x02\", \"\\x02\\u03B1\\u03B2\\x07v\\x02\\x02\\u03B2\\u03B3\\x073\\x02\\x02\", \"\\u03B3\\u03B4\\x076\\x02\\x02\\u03B4\\u0418\\x076\\x02\\x02\\u03B5\", \"\\u03B6\\x07w\\x02\\x02\\u03B6\\u03B7\\x07k\\x02\\x02\\u03B7\\u03B8\", \"\\x07p\\x02\\x02\\u03B8\\u03B9\\x07v\\x02\\x02\\u03B9\\u03BA\\x07\", \"3\\x02\\x02\\u03BA\\u03BB\\x077\\x02\\x02\\u03BB\\u0418\\x074\\x02\", \"\\x02\\u03BC\\u03BD\\x07w\\x02\\x02\\u03BD\\u03BE\\x07k\\x02\\x02\", \"\\u03BE\\u03BF\\x07p\\x02\\x02\\u03BF\\u03C0\\x07v\\x02\\x02\\u03C0\", \"\\u03C1\\x073\\x02\\x02\\u03C1\\u03C2\\x078\\x02\\x02\\u03C2\\u0418\", \"\\x072\\x02\\x02\\u03C3\\u03C4\\x07w\\x02\\x02\\u03C4\\u03C5\\x07\", \"k\\x02\\x02\\u03C5\\u03C6\\x07p\\x02\\x02\\u03C6\\u03C7\\x07v\\x02\", \"\\x02\\u03C7\\u03C8\\x073\\x02\\x02\\u03C8\\u03C9\\x078\\x02\\x02\", \"\\u03C9\\u0418\\x07:\\x02\\x02\\u03CA\\u03CB\\x07w\\x02\\x02\\u03CB\", \"\\u03CC\\x07k\\x02\\x02\\u03CC\\u03CD\\x07p\\x02\\x02\\u03CD\\u03CE\", \"\\x07v\\x02\\x02\\u03CE\\u03CF\\x073\\x02\\x02\\u03CF\\u03D0\\x07\", \"9\\x02\\x02\\u03D0\\u0418\\x078\\x02\\x02\\u03D1\\u03D2\\x07w\\x02\", \"\\x02\\u03D2\\u03D3\\x07k\\x02\\x02\\u03D3\\u03D4\\x07p\\x02\\x02\", \"\\u03D4\\u03D5\\x07v\\x02\\x02\\u03D5\\u03D6\\x073\\x02\\x02\\u03D6\", \"\\u03D7\\x07:\\x02\\x02\\u03D7\\u0418\\x076\\x02\\x02\\u03D8\\u03D9\", \"\\x07w\\x02\\x02\\u03D9\\u03DA\\x07k\\x02\\x02\\u03DA\\u03DB\\x07\", \"p\\x02\\x02\\u03DB\\u03DC\\x07v\\x02\\x02\\u03DC\\u03DD\\x073\\x02\", \"\\x02\\u03DD\\u03DE\\x07;\\x02\\x02\\u03DE\\u0418\\x074\\x02\\x02\", \"\\u03DF\\u03E0\\x07w\\x02\\x02\\u03E0\\u03E1\\x07k\\x02\\x02\\u03E1\", \"\\u03E2\\x07p\\x02\\x02\\u03E2\\u03E3\\x07v\\x02\\x02\\u03E3\\u03E4\", \"\\x074\\x02\\x02\\u03E4\\u03E5\\x072\\x02\\x02\\u03E5\\u0418\\x07\", \"2\\x02\\x02\\u03E6\\u03E7\\x07w\\x02\\x02\\u03E7\\u03E8\\x07k\\x02\", \"\\x02\\u03E8\\u03E9\\x07p\\x02\\x02\\u03E9\\u03EA\\x07v\\x02\\x02\", \"\\u03EA\\u03EB\\x074\\x02\\x02\\u03EB\\u03EC\\x072\\x02\\x02\\u03EC\", \"\\u0418\\x07:\\x02\\x02\\u03ED\\u03EE\\x07w\\x02\\x02\\u03EE\\u03EF\", \"\\x07k\\x02\\x02\\u03EF\\u03F0\\x07p\\x02\\x02\\u03F0\\u03F1\\x07\", \"v\\x02\\x02\\u03F1\\u03F2\\x074\\x02\\x02\\u03F2\\u03F3\\x073\\x02\", \"\\x02\\u03F3\\u0418\\x078\\x02\\x02\\u03F4\\u03F5\\x07w\\x02\\x02\", \"\\u03F5\\u03F6\\x07k\\x02\\x02\\u03F6\\u03F7\\x07p\\x02\\x02\\u03F7\", \"\\u03F8\\x07v\\x02\\x02\\u03F8\\u03F9\\x074\\x02\\x02\\u03F9\\u03FA\", \"\\x074\\x02\\x02\\u03FA\\u0418\\x076\\x02\\x02\\u03FB\\u03FC\\x07\", \"w\\x02\\x02\\u03FC\\u03FD\\x07k\\x02\\x02\\u03FD\\u03FE\\x07p\\x02\", \"\\x02\\u03FE\\u03FF\\x07v\\x02\\x02\\u03FF\\u0400\\x074\\x02\\x02\", \"\\u0400\\u0401\\x075\\x02\\x02\\u0401\\u0418\\x074\\x02\\x02\\u0402\", \"\\u0403\\x07w\\x02\\x02\\u0403\\u0404\\x07k\\x02\\x02\\u0404\\u0405\", \"\\x07p\\x02\\x02\\u0405\\u0406\\x07v\\x02\\x02\\u0406\\u0407\\x07\", \"4\\x02\\x02\\u0407\\u0408\\x076\\x02\\x02\\u0408\\u0418\\x072\\x02\", \"\\x02\\u0409\\u040A\\x07w\\x02\\x02\\u040A\\u040B\\x07k\\x02\\x02\", \"\\u040B\\u040C\\x07p\\x02\\x02\\u040C\\u040D\\x07v\\x02\\x02\\u040D\", \"\\u040E\\x074\\x02\\x02\\u040E\\u040F\\x076\\x02\\x02\\u040F\\u0418\", \"\\x07:\\x02\\x02\\u0410\\u0411\\x07w\\x02\\x02\\u0411\\u0412\\x07\", \"k\\x02\\x02\\u0412\\u0413\\x07p\\x02\\x02\\u0413\\u0414\\x07v\\x02\", \"\\x02\\u0414\\u0415\\x074\\x02\\x02\\u0415\\u0416\\x077\\x02\\x02\", \"\\u0416\\u0418\\x078\\x02\\x02\\u0417\\u0340\\x03\\x02\\x02\\x02\", \"\\u0417\\u0344\\x03\\x02\\x02\\x02\\u0417\\u0349\\x03\\x02\\x02\\x02\", \"\\u0417\\u034F\\x03\\x02\\x02\\x02\\u0417\\u0355\\x03\\x02\\x02\\x02\", \"\\u0417\\u035B\\x03\\x02\\x02\\x02\\u0417\\u0361\\x03\\x02\\x02\\x02\", \"\\u0417\\u0367\\x03\\x02\\x02\\x02\\u0417\\u036D\\x03\\x02\\x02\\x02\", \"\\u0417\\u0373\\x03\\x02\\x02\\x02\\u0417\\u0379\\x03\\x02\\x02\\x02\", \"\\u0417\\u037F\\x03\\x02\\x02\\x02\\u0417\\u0385\\x03\\x02\\x02\\x02\", \"\\u0417\\u038B\\x03\\x02\\x02\\x02\\u0417\\u0392\\x03\\x02\\x02\\x02\", \"\\u0417\\u0399\\x03\\x02\\x02\\x02\\u0417\\u03A0\\x03\\x02\\x02\\x02\", \"\\u0417\\u03A7\\x03\\x02\\x02\\x02\\u0417\\u03AE\\x03\\x02\\x02\\x02\", \"\\u0417\\u03B5\\x03\\x02\\x02\\x02\\u0417\\u03BC\\x03\\x02\\x02\\x02\", \"\\u0417\\u03C3\\x03\\x02\\x02\\x02\\u0417\\u03CA\\x03\\x02\\x02\\x02\", \"\\u0417\\u03D1\\x03\\x02\\x02\\x02\\u0417\\u03D8\\x03\\x02\\x02\\x02\", \"\\u0417\\u03DF\\x03\\x02\\x02\\x02\\u0417\\u03E6\\x03\\x02\\x02\\x02\", \"\\u0417\\u03ED\\x03\\x02\\x02\\x02\\u0417\\u03F4\\x03\\x02\\x02\\x02\", \"\\u0417\\u03FB\\x03\\x02\\x02\\x02\\u0417\\u0402\\x03\\x02\\x02\\x02\", \"\\u0417\\u0409\\x03\\x02\\x02\\x02\\u0417\\u0410\\x03\\x02\\x02\\x02\", \"\\u0418\\xBA\\x03\\x02\\x02\\x02\\u0419\\u041A\\x07d\\x02\\x02\", \"\\u041A\\u041B\\x07{\\x02\\x02\\u041B\\u041C\\x07v\\x02\\x02\\u041C\", \"\\u041D\\x07g\\x02\\x02\\u041D\\u04F6\\x07u\\x02\\x02\\u041E\\u041F\", \"\\x07d\\x02\\x02\\u041F\\u0420\\x07{\\x02\\x02\\u0420\\u0421\\x07\", \"v\\x02\\x02\\u0421\\u0422\\x07g\\x02\\x02\\u0422\\u0423\\x07u\\x02\", \"\\x02\\u0423\\u04F6\\x073\\x02\\x02\\u0424\\u0425\\x07d\\x02\\x02\", \"\\u0425\\u0426\\x07{\\x02\\x02\\u0426\\u0427\\x07v\\x02\\x02\\u0427\", \"\\u0428\\x07g\\x02\\x02\\u0428\\u0429\\x07u\\x02\\x02\\u0429\\u04F6\", \"\\x074\\x02\\x02\\u042A\\u042B\\x07d\\x02\\x02\\u042B\\u042C\\x07\", \"{\\x02\\x02\\u042C\\u042D\\x07v\\x02\\x02\\u042D\\u042E\\x07g\\x02\", \"\\x02\\u042E\\u042F\\x07u\\x02\\x02\\u042F\\u04F6\\x075\\x02\\x02\", \"\\u0430\\u0431\\x07d\\x02\\x02\\u0431\\u0432\\x07{\\x02\\x02\\u0432\", \"\\u0433\\x07v\\x02\\x02\\u0433\\u0434\\x07g\\x02\\x02\\u0434\\u0435\", \"\\x07u\\x02\\x02\\u0435\\u04F6\\x076\\x02\\x02\\u0436\\u0437\\x07\", \"d\\x02\\x02\\u0437\\u0438\\x07{\\x02\\x02\\u0438\\u0439\\x07v\\x02\", \"\\x02\\u0439\\u043A\\x07g\\x02\\x02\\u043A\\u043B\\x07u\\x02\\x02\", \"\\u043B\\u04F6\\x077\\x02\\x02\\u043C\\u043D\\x07d\\x02\\x02\\u043D\", \"\\u043E\\x07{\\x02\\x02\\u043E\\u043F\\x07v\\x02\\x02\\u043F\\u0440\", \"\\x07g\\x02\\x02\\u0440\\u0441\\x07u\\x02\\x02\\u0441\\u04F6\\x07\", \"8\\x02\\x02\\u0442\\u0443\\x07d\\x02\\x02\\u0443\\u0444\\x07{\\x02\", \"\\x02\\u0444\\u0445\\x07v\\x02\\x02\\u0445\\u0446\\x07g\\x02\\x02\", \"\\u0446\\u0447\\x07u\\x02\\x02\\u0447\\u04F6\\x079\\x02\\x02\\u0448\", \"\\u0449\\x07d\\x02\\x02\\u0449\\u044A\\x07{\\x02\\x02\\u044A\\u044B\", \"\\x07v\\x02\\x02\\u044B\\u044C\\x07g\\x02\\x02\\u044C\\u044D\\x07\", \"u\\x02\\x02\\u044D\\u04F6\\x07:\\x02\\x02\\u044E\\u044F\\x07d\\x02\", \"\\x02\\u044F\\u0450\\x07{\\x02\\x02\\u0450\\u0451\\x07v\\x02\\x02\", \"\\u0451\\u0452\\x07g\\x02\\x02\\u0452\\u0453\\x07u\\x02\\x02\\u0453\", \"\\u04F6\\x07;\\x02\\x02\\u0454\\u0455\\x07d\\x02\\x02\\u0455\\u0456\", \"\\x07{\\x02\\x02\\u0456\\u0457\\x07v\\x02\\x02\\u0457\\u0458\\x07\", \"g\\x02\\x02\\u0458\\u0459\\x07u\\x02\\x02\\u0459\\u045A\\x073\\x02\", \"\\x02\\u045A\\u04F6\\x072\\x02\\x02\\u045B\\u045C\\x07d\\x02\\x02\", \"\\u045C\\u045D\\x07{\\x02\\x02\\u045D\\u045E\\x07v\\x02\\x02\\u045E\", \"\\u045F\\x07g\\x02\\x02\\u045F\\u0460\\x07u\\x02\\x02\\u0460\\u0461\", \"\\x073\\x02\\x02\\u0461\\u04F6\\x073\\x02\\x02\\u0462\\u0463\\x07\", \"d\\x02\\x02\\u0463\\u0464\\x07{\\x02\\x02\\u0464\\u0465\\x07v\\x02\", \"\\x02\\u0465\\u0466\\x07g\\x02\\x02\\u0466\\u0467\\x07u\\x02\\x02\", \"\\u0467\\u0468\\x073\\x02\\x02\\u0468\\u04F6\\x074\\x02\\x02\\u0469\", \"\\u046A\\x07d\\x02\\x02\\u046A\\u046B\\x07{\\x02\\x02\\u046B\\u046C\", \"\\x07v\\x02\\x02\\u046C\\u046D\\x07g\\x02\\x02\\u046D\\u046E\\x07\", \"u\\x02\\x02\\u046E\\u046F\\x073\\x02\\x02\\u046F\\u04F6\\x075\\x02\", \"\\x02\\u0470\\u0471\\x07d\\x02\\x02\\u0471\\u0472\\x07{\\x02\\x02\", \"\\u0472\\u0473\\x07v\\x02\\x02\\u0473\\u0474\\x07g\\x02\\x02\\u0474\", \"\\u0475\\x07u\\x02\\x02\\u0475\\u0476\\x073\\x02\\x02\\u0476\\u04F6\", \"\\x076\\x02\\x02\\u0477\\u0478\\x07d\\x02\\x02\\u0478\\u0479\\x07\", \"{\\x02\\x02\\u0479\\u047A\\x07v\\x02\\x02\\u047A\\u047B\\x07g\\x02\", \"\\x02\\u047B\\u047C\\x07u\\x02\\x02\\u047C\\u047D\\x073\\x02\\x02\", \"\\u047D\\u04F6\\x077\\x02\\x02\\u047E\\u047F\\x07d\\x02\\x02\\u047F\", \"\\u0480\\x07{\\x02\\x02\\u0480\\u0481\\x07v\\x02\\x02\\u0481\\u0482\", \"\\x07g\\x02\\x02\\u0482\\u0483\\x07u\\x02\\x02\\u0483\\u0484\\x07\", \"3\\x02\\x02\\u0484\\u04F6\\x078\\x02\\x02\\u0485\\u0486\\x07d\\x02\", \"\\x02\\u0486\\u0487\\x07{\\x02\\x02\\u0487\\u0488\\x07v\\x02\\x02\", \"\\u0488\\u0489\\x07g\\x02\\x02\\u0489\\u048A\\x07u\\x02\\x02\\u048A\", \"\\u048B\\x073\\x02\\x02\\u048B\\u04F6\\x079\\x02\\x02\\u048C\\u048D\", \"\\x07d\\x02\\x02\\u048D\\u048E\\x07{\\x02\\x02\\u048E\\u048F\\x07\", \"v\\x02\\x02\\u048F\\u0490\\x07g\\x02\\x02\\u0490\\u0491\\x07u\\x02\", \"\\x02\\u0491\\u0492\\x073\\x02\\x02\\u0492\\u04F6\\x07:\\x02\\x02\", \"\\u0493\\u0494\\x07d\\x02\\x02\\u0494\\u0495\\x07{\\x02\\x02\\u0495\", \"\\u0496\\x07v\\x02\\x02\\u0496\\u0497\\x07g\\x02\\x02\\u0497\\u0498\", \"\\x07u\\x02\\x02\\u0498\\u0499\\x073\\x02\\x02\\u0499\\u04F6\\x07\", \";\\x02\\x02\\u049A\\u049B\\x07d\\x02\\x02\\u049B\\u049C\\x07{\\x02\", \"\\x02\\u049C\\u049D\\x07v\\x02\\x02\\u049D\\u049E\\x07g\\x02\\x02\", \"\\u049E\\u049F\\x07u\\x02\\x02\\u049F\\u04A0\\x074\\x02\\x02\\u04A0\", \"\\u04F6\\x072\\x02\\x02\\u04A1\\u04A2\\x07d\\x02\\x02\\u04A2\\u04A3\", \"\\x07{\\x02\\x02\\u04A3\\u04A4\\x07v\\x02\\x02\\u04A4\\u04A5\\x07\", \"g\\x02\\x02\\u04A5\\u04A6\\x07u\\x02\\x02\\u04A6\\u04A7\\x074\\x02\", \"\\x02\\u04A7\\u04F6\\x073\\x02\\x02\\u04A8\\u04A9\\x07d\\x02\\x02\", \"\\u04A9\\u04AA\\x07{\\x02\\x02\\u04AA\\u04AB\\x07v\\x02\\x02\\u04AB\", \"\\u04AC\\x07g\\x02\\x02\\u04AC\\u04AD\\x07u\\x02\\x02\\u04AD\\u04AE\", \"\\x074\\x02\\x02\\u04AE\\u04F6\\x074\\x02\\x02\\u04AF\\u04B0\\x07\", \"d\\x02\\x02\\u04B0\\u04B1\\x07{\\x02\\x02\\u04B1\\u04B2\\x07v\\x02\", \"\\x02\\u04B2\\u04B3\\x07g\\x02\\x02\\u04B3\\u04B4\\x07u\\x02\\x02\", \"\\u04B4\\u04B5\\x074\\x02\\x02\\u04B5\\u04F6\\x075\\x02\\x02\\u04B6\", \"\\u04B7\\x07d\\x02\\x02\\u04B7\\u04B8\\x07{\\x02\\x02\\u04B8\\u04B9\", \"\\x07v\\x02\\x02\\u04B9\\u04BA\\x07g\\x02\\x02\\u04BA\\u04BB\\x07\", \"u\\x02\\x02\\u04BB\\u04BC\\x074\\x02\\x02\\u04BC\\u04F6\\x076\\x02\", \"\\x02\\u04BD\\u04BE\\x07d\\x02\\x02\\u04BE\\u04BF\\x07{\\x02\\x02\", \"\\u04BF\\u04C0\\x07v\\x02\\x02\\u04C0\\u04C1\\x07g\\x02\\x02\\u04C1\", \"\\u04C2\\x07u\\x02\\x02\\u04C2\\u04C3\\x074\\x02\\x02\\u04C3\\u04F6\", \"\\x077\\x02\\x02\\u04C4\\u04C5\\x07d\\x02\\x02\\u04C5\\u04C6\\x07\", \"{\\x02\\x02\\u04C6\\u04C7\\x07v\\x02\\x02\\u04C7\\u04C8\\x07g\\x02\", \"\\x02\\u04C8\\u04C9\\x07u\\x02\\x02\\u04C9\\u04CA\\x074\\x02\\x02\", \"\\u04CA\\u04F6\\x078\\x02\\x02\\u04CB\\u04CC\\x07d\\x02\\x02\\u04CC\", \"\\u04CD\\x07{\\x02\\x02\\u04CD\\u04CE\\x07v\\x02\\x02\\u04CE\\u04CF\", \"\\x07g\\x02\\x02\\u04CF\\u04D0\\x07u\\x02\\x02\\u04D0\\u04D1\\x07\", \"4\\x02\\x02\\u04D1\\u04F6\\x079\\x02\\x02\\u04D2\\u04D3\\x07d\\x02\", \"\\x02\\u04D3\\u04D4\\x07{\\x02\\x02\\u04D4\\u04D5\\x07v\\x02\\x02\", \"\\u04D5\\u04D6\\x07g\\x02\\x02\\u04D6\\u04D7\\x07u\\x02\\x02\\u04D7\", \"\\u04D8\\x074\\x02\\x02\\u04D8\\u04F6\\x07:\\x02\\x02\\u04D9\\u04DA\", \"\\x07d\\x02\\x02\\u04DA\\u04DB\\x07{\\x02\\x02\\u04DB\\u04DC\\x07\", \"v\\x02\\x02\\u04DC\\u04DD\\x07g\\x02\\x02\\u04DD\\u04DE\\x07u\\x02\", \"\\x02\\u04DE\\u04DF\\x074\\x02\\x02\\u04DF\\u04F6\\x07;\\x02\\x02\", \"\\u04E0\\u04E1\\x07d\\x02\\x02\\u04E1\\u04E2\\x07{\\x02\\x02\\u04E2\", \"\\u04E3\\x07v\\x02\\x02\\u04E3\\u04E4\\x07g\\x02\\x02\\u04E4\\u04E5\", \"\\x07u\\x02\\x02\\u04E5\\u04E6\\x075\\x02\\x02\\u04E6\\u04F6\\x07\", \"2\\x02\\x02\\u04E7\\u04E8\\x07d\\x02\\x02\\u04E8\\u04E9\\x07{\\x02\", \"\\x02\\u04E9\\u04EA\\x07v\\x02\\x02\\u04EA\\u04EB\\x07g\\x02\\x02\", \"\\u04EB\\u04EC\\x07u\\x02\\x02\\u04EC\\u04ED\\x075\\x02\\x02\\u04ED\", \"\\u04F6\\x073\\x02\\x02\\u04EE\\u04EF\\x07d\\x02\\x02\\u04EF\\u04F0\", \"\\x07{\\x02\\x02\\u04F0\\u04F1\\x07v\\x02\\x02\\u04F1\\u04F2\\x07\", \"g\\x02\\x02\\u04F2\\u04F3\\x07u\\x02\\x02\\u04F3\\u04F4\\x075\\x02\", \"\\x02\\u04F4\\u04F6\\x074\\x02\\x02\\u04F5\\u0419\\x03\\x02\\x02\", \"\\x02\\u04F5\\u041E\\x03\\x02\\x02\\x02\\u04F5\\u0424\\x03\\x02\\x02\", \"\\x02\\u04F5\\u042A\\x03\\x02\\x02\\x02\\u04F5\\u0430\\x03\\x02\\x02\", \"\\x02\\u04F5\\u0436\\x03\\x02\\x02\\x02\\u04F5\\u043C\\x03\\x02\\x02\", \"\\x02\\u04F5\\u0442\\x03\\x02\\x02\\x02\\u04F5\\u0448\\x03\\x02\\x02\", \"\\x02\\u04F5\\u044E\\x03\\x02\\x02\\x02\\u04F5\\u0454\\x03\\x02\\x02\", \"\\x02\\u04F5\\u045B\\x03\\x02\\x02\\x02\\u04F5\\u0462\\x03\\x02\\x02\", \"\\x02\\u04F5\\u0469\\x03\\x02\\x02\\x02\\u04F5\\u0470\\x03\\x02\\x02\", \"\\x02\\u04F5\\u0477\\x03\\x02\\x02\\x02\\u04F5\\u047E\\x03\\x02\\x02\", \"\\x02\\u04F5\\u0485\\x03\\x02\\x02\\x02\\u04F5\\u048C\\x03\\x02\\x02\", \"\\x02\\u04F5\\u0493\\x03\\x02\\x02\\x02\\u04F5\\u049A\\x03\\x02\\x02\", \"\\x02\\u04F5\\u04A1\\x03\\x02\\x02\\x02\\u04F5\\u04A8\\x03\\x02\\x02\", \"\\x02\\u04F5\\u04AF\\x03\\x02\\x02\\x02\\u04F5\\u04B6\\x03\\x02\\x02\", \"\\x02\\u04F5\\u04BD\\x03\\x02\\x02\\x02\\u04F5\\u04C4\\x03\\x02\\x02\", \"\\x02\\u04F5\\u04CB\\x03\\x02\\x02\\x02\\u04F5\\u04D2\\x03\\x02\\x02\", \"\\x02\\u04F5\\u04D9\\x03\\x02\\x02\\x02\\u04F5\\u04E0\\x03\\x02\\x02\", \"\\x02\\u04F5\\u04E7\\x03\\x02\\x02\\x02\\u04F5\\u04EE\\x03\\x02\\x02\", \"\\x02\\u04F6\\xBC\\x03\\x02\\x02\\x02\\u04F7\\u04F8\\x07h\\x02\", \"\\x02\\u04F8\\u04F9\\x07k\\x02\\x02\\u04F9\\u04FA\\x07z\\x02\\x02\", \"\\u04FA\\u04FB\\x07g\\x02\\x02\\u04FB\\u050E\\x07f\\x02\\x02\\u04FC\", \"\\u04FD\\x07h\\x02\\x02\\u04FD\\u04FE\\x07k\\x02\\x02\\u04FE\\u04FF\", \"\\x07z\\x02\\x02\\u04FF\\u0500\\x07g\\x02\\x02\\u0500\\u0501\\x07\", \"f\\x02\\x02\\u0501\\u0503\\x03\\x02\\x02\\x02\\u0502\\u0504\\t\\x02\", \"\\x02\\x02\\u0503\\u0502\\x03\\x02\\x02\\x02\\u0504\\u0505\\x03\\x02\", \"\\x02\\x02\\u0505\\u0503\\x03\\x02\\x02\\x02\\u0505\\u0506\\x03\\x02\", \"\\x02\\x02\\u0506\\u0507\\x03\\x02\\x02\\x02\\u0507\\u0509\\x07z\", \"\\x02\\x02\\u0508\\u050A\\t\\x02\\x02\\x02\\u0509\\u0508\\x03\\x02\", \"\\x02\\x02\\u050A\\u050B\\x03\\x02\\x02\\x02\\u050B\\u0509\\x03\\x02\", \"\\x02\\x02\\u050B\\u050C\\x03\\x02\\x02\\x02\\u050C\\u050E\\x03\\x02\", \"\\x02\\x02\\u050D\\u04F7\\x03\\x02\\x02\\x02\\u050D\\u04FC\\x03\\x02\", \"\\x02\\x02\\u050E\\xBE\\x03\\x02\\x02\\x02\\u050F\\u0510\\x07w\", \"\\x02\\x02\\u0510\\u0511\\x07h\\x02\\x02\\u0511\\u0512\\x07k\\x02\", \"\\x02\\u0512\\u0513\\x07z\\x02\\x02\\u0513\\u0514\\x07g\\x02\\x02\", \"\\u0514\\u0528\\x07f\\x02\\x02\\u0515\\u0516\\x07w\\x02\\x02\\u0516\", \"\\u0517\\x07h\\x02\\x02\\u0517\\u0518\\x07k\\x02\\x02\\u0518\\u0519\", \"\\x07z\\x02\\x02\\u0519\\u051A\\x07g\\x02\\x02\\u051A\\u051B\\x07\", \"f\\x02\\x02\\u051B\\u051D\\x03\\x02\\x02\\x02\\u051C\\u051E\\t\\x02\", \"\\x02\\x02\\u051D\\u051C\\x03\\x02\\x02\\x02\\u051E\\u051F\\x03\\x02\", \"\\x02\\x02\\u051F\\u051D\\x03\\x02\\x02\\x02\\u051F\\u0520\\x03\\x02\", \"\\x02\\x02\\u0520\\u0521\\x03\\x02\\x02\\x02\\u0521\\u0523\\x07z\", \"\\x02\\x02\\u0522\\u0524\\t\\x02\\x02\\x02\\u0523\\u0522\\x03\\x02\", \"\\x02\\x02\\u0524\\u0525\\x03\\x02\\x02\\x02\\u0525\\u0523\\x03\\x02\", \"\\x02\\x02\\u0525\\u0526\\x03\\x02\\x02\\x02\\u0526\\u0528\\x03\\x02\", \"\\x02\\x02\\u0527\\u050F\\x03\\x02\\x02\\x02\\u0527\\u0515\\x03\\x02\", \"\\x02\\x02\\u0528\\xC0\\x03\\x02\\x02\\x02\\u0529\\u052B\\t\\x02\", \"\\x02\\x02\\u052A\\u0529\\x03\\x02\\x02\\x02\\u052B\\u052C\\x03\\x02\", \"\\x02\\x02\\u052C\\u052A\\x03\\x02\\x02\\x02\\u052C\\u052D\\x03\\x02\", \"\\x02\\x02\\u052D\\u052E\\x03\\x02\\x02\\x02\\u052E\\u0530\\x070\", \"\\x02\\x02\\u052F\\u0531\\t\\x02\\x02\\x02\\u0530\\u052F\\x03\\x02\", \"\\x02\\x02\\u0531\\u0532\\x03\\x02\\x02\\x02\\u0532\\u0530\\x03\\x02\", \"\\x02\\x02\\u0532\\u0533\\x03\\x02\\x02\\x02\\u0533\\u0534\\x03\\x02\", \"\\x02\\x02\\u0534\\u0536\\x070\\x02\\x02\\u0535\\u0537\\t\\x02\\x02\", \"\\x02\\u0536\\u0535\\x03\\x02\\x02\\x02\\u0537\\u0538\\x03\\x02\\x02\", \"\\x02\\u0538\\u0536\\x03\\x02\\x02\\x02\\u0538\\u0539\\x03\\x02\\x02\", \"\\x02\\u0539\\xC2\\x03\\x02\\x02\\x02\\u053A\\u053B\\x07v\\x02\", \"\\x02\\u053B\\u053C\\x07t\\x02\\x02\\u053C\\u053D\\x07w\\x02\\x02\", \"\\u053D\\u0544\\x07g\\x02\\x02\\u053E\\u053F\\x07h\\x02\\x02\\u053F\", \"\\u0540\\x07c\\x02\\x02\\u0540\\u0541\\x07n\\x02\\x02\\u0541\\u0542\", \"\\x07u\\x02\\x02\\u0542\\u0544\\x07g\\x02\\x02\\u0543\\u053A\\x03\", \"\\x02\\x02\\x02\\u0543\\u053E\\x03\\x02\\x02\\x02\\u0544\\xC4\\x03\", \"\\x02\\x02\\x02\\u0545\\u054C\\x05\\xC7d\\x02\\u0546\\u0548\\x05\", \"\\xC7d\\x02\\u0547\\u0546\\x03\\x02\\x02\\x02\\u0547\\u0548\\x03\", \"\\x02\\x02\\x02\\u0548\\u0549\\x03\\x02\\x02\\x02\\u0549\\u054A\\x07\", \"0\\x02\\x02\\u054A\\u054C\\x05\\xC7d\\x02\\u054B\\u0545\\x03\\x02\", \"\\x02\\x02\\u054B\\u0547\\x03\\x02\\x02\\x02\\u054C\\u054F\\x03\\x02\", \"\\x02\\x02\\u054D\\u054E\\t\\x03\\x02\\x02\\u054E\\u0550\\x05\\xC7\", \"d\\x02\\u054F\\u054D\\x03\\x02\\x02\\x02\\u054F\\u0550\\x03\\x02\", \"\\x02\\x02\\u0550\\xC6\\x03\\x02\\x02\\x02\\u0551\\u0558\\t\\x02\", \"\\x02\\x02\\u0552\\u0554\\x07a\\x02\\x02\\u0553\\u0552\\x03\\x02\", \"\\x02\\x02\\u0553\\u0554\\x03\\x02\\x02\\x02\\u0554\\u0555\\x03\\x02\", \"\\x02\\x02\\u0555\\u0557\\t\\x02\\x02\\x02\\u0556\\u0553\\x03\\x02\", \"\\x02\\x02\\u0557\\u055A\\x03\\x02\\x02\\x02\\u0558\\u0556\\x03\\x02\", \"\\x02\\x02\\u0558\\u0559\\x03\\x02\\x02\\x02\\u0559\\xC8\\x03\\x02\", \"\\x02\\x02\\u055A\\u0558\\x03\\x02\\x02\\x02\\u055B\\u055C\\x072\", \"\\x02\\x02\\u055C\\u055D\\t\\x04\\x02\\x02\\u055D\\u055E\\x05\\xCB\", \"f\\x02\\u055E\\xCA\\x03\\x02\\x02\\x02\\u055F\\u0566\\x05\\xD3\", \"j\\x02\\u0560\\u0562\\x07a\\x02\\x02\\u0561\\u0560\\x03\\x02\\x02\", \"\\x02\\u0561\\u0562\\x03\\x02\\x02\\x02\\u0562\\u0563\\x03\\x02\\x02\", \"\\x02\\u0563\\u0565\\x05\\xD3j\\x02\\u0564\\u0561\\x03\\x02\\x02\", \"\\x02\\u0565\\u0568\\x03\\x02\\x02\\x02\\u0566\\u0564\\x03\\x02\\x02\", \"\\x02\\u0566\\u0567\\x03\\x02\\x02\\x02\\u0567\\xCC\\x03\\x02\\x02\", \"\\x02\\u0568\\u0566\\x03\\x02\\x02\\x02\\u0569\\u056A\\x07y\\x02\", \"\\x02\\u056A\\u056B\\x07g\\x02\\x02\\u056B\\u059E\\x07k\\x02\\x02\", \"\\u056C\\u056D\\x07u\\x02\\x02\\u056D\\u056E\\x07|\\x02\\x02\\u056E\", \"\\u056F\\x07c\\x02\\x02\\u056F\\u0570\\x07d\\x02\\x02\\u0570\\u059E\", \"\\x07q\\x02\\x02\\u0571\\u0572\\x07h\\x02\\x02\\u0572\\u0573\\x07\", \"k\\x02\\x02\\u0573\\u0574\\x07p\\x02\\x02\\u0574\\u0575\\x07p\\x02\", \"\\x02\\u0575\\u0576\\x07g\\x02\\x02\\u0576\\u059E\\x07{\\x02\\x02\", \"\\u0577\\u0578\\x07g\\x02\\x02\\u0578\\u0579\\x07v\\x02\\x02\\u0579\", \"\\u057A\\x07j\\x02\\x02\\u057A\\u057B\\x07g\\x02\\x02\\u057B\\u059E\", \"\\x07t\\x02\\x02\\u057C\\u057D\\x07u\\x02\\x02\\u057D\\u057E\\x07\", \"g\\x02\\x02\\u057E\\u057F\\x07e\\x02\\x02\\u057F\\u0580\\x07q\\x02\", \"\\x02\\u0580\\u0581\\x07p\\x02\\x02\\u0581\\u0582\\x07f\\x02\\x02\", \"\\u0582\\u059E\\x07u\\x02\\x02\\u0583\\u0584\\x07o\\x02\\x02\\u0584\", \"\\u0585\\x07k\\x02\\x02\\u0585\\u0586\\x07p\\x02\\x02\\u0586\\u0587\", \"\\x07w\\x02\\x02\\u0587\\u0588\\x07v\\x02\\x02\\u0588\\u0589\\x07\", \"g\\x02\\x02\\u0589\\u059E\\x07u\\x02\\x02\\u058A\\u058B\\x07j\\x02\", \"\\x02\\u058B\\u058C\\x07q\\x02\\x02\\u058C\\u058D\\x07w\\x02\\x02\", \"\\u058D\\u058E\\x07t\\x02\\x02\\u058E\\u059E\\x07u\\x02\\x02\\u058F\", \"\\u0590\\x07f\\x02\\x02\\u0590\\u0591\\x07c\\x02\\x02\\u0591\\u0592\", \"\\x07{\\x02\\x02\\u0592\\u059E\\x07u\\x02\\x02\\u0593\\u0594\\x07\", \"y\\x02\\x02\\u0594\\u0595\\x07g\\x02\\x02\\u0595\\u0596\\x07g\\x02\", \"\\x02\\u0596\\u0597\\x07m\\x02\\x02\\u0597\\u059E\\x07u\\x02\\x02\", \"\\u0598\\u0599\\x07{\\x02\\x02\\u0599\\u059A\\x07g\\x02\\x02\\u059A\", \"\\u059B\\x07c\\x02\\x02\\u059B\\u059C\\x07t\\x02\\x02\\u059C\\u059E\", \"\\x07u\\x02\\x02\\u059D\\u0569\\x03\\x02\\x02\\x02\\u059D\\u056C\", \"\\x03\\x02\\x02\\x02\\u059D\\u0571\\x03\\x02\\x02\\x02\\u059D\\u0577\", \"\\x03\\x02\\x02\\x02\\u059D\\u057C\\x03\\x02\\x02\\x02\\u059D\\u0583\", \"\\x03\\x02\\x02\\x02\\u059D\\u058A\\x03\\x02\\x02\\x02\\u059D\\u058F\", \"\\x03\\x02\\x02\\x02\\u059D\\u0593\\x03\\x02\\x02\\x02\\u059D\\u0598\", \"\\x03\\x02\\x02\\x02\\u059E\\xCE\\x03\\x02\\x02\\x02\\u059F\\u05A0\", \"\\x07j\\x02\\x02\\u05A0\\u05A1\\x07g\\x02\\x02\\u05A1\\u05A2\\x07\", \"z\\x02\\x02\\u05A2\\u05B3\\x03\\x02\\x02\\x02\\u05A3\\u05A7\\x07\", \"$\\x02\\x02\\u05A4\\u05A6\\x05\\xD1i\\x02\\u05A5\\u05A4\\x03\\x02\", \"\\x02\\x02\\u05A6\\u05A9\\x03\\x02\\x02\\x02\\u05A7\\u05A5\\x03\\x02\", \"\\x02\\x02\\u05A7\\u05A8\\x03\\x02\\x02\\x02\\u05A8\\u05AA\\x03\\x02\", \"\\x02\\x02\\u05A9\\u05A7\\x03\\x02\\x02\\x02\\u05AA\\u05B4\\x07$\", \"\\x02\\x02\\u05AB\\u05AF\\x07)\\x02\\x02\\u05AC\\u05AE\\x05\\xD1\", \"i\\x02\\u05AD\\u05AC\\x03\\x02\\x02\\x02\\u05AE\\u05B1\\x03\\x02\", \"\\x02\\x02\\u05AF\\u05AD\\x03\\x02\\x02\\x02\\u05AF\\u05B0\\x03\\x02\", \"\\x02\\x02\\u05B0\\u05B2\\x03\\x02\\x02\\x02\\u05B1\\u05AF\\x03\\x02\", \"\\x02\\x02\\u05B2\\u05B4\\x07)\\x02\\x02\\u05B3\\u05A3\\x03\\x02\", \"\\x02\\x02\\u05B3\\u05AB\\x03\\x02\\x02\\x02\\u05B4\\xD0\\x03\\x02\", \"\\x02\\x02\\u05B5\\u05B6\\x05\\xD3j\\x02\\u05B6\\u05B7\\x05\\xD3\", \"j\\x02\\u05B7\\xD2\\x03\\x02\\x02\\x02\\u05B8\\u05B9\\t\\x05\\x02\", \"\\x02\\u05B9\\xD4\\x03\\x02\\x02\\x02\\u05BA\\u05BB\\x07c\\x02\", \"\\x02\\u05BB\\u05BC\\x07d\\x02\\x02\\u05BC\\u05BD\\x07u\\x02\\x02\", \"\\u05BD\\u05BE\\x07v\\x02\\x02\\u05BE\\u05BF\\x07t\\x02\\x02\\u05BF\", \"\\u05C0\\x07c\\x02\\x02\\u05C0\\u05C1\\x07e\\x02\\x02\\u05C1\\u0613\", \"\\x07v\\x02\\x02\\u05C2\\u05C3\\x07c\\x02\\x02\\u05C3\\u05C4\\x07\", \"h\\x02\\x02\\u05C4\\u05C5\\x07v\\x02\\x02\\u05C5\\u05C6\\x07g\\x02\", \"\\x02\\u05C6\\u0613\\x07t\\x02\\x02\\u05C7\\u05C8\\x07e\\x02\\x02\", \"\\u05C8\\u05C9\\x07c\\x02\\x02\\u05C9\\u05CA\\x07u\\x02\\x02\\u05CA\", \"\\u0613\\x07g\\x02\\x02\\u05CB\\u05CC\\x07e\\x02\\x02\\u05CC\\u05CD\", \"\\x07c\\x02\\x02\\u05CD\\u05CE\\x07v\\x02\\x02\\u05CE\\u05CF\\x07\", \"e\\x02\\x02\\u05CF\\u0613\\x07j\\x02\\x02\\u05D0\\u05D1\\x07f\\x02\", \"\\x02\\u05D1\\u05D2\\x07g\\x02\\x02\\u05D2\\u05D3\\x07h\\x02\\x02\", \"\\u05D3\\u05D4\\x07c\\x02\\x02\\u05D4\\u05D5\\x07w\\x02\\x02\\u05D5\", \"\\u05D6\\x07n\\x02\\x02\\u05D6\\u0613\\x07v\\x02\\x02\\u05D7\\u05D8\", \"\\x07h\\x02\\x02\\u05D8\\u05D9\\x07k\\x02\\x02\\u05D9\\u05DA\\x07\", \"p\\x02\\x02\\u05DA\\u05DB\\x07c\\x02\\x02\\u05DB\\u0613\\x07n\\x02\", \"\\x02\\u05DC\\u05DD\\x07k\\x02\\x02\\u05DD\\u0613\\x07p\\x02\\x02\", \"\\u05DE\\u05DF\\x07k\\x02\\x02\\u05DF\\u05E0\\x07p\\x02\\x02\\u05E0\", \"\\u05E1\\x07n\\x02\\x02\\u05E1\\u05E2\\x07k\\x02\\x02\\u05E2\\u05E3\", \"\\x07p\\x02\\x02\\u05E3\\u0613\\x07g\\x02\\x02\\u05E4\\u05E5\\x07\", \"n\\x02\\x02\\u05E5\\u05E6\\x07g\\x02\\x02\\u05E6\\u0613\\x07v\\x02\", \"\\x02\\u05E7\\u05E8\\x07o\\x02\\x02\\u05E8\\u05E9\\x07c\\x02\\x02\", \"\\u05E9\\u05EA\\x07v\\x02\\x02\\u05EA\\u05EB\\x07e\\x02\\x02\\u05EB\", \"\\u0613\\x07j\\x02\\x02\\u05EC\\u05ED\\x07p\\x02\\x02\\u05ED\\u05EE\", \"\\x07w\\x02\\x02\\u05EE\\u05EF\\x07n\\x02\\x02\\u05EF\\u0613\\x07\", \"n\\x02\\x02\\u05F0\\u05F1\\x07q\\x02\\x02\\u05F1\\u0613\\x07h\\x02\", \"\\x02\\u05F2\\u05F3\\x07t\\x02\\x02\\u05F3\\u05F4\\x07g\\x02\\x02\", \"\\u05F4\\u05F5\\x07n\\x02\\x02\\u05F5\\u05F6\\x07q\\x02\\x02\\u05F6\", \"\\u05F7\\x07e\\x02\\x02\\u05F7\\u05F8\\x07c\\x02\\x02\\u05F8\\u05F9\", \"\\x07v\\x02\\x02\\u05F9\\u05FA\\x07c\\x02\\x02\\u05FA\\u05FB\\x07\", \"d\\x02\\x02\\u05FB\\u05FC\\x07n\\x02\\x02\\u05FC\\u0613\\x07g\\x02\", \"\\x02\\u05FD\\u05FE\\x07u\\x02\\x02\\u05FE\\u05FF\\x07v\\x02\\x02\", \"\\u05FF\\u0600\\x07c\\x02\\x02\\u0600\\u0601\\x07v\\x02\\x02\\u0601\", \"\\u0602\\x07k\\x02\\x02\\u0602\\u0613\\x07e\\x02\\x02\\u0603\\u0604\", \"\\x07u\\x02\\x02\\u0604\\u0605\\x07y\\x02\\x02\\u0605\\u0606\\x07\", \"k\\x02\\x02\\u0606\\u0607\\x07v\\x02\\x02\\u0607\\u0608\\x07e\\x02\", \"\\x02\\u0608\\u0613\\x07j\\x02\\x02\\u0609\\u060A\\x07v\\x02\\x02\", \"\\u060A\\u060B\\x07t\\x02\\x02\\u060B\\u0613\\x07{\\x02\\x02\\u060C\", \"\\u060D\\x07v\\x02\\x02\\u060D\\u060E\\x07{\\x02\\x02\\u060E\\u060F\", \"\\x07r\\x02\\x02\\u060F\\u0610\\x07g\\x02\\x02\\u0610\\u0611\\x07\", \"q\\x02\\x02\\u0611\\u0613\\x07h\\x02\\x02\\u0612\\u05BA\\x03\\x02\", \"\\x02\\x02\\u0612\\u05C2\\x03\\x02\\x02\\x02\\u0612\\u05C7\\x03\\x02\", \"\\x02\\x02\\u0612\\u05CB\\x03\\x02\\x02\\x02\\u0612\\u05D0\\x03\\x02\", \"\\x02\\x02\\u0612\\u05D7\\x03\\x02\\x02\\x02\\u0612\\u05DC\\x03\\x02\", \"\\x02\\x02\\u0612\\u05DE\\x03\\x02\\x02\\x02\\u0612\\u05E4\\x03\\x02\", \"\\x02\\x02\\u0612\\u05E7\\x03\\x02\\x02\\x02\\u0612\\u05EC\\x03\\x02\", \"\\x02\\x02\\u0612\\u05F0\\x03\\x02\\x02\\x02\\u0612\\u05F2\\x03\\x02\", \"\\x02\\x02\\u0612\\u05FD\\x03\\x02\\x02\\x02\\u0612\\u0603\\x03\\x02\", \"\\x02\\x02\\u0612\\u0609\\x03\\x02\\x02\\x02\\u0612\\u060C\\x03\\x02\", \"\\x02\\x02\\u0613\\xD6\\x03\\x02\\x02\\x02\\u0614\\u0615\\x07c\", \"\\x02\\x02\\u0615\\u0616\\x07p\\x02\\x02\\u0616\\u0617\\x07q\\x02\", \"\\x02\\u0617\\u0618\\x07p\\x02\\x02\\u0618\\u0619\\x07{\\x02\\x02\", \"\\u0619\\u061A\\x07o\\x02\\x02\\u061A\\u061B\\x07q\\x02\\x02\\u061B\", \"\\u061C\\x07w\\x02\\x02\\u061C\\u061D\\x07u\\x02\\x02\\u061D\\xD8\", \"\\x03\\x02\\x02\\x02\\u061E\\u061F\\x07d\\x02\\x02\\u061F\\u0620\", \"\\x07t\\x02\\x02\\u0620\\u0621\\x07g\\x02\\x02\\u0621\\u0622\\x07\", \"c\\x02\\x02\\u0622\\u0623\\x07m\\x02\\x02\\u0623\\xDA\\x03\\x02\", \"\\x02\\x02\\u0624\\u0625\\x07e\\x02\\x02\\u0625\\u0626\\x07q\\x02\", \"\\x02\\u0626\\u0627\\x07p\\x02\\x02\\u0627\\u0628\\x07u\\x02\\x02\", \"\\u0628\\u0629\\x07v\\x02\\x02\\u0629\\u062A\\x07c\\x02\\x02\\u062A\", \"\\u062B\\x07p\\x02\\x02\\u062B\\u062C\\x07v\\x02\\x02\\u062C\\xDC\", \"\\x03\\x02\\x02\\x02\\u062D\\u062E\\x07e\\x02\\x02\\u062E\\u062F\", \"\\x07q\\x02\\x02\\u062F\\u0630\\x07p\\x02\\x02\\u0630\\u0631\\x07\", \"v\\x02\\x02\\u0631\\u0632\\x07k\\x02\\x02\\u0632\\u0633\\x07p\\x02\", \"\\x02\\u0633\\u0634\\x07w\\x02\\x02\\u0634\\u0635\\x07g\\x02\\x02\", \"\\u0635\\xDE\\x03\\x02\\x02\\x02\\u0636\\u0637\\x07g\\x02\\x02\", \"\\u0637\\u0638\\x07z\\x02\\x02\\u0638\\u0639\\x07v\\x02\\x02\\u0639\", \"\\u063A\\x07g\\x02\\x02\\u063A\\u063B\\x07t\\x02\\x02\\u063B\\u063C\", \"\\x07p\\x02\\x02\\u063C\\u063D\\x07c\\x02\\x02\\u063D\\u063E\\x07\", \"n\\x02\\x02\\u063E\\xE0\\x03\\x02\\x02\\x02\\u063F\\u0640\\x07\", \"k\\x02\\x02\\u0640\\u0641\\x07p\\x02\\x02\\u0641\\u0642\\x07f\\x02\", \"\\x02\\u0642\\u0643\\x07g\\x02\\x02\\u0643\\u0644\\x07z\\x02\\x02\", \"\\u0644\\u0645\\x07g\\x02\\x02\\u0645\\u0646\\x07f\\x02\\x02\\u0646\", \"\\xE2\\x03\\x02\\x02\\x02\\u0647\\u0648\\x07k\\x02\\x02\\u0648\", \"\\u0649\\x07p\\x02\\x02\\u0649\\u064A\\x07v\\x02\\x02\\u064A\\u064B\", \"\\x07g\\x02\\x02\\u064B\\u064C\\x07t\\x02\\x02\\u064C\\u064D\\x07\", \"p\\x02\\x02\\u064D\\u064E\\x07c\\x02\\x02\\u064E\\u064F\\x07n\\x02\", \"\\x02\\u064F\\xE4\\x03\\x02\\x02\\x02\\u0650\\u0651\\x07r\\x02\", \"\\x02\\u0651\\u0652\\x07c\\x02\\x02\\u0652\\u0653\\x07{\\x02\\x02\", \"\\u0653\\u0654\\x07c\\x02\\x02\\u0654\\u0655\\x07d\\x02\\x02\\u0655\", \"\\u0656\\x07n\\x02\\x02\\u0656\\u0657\\x07g\\x02\\x02\\u0657\\xE6\", \"\\x03\\x02\\x02\\x02\\u0658\\u0659\\x07r\\x02\\x02\\u0659\\u065A\", \"\\x07t\\x02\\x02\\u065A\\u065B\\x07k\\x02\\x02\\u065B\\u065C\\x07\", \"x\\x02\\x02\\u065C\\u065D\\x07c\\x02\\x02\\u065D\\u065E\\x07v\\x02\", \"\\x02\\u065E\\u065F\\x07g\\x02\\x02\\u065F\\xE8\\x03\\x02\\x02\", \"\\x02\\u0660\\u0661\\x07r\\x02\\x02\\u0661\\u0662\\x07w\\x02\\x02\", \"\\u0662\\u0663\\x07d\\x02\\x02\\u0663\\u0664\\x07n\\x02\\x02\\u0664\", \"\\u0665\\x07k\\x02\\x02\\u0665\\u0666\\x07e\\x02\\x02\\u0666\\xEA\", \"\\x03\\x02\\x02\\x02\\u0667\\u0668\\x07r\\x02\\x02\\u0668\\u0669\", \"\\x07w\\x02\\x02\\u0669\\u066A\\x07t\\x02\\x02\\u066A\\u066B\\x07\", \"g\\x02\\x02\\u066B\\xEC\\x03\\x02\\x02\\x02\\u066C\\u066D\\x07\", \"v\\x02\\x02\\u066D\\u066E\\x07{\\x02\\x02\\u066E\\u066F\\x07r\\x02\", \"\\x02\\u066F\\u0670\\x07g\\x02\\x02\\u0670\\xEE\\x03\\x02\\x02\", \"\\x02\\u0671\\u0672\\x07x\\x02\\x02\\u0672\\u0673\\x07k\\x02\\x02\", \"\\u0673\\u0674\\x07g\\x02\\x02\\u0674\\u0675\\x07y\\x02\\x02\\u0675\", \"\\xF0\\x03\\x02\\x02\\x02\\u0676\\u067A\\x05\\xF3z\\x02\\u0677\", \"\\u0679\\x05\\xF5{\\x02\\u0678\\u0677\\x03\\x02\\x02\\x02\\u0679\", \"\\u067C\\x03\\x02\\x02\\x02\\u067A\\u0678\\x03\\x02\\x02\\x02\\u067A\", \"\\u067B\\x03\\x02\\x02\\x02\\u067B\\xF2\\x03\\x02\\x02\\x02\\u067C\", \"\\u067A\\x03\\x02\\x02\\x02\\u067D\\u067E\\t\\x06\\x02\\x02\\u067E\", \"\\xF4\\x03\\x02\\x02\\x02\\u067F\\u0680\\t\\x07\\x02\\x02\\u0680\", \"\\xF6\\x03\\x02\\x02\\x02\\u0681\\u0685\\x07$\\x02\\x02\\u0682\", \"\\u0684\\x05\\xF9}\\x02\\u0683\\u0682\\x03\\x02\\x02\\x02\\u0684\", \"\\u0687\\x03\\x02\\x02\\x02\\u0685\\u0683\\x03\\x02\\x02\\x02\\u0685\", \"\\u0686\\x03\\x02\\x02\\x02\\u0686\\u0688\\x03\\x02\\x02\\x02\\u0687\", \"\\u0685\\x03\\x02\\x02\\x02\\u0688\\u0692\\x07$\\x02\\x02\\u0689\", \"\\u068D\\x07)\\x02\\x02\\u068A\\u068C\\x05\\xFB~\\x02\\u068B\\u068A\", \"\\x03\\x02\\x02\\x02\\u068C\\u068F\\x03\\x02\\x02\\x02\\u068D\\u068B\", \"\\x03\\x02\\x02\\x02\\u068D\\u068E\\x03\\x02\\x02\\x02\\u068E\\u0690\", \"\\x03\\x02\\x02\\x02\\u068F\\u068D\\x03\\x02\\x02\\x02\\u0690\\u0692\", \"\\x07)\\x02\\x02\\u0691\\u0681\\x03\\x02\\x02\\x02\\u0691\\u0689\", \"\\x03\\x02\\x02\\x02\\u0692\\xF8\\x03\\x02\\x02\\x02\\u0693\\u0697\", \"\\n\\b\\x02\\x02\\u0694\\u0695\\x07^\\x02\\x02\\u0695\\u0697\\x0B\\x02\", \"\\x02\\x02\\u0696\\u0693\\x03\\x02\\x02\\x02\\u0696\\u0694\\x03\\x02\", \"\\x02\\x02\\u0697\\xFA\\x03\\x02\\x02\\x02\\u0698\\u069C\\n\\t\\x02\", \"\\x02\\u0699\\u069A\\x07^\\x02\\x02\\u069A\\u069C\\x0B\\x02\\x02\", \"\\x02\\u069B\\u0698\\x03\\x02\\x02\\x02\\u069B\\u0699\\x03\\x02\\x02\", \"\\x02\\u069C\\xFC\\x03\\x02\\x02\\x02\\u069D\\u069F\\t\\n\\x02\\x02\", \"\\u069E\\u069D\\x03\\x02\\x02\\x02\\u069F\\u06A0\\x03\\x02\\x02\\x02\", \"\\u06A0\\u069E\\x03\\x02\\x02\\x02\\u06A0\\u06A1\\x03\\x02\\x02\\x02\", \"\\u06A1\\u06A2\\x03\\x02\\x02\\x02\\u06A2\\u06A3\\b\\x7F\\x02\\x02\", \"\\u06A3\\xFE\\x03\\x02\\x02\\x02\\u06A4\\u06A5\\x071\\x02\\x02\", \"\\u06A5\\u06A6\\x07,\\x02\\x02\\u06A6\\u06AA\\x03\\x02\\x02\\x02\", \"\\u06A7\\u06A9\\x0B\\x02\\x02\\x02\\u06A8\\u06A7\\x03\\x02\\x02\\x02\", \"\\u06A9\\u06AC\\x03\\x02\\x02\\x02\\u06AA\\u06AB\\x03\\x02\\x02\\x02\", \"\\u06AA\\u06A8\\x03\\x02\\x02\\x02\\u06AB\\u06AD\\x03\\x02\\x02\\x02\", \"\\u06AC\\u06AA\\x03\\x02\\x02\\x02\\u06AD\\u06AE\\x07,\\x02\\x02\", \"\\u06AE\\u06AF\\x071\\x02\\x02\\u06AF\\u06B0\\x03\\x02\\x02\\x02\", \"\\u06B0\\u06B1\\b\\x80\\x03\\x02\\u06B1\\u0100\\x03\\x02\\x02\\x02\", \"\\u06B2\\u06B3\\x071\\x02\\x02\\u06B3\\u06B4\\x071\\x02\\x02\\u06B4\", \"\\u06B8\\x03\\x02\\x02\\x02\\u06B5\\u06B7\\n\\x0B\\x02\\x02\\u06B6\", \"\\u06B5\\x03\\x02\\x02\\x02\\u06B7\\u06BA\\x03\\x02\\x02\\x02\\u06B8\", \"\\u06B6\\x03\\x02\\x02\\x02\\u06B8\\u06B9\\x03\\x02\\x02\\x02\\u06B9\", \"\\u06BB\\x03\\x02\\x02\\x02\\u06BA\\u06B8\\x03\\x02\\x02\\x02\\u06BB\", \"\\u06BC\\b\\x81\\x03\\x02\\u06BC\\u0102\\x03\\x02\\x02\\x02%\\x02\", \"\\u033E\\u0417\\u04F5\\u0505\\u050B\\u050D\\u051F\\u0525\\u0527\\u052C\\u0532\\u0538\", \"\\u0543\\u0547\\u054B\\u054F\\u0553\\u0558\\u0561\\u0566\\u059D\\u05A7\\u05AF\\u05B3\", \"\\u0612\\u067A\\u0685\\u068D\\u0691\\u0696\\u069B\\u06A0\\u06AA\\u06B8\\x04\\b\", \"\\x02\\x02\\x02\\x03\\x02\"].join(\"\");\n\nvar atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);\n\nvar decisionsToDFA = atn.decisionToState.map(function (ds, index) {\n        return new antlr4.dfa.DFA(ds, index);\n});\n\nfunction SolidityLexer(input) {\n        antlr4.Lexer.call(this, input);\n        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());\n        return this;\n}\n\nSolidityLexer.prototype = Object.create(antlr4.Lexer.prototype);\nSolidityLexer.prototype.constructor = SolidityLexer;\n\nObject.defineProperty(SolidityLexer.prototype, \"atn\", {\n        get: function get() {\n                return atn;\n        }\n});\n\nSolidityLexer.EOF = antlr4.Token.EOF;\nSolidityLexer.T__0 = 1;\nSolidityLexer.T__1 = 2;\nSolidityLexer.T__2 = 3;\nSolidityLexer.T__3 = 4;\nSolidityLexer.T__4 = 5;\nSolidityLexer.T__5 = 6;\nSolidityLexer.T__6 = 7;\nSolidityLexer.T__7 = 8;\nSolidityLexer.T__8 = 9;\nSolidityLexer.T__9 = 10;\nSolidityLexer.T__10 = 11;\nSolidityLexer.T__11 = 12;\nSolidityLexer.T__12 = 13;\nSolidityLexer.T__13 = 14;\nSolidityLexer.T__14 = 15;\nSolidityLexer.T__15 = 16;\nSolidityLexer.T__16 = 17;\nSolidityLexer.T__17 = 18;\nSolidityLexer.T__18 = 19;\nSolidityLexer.T__19 = 20;\nSolidityLexer.T__20 = 21;\nSolidityLexer.T__21 = 22;\nSolidityLexer.T__22 = 23;\nSolidityLexer.T__23 = 24;\nSolidityLexer.T__24 = 25;\nSolidityLexer.T__25 = 26;\nSolidityLexer.T__26 = 27;\nSolidityLexer.T__27 = 28;\nSolidityLexer.T__28 = 29;\nSolidityLexer.T__29 = 30;\nSolidityLexer.T__30 = 31;\nSolidityLexer.T__31 = 32;\nSolidityLexer.T__32 = 33;\nSolidityLexer.T__33 = 34;\nSolidityLexer.T__34 = 35;\nSolidityLexer.T__35 = 36;\nSolidityLexer.T__36 = 37;\nSolidityLexer.T__37 = 38;\nSolidityLexer.T__38 = 39;\nSolidityLexer.T__39 = 40;\nSolidityLexer.T__40 = 41;\nSolidityLexer.T__41 = 42;\nSolidityLexer.T__42 = 43;\nSolidityLexer.T__43 = 44;\nSolidityLexer.T__44 = 45;\nSolidityLexer.T__45 = 46;\nSolidityLexer.T__46 = 47;\nSolidityLexer.T__47 = 48;\nSolidityLexer.T__48 = 49;\nSolidityLexer.T__49 = 50;\nSolidityLexer.T__50 = 51;\nSolidityLexer.T__51 = 52;\nSolidityLexer.T__52 = 53;\nSolidityLexer.T__53 = 54;\nSolidityLexer.T__54 = 55;\nSolidityLexer.T__55 = 56;\nSolidityLexer.T__56 = 57;\nSolidityLexer.T__57 = 58;\nSolidityLexer.T__58 = 59;\nSolidityLexer.T__59 = 60;\nSolidityLexer.T__60 = 61;\nSolidityLexer.T__61 = 62;\nSolidityLexer.T__62 = 63;\nSolidityLexer.T__63 = 64;\nSolidityLexer.T__64 = 65;\nSolidityLexer.T__65 = 66;\nSolidityLexer.T__66 = 67;\nSolidityLexer.T__67 = 68;\nSolidityLexer.T__68 = 69;\nSolidityLexer.T__69 = 70;\nSolidityLexer.T__70 = 71;\nSolidityLexer.T__71 = 72;\nSolidityLexer.T__72 = 73;\nSolidityLexer.T__73 = 74;\nSolidityLexer.T__74 = 75;\nSolidityLexer.T__75 = 76;\nSolidityLexer.T__76 = 77;\nSolidityLexer.T__77 = 78;\nSolidityLexer.T__78 = 79;\nSolidityLexer.T__79 = 80;\nSolidityLexer.T__80 = 81;\nSolidityLexer.T__81 = 82;\nSolidityLexer.T__82 = 83;\nSolidityLexer.T__83 = 84;\nSolidityLexer.T__84 = 85;\nSolidityLexer.T__85 = 86;\nSolidityLexer.T__86 = 87;\nSolidityLexer.T__87 = 88;\nSolidityLexer.T__88 = 89;\nSolidityLexer.T__89 = 90;\nSolidityLexer.Int = 91;\nSolidityLexer.Uint = 92;\nSolidityLexer.Byte = 93;\nSolidityLexer.Fixed = 94;\nSolidityLexer.Ufixed = 95;\nSolidityLexer.VersionLiteral = 96;\nSolidityLexer.BooleanLiteral = 97;\nSolidityLexer.DecimalNumber = 98;\nSolidityLexer.HexNumber = 99;\nSolidityLexer.NumberUnit = 100;\nSolidityLexer.HexLiteral = 101;\nSolidityLexer.ReservedKeyword = 102;\nSolidityLexer.AnonymousKeyword = 103;\nSolidityLexer.BreakKeyword = 104;\nSolidityLexer.ConstantKeyword = 105;\nSolidityLexer.ContinueKeyword = 106;\nSolidityLexer.ExternalKeyword = 107;\nSolidityLexer.IndexedKeyword = 108;\nSolidityLexer.InternalKeyword = 109;\nSolidityLexer.PayableKeyword = 110;\nSolidityLexer.PrivateKeyword = 111;\nSolidityLexer.PublicKeyword = 112;\nSolidityLexer.PureKeyword = 113;\nSolidityLexer.TypeKeyword = 114;\nSolidityLexer.ViewKeyword = 115;\nSolidityLexer.Identifier = 116;\nSolidityLexer.StringLiteral = 117;\nSolidityLexer.WS = 118;\nSolidityLexer.COMMENT = 119;\nSolidityLexer.LINE_COMMENT = 120;\n\nSolidityLexer.prototype.channelNames = [\"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\"];\n\nSolidityLexer.prototype.modeNames = [\"DEFAULT_MODE\"];\n\nSolidityLexer.prototype.literalNames = [null, \"'pragma'\", \"';'\", \"'^'\", \"'~'\", \"'>='\", \"'>'\", \"'<'\", \"'<='\", \"'='\", \"'as'\", \"'import'\", \"'*'\", \"'from'\", \"'{'\", \"','\", \"'}'\", \"'contract'\", \"'interface'\", \"'library'\", \"'is'\", \"'('\", \"')'\", \"'using'\", \"'for'\", \"'struct'\", \"'constructor'\", \"'modifier'\", \"'function'\", \"'returns'\", \"'event'\", \"'enum'\", \"'['\", \"']'\", \"'address'\", \"'.'\", \"'mapping'\", \"'=>'\", \"'memory'\", \"'storage'\", \"'calldata'\", \"'if'\", \"'else'\", \"'while'\", \"'assembly'\", \"'do'\", \"'return'\", \"'throw'\", \"'emit'\", \"'var'\", \"'bool'\", \"'string'\", \"'byte'\", \"'++'\", \"'--'\", \"'new'\", \"'+'\", \"'-'\", \"'after'\", \"'delete'\", \"'!'\", \"'**'\", \"'/'\", \"'%'\", \"'<<'\", \"'>>'\", \"'&'\", \"'|'\", \"'=='\", \"'!='\", \"'&&'\", \"'||'\", \"'?'\", \"':'\", \"'|='\", \"'^='\", \"'&='\", \"'<<='\", \"'>>='\", \"'+='\", \"'-='\", \"'*='\", \"'/='\", \"'%='\", \"'let'\", \"':='\", \"'=:'\", \"'switch'\", \"'case'\", \"'default'\", \"'->'\", null, null, null, null, null, null, null, null, null, null, null, null, \"'anonymous'\", \"'break'\", \"'constant'\", \"'continue'\", \"'external'\", \"'indexed'\", \"'internal'\", \"'payable'\", \"'private'\", \"'public'\", \"'pure'\", \"'type'\", \"'view'\"];\n\nSolidityLexer.prototype.symbolicNames = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, \"Int\", \"Uint\", \"Byte\", \"Fixed\", \"Ufixed\", \"VersionLiteral\", \"BooleanLiteral\", \"DecimalNumber\", \"HexNumber\", \"NumberUnit\", \"HexLiteral\", \"ReservedKeyword\", \"AnonymousKeyword\", \"BreakKeyword\", \"ConstantKeyword\", \"ContinueKeyword\", \"ExternalKeyword\", \"IndexedKeyword\", \"InternalKeyword\", \"PayableKeyword\", \"PrivateKeyword\", \"PublicKeyword\", \"PureKeyword\", \"TypeKeyword\", \"ViewKeyword\", \"Identifier\", \"StringLiteral\", \"WS\", \"COMMENT\", \"LINE_COMMENT\"];\n\nSolidityLexer.prototype.ruleNames = [\"T__0\", \"T__1\", \"T__2\", \"T__3\", \"T__4\", \"T__5\", \"T__6\", \"T__7\", \"T__8\", \"T__9\", \"T__10\", \"T__11\", \"T__12\", \"T__13\", \"T__14\", \"T__15\", \"T__16\", \"T__17\", \"T__18\", \"T__19\", \"T__20\", \"T__21\", \"T__22\", \"T__23\", \"T__24\", \"T__25\", \"T__26\", \"T__27\", \"T__28\", \"T__29\", \"T__30\", \"T__31\", \"T__32\", \"T__33\", \"T__34\", \"T__35\", \"T__36\", \"T__37\", \"T__38\", \"T__39\", \"T__40\", \"T__41\", \"T__42\", \"T__43\", \"T__44\", \"T__45\", \"T__46\", \"T__47\", \"T__48\", \"T__49\", \"T__50\", \"T__51\", \"T__52\", \"T__53\", \"T__54\", \"T__55\", \"T__56\", \"T__57\", \"T__58\", \"T__59\", \"T__60\", \"T__61\", \"T__62\", \"T__63\", \"T__64\", \"T__65\", \"T__66\", \"T__67\", \"T__68\", \"T__69\", \"T__70\", \"T__71\", \"T__72\", \"T__73\", \"T__74\", \"T__75\", \"T__76\", \"T__77\", \"T__78\", \"T__79\", \"T__80\", \"T__81\", \"T__82\", \"T__83\", \"T__84\", \"T__85\", \"T__86\", \"T__87\", \"T__88\", \"T__89\", \"Int\", \"Uint\", \"Byte\", \"Fixed\", \"Ufixed\", \"VersionLiteral\", \"BooleanLiteral\", \"DecimalNumber\", \"DecimalDigits\", \"HexNumber\", \"HexDigits\", \"NumberUnit\", \"HexLiteral\", \"HexPair\", \"HexCharacter\", \"ReservedKeyword\", \"AnonymousKeyword\", \"BreakKeyword\", \"ConstantKeyword\", \"ContinueKeyword\", \"ExternalKeyword\", \"IndexedKeyword\", \"InternalKeyword\", \"PayableKeyword\", \"PrivateKeyword\", \"PublicKeyword\", \"PureKeyword\", \"TypeKeyword\", \"ViewKeyword\", \"Identifier\", \"IdentifierStart\", \"IdentifierPart\", \"StringLiteral\", \"DoubleQuotedStringCharacter\", \"SingleQuotedStringCharacter\", \"WS\", \"COMMENT\", \"LINE_COMMENT\"];\n\nSolidityLexer.prototype.grammarFileName = \"Solidity.g4\";\n\nexports.SolidityLexer = SolidityLexer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/lib/SolidityLexer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/lib/SolidityListener.js":
/*!*************************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/lib/SolidityListener.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n// Generated from solidity-antlr4/Solidity.g4 by ANTLR 4.7.2\n// jshint ignore: start\nvar antlr4 = __webpack_require__(/*! ../antlr4/index */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/index.js\");\n\n// This class defines a complete listener for a parse tree produced by SolidityParser.\nfunction SolidityListener() {\n\tantlr4.tree.ParseTreeListener.call(this);\n\treturn this;\n}\n\nSolidityListener.prototype = Object.create(antlr4.tree.ParseTreeListener.prototype);\nSolidityListener.prototype.constructor = SolidityListener;\n\n// Enter a parse tree produced by SolidityParser#sourceUnit.\nSolidityListener.prototype.enterSourceUnit = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#sourceUnit.\nSolidityListener.prototype.exitSourceUnit = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#pragmaDirective.\nSolidityListener.prototype.enterPragmaDirective = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#pragmaDirective.\nSolidityListener.prototype.exitPragmaDirective = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#pragmaName.\nSolidityListener.prototype.enterPragmaName = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#pragmaName.\nSolidityListener.prototype.exitPragmaName = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#pragmaValue.\nSolidityListener.prototype.enterPragmaValue = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#pragmaValue.\nSolidityListener.prototype.exitPragmaValue = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#version.\nSolidityListener.prototype.enterVersion = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#version.\nSolidityListener.prototype.exitVersion = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#versionOperator.\nSolidityListener.prototype.enterVersionOperator = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#versionOperator.\nSolidityListener.prototype.exitVersionOperator = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#versionConstraint.\nSolidityListener.prototype.enterVersionConstraint = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#versionConstraint.\nSolidityListener.prototype.exitVersionConstraint = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#importDeclaration.\nSolidityListener.prototype.enterImportDeclaration = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#importDeclaration.\nSolidityListener.prototype.exitImportDeclaration = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#importDirective.\nSolidityListener.prototype.enterImportDirective = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#importDirective.\nSolidityListener.prototype.exitImportDirective = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#contractDefinition.\nSolidityListener.prototype.enterContractDefinition = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#contractDefinition.\nSolidityListener.prototype.exitContractDefinition = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#inheritanceSpecifier.\nSolidityListener.prototype.enterInheritanceSpecifier = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#inheritanceSpecifier.\nSolidityListener.prototype.exitInheritanceSpecifier = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#contractPart.\nSolidityListener.prototype.enterContractPart = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#contractPart.\nSolidityListener.prototype.exitContractPart = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#stateVariableDeclaration.\nSolidityListener.prototype.enterStateVariableDeclaration = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#stateVariableDeclaration.\nSolidityListener.prototype.exitStateVariableDeclaration = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#usingForDeclaration.\nSolidityListener.prototype.enterUsingForDeclaration = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#usingForDeclaration.\nSolidityListener.prototype.exitUsingForDeclaration = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#structDefinition.\nSolidityListener.prototype.enterStructDefinition = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#structDefinition.\nSolidityListener.prototype.exitStructDefinition = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#constructorDefinition.\nSolidityListener.prototype.enterConstructorDefinition = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#constructorDefinition.\nSolidityListener.prototype.exitConstructorDefinition = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#modifierDefinition.\nSolidityListener.prototype.enterModifierDefinition = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#modifierDefinition.\nSolidityListener.prototype.exitModifierDefinition = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#modifierInvocation.\nSolidityListener.prototype.enterModifierInvocation = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#modifierInvocation.\nSolidityListener.prototype.exitModifierInvocation = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#functionDefinition.\nSolidityListener.prototype.enterFunctionDefinition = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#functionDefinition.\nSolidityListener.prototype.exitFunctionDefinition = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#returnParameters.\nSolidityListener.prototype.enterReturnParameters = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#returnParameters.\nSolidityListener.prototype.exitReturnParameters = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#modifierList.\nSolidityListener.prototype.enterModifierList = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#modifierList.\nSolidityListener.prototype.exitModifierList = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#eventDefinition.\nSolidityListener.prototype.enterEventDefinition = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#eventDefinition.\nSolidityListener.prototype.exitEventDefinition = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#enumValue.\nSolidityListener.prototype.enterEnumValue = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#enumValue.\nSolidityListener.prototype.exitEnumValue = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#enumDefinition.\nSolidityListener.prototype.enterEnumDefinition = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#enumDefinition.\nSolidityListener.prototype.exitEnumDefinition = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#parameterList.\nSolidityListener.prototype.enterParameterList = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#parameterList.\nSolidityListener.prototype.exitParameterList = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#parameter.\nSolidityListener.prototype.enterParameter = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#parameter.\nSolidityListener.prototype.exitParameter = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#eventParameterList.\nSolidityListener.prototype.enterEventParameterList = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#eventParameterList.\nSolidityListener.prototype.exitEventParameterList = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#eventParameter.\nSolidityListener.prototype.enterEventParameter = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#eventParameter.\nSolidityListener.prototype.exitEventParameter = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#functionTypeParameterList.\nSolidityListener.prototype.enterFunctionTypeParameterList = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#functionTypeParameterList.\nSolidityListener.prototype.exitFunctionTypeParameterList = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#functionTypeParameter.\nSolidityListener.prototype.enterFunctionTypeParameter = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#functionTypeParameter.\nSolidityListener.prototype.exitFunctionTypeParameter = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#variableDeclaration.\nSolidityListener.prototype.enterVariableDeclaration = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#variableDeclaration.\nSolidityListener.prototype.exitVariableDeclaration = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#typeName.\nSolidityListener.prototype.enterTypeName = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#typeName.\nSolidityListener.prototype.exitTypeName = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#userDefinedTypeName.\nSolidityListener.prototype.enterUserDefinedTypeName = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#userDefinedTypeName.\nSolidityListener.prototype.exitUserDefinedTypeName = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#mapping.\nSolidityListener.prototype.enterMapping = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#mapping.\nSolidityListener.prototype.exitMapping = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#functionTypeName.\nSolidityListener.prototype.enterFunctionTypeName = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#functionTypeName.\nSolidityListener.prototype.exitFunctionTypeName = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#storageLocation.\nSolidityListener.prototype.enterStorageLocation = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#storageLocation.\nSolidityListener.prototype.exitStorageLocation = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#stateMutability.\nSolidityListener.prototype.enterStateMutability = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#stateMutability.\nSolidityListener.prototype.exitStateMutability = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#block.\nSolidityListener.prototype.enterBlock = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#block.\nSolidityListener.prototype.exitBlock = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#statement.\nSolidityListener.prototype.enterStatement = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#statement.\nSolidityListener.prototype.exitStatement = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#expressionStatement.\nSolidityListener.prototype.enterExpressionStatement = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#expressionStatement.\nSolidityListener.prototype.exitExpressionStatement = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#ifStatement.\nSolidityListener.prototype.enterIfStatement = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#ifStatement.\nSolidityListener.prototype.exitIfStatement = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#whileStatement.\nSolidityListener.prototype.enterWhileStatement = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#whileStatement.\nSolidityListener.prototype.exitWhileStatement = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#simpleStatement.\nSolidityListener.prototype.enterSimpleStatement = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#simpleStatement.\nSolidityListener.prototype.exitSimpleStatement = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#forStatement.\nSolidityListener.prototype.enterForStatement = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#forStatement.\nSolidityListener.prototype.exitForStatement = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#inlineAssemblyStatement.\nSolidityListener.prototype.enterInlineAssemblyStatement = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#inlineAssemblyStatement.\nSolidityListener.prototype.exitInlineAssemblyStatement = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#doWhileStatement.\nSolidityListener.prototype.enterDoWhileStatement = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#doWhileStatement.\nSolidityListener.prototype.exitDoWhileStatement = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#continueStatement.\nSolidityListener.prototype.enterContinueStatement = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#continueStatement.\nSolidityListener.prototype.exitContinueStatement = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#breakStatement.\nSolidityListener.prototype.enterBreakStatement = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#breakStatement.\nSolidityListener.prototype.exitBreakStatement = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#returnStatement.\nSolidityListener.prototype.enterReturnStatement = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#returnStatement.\nSolidityListener.prototype.exitReturnStatement = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#throwStatement.\nSolidityListener.prototype.enterThrowStatement = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#throwStatement.\nSolidityListener.prototype.exitThrowStatement = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#emitStatement.\nSolidityListener.prototype.enterEmitStatement = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#emitStatement.\nSolidityListener.prototype.exitEmitStatement = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#variableDeclarationStatement.\nSolidityListener.prototype.enterVariableDeclarationStatement = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#variableDeclarationStatement.\nSolidityListener.prototype.exitVariableDeclarationStatement = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#variableDeclarationList.\nSolidityListener.prototype.enterVariableDeclarationList = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#variableDeclarationList.\nSolidityListener.prototype.exitVariableDeclarationList = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#identifierList.\nSolidityListener.prototype.enterIdentifierList = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#identifierList.\nSolidityListener.prototype.exitIdentifierList = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#elementaryTypeName.\nSolidityListener.prototype.enterElementaryTypeName = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#elementaryTypeName.\nSolidityListener.prototype.exitElementaryTypeName = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#expression.\nSolidityListener.prototype.enterExpression = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#expression.\nSolidityListener.prototype.exitExpression = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#primaryExpression.\nSolidityListener.prototype.enterPrimaryExpression = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#primaryExpression.\nSolidityListener.prototype.exitPrimaryExpression = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#expressionList.\nSolidityListener.prototype.enterExpressionList = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#expressionList.\nSolidityListener.prototype.exitExpressionList = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#nameValueList.\nSolidityListener.prototype.enterNameValueList = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#nameValueList.\nSolidityListener.prototype.exitNameValueList = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#nameValue.\nSolidityListener.prototype.enterNameValue = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#nameValue.\nSolidityListener.prototype.exitNameValue = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#functionCallArguments.\nSolidityListener.prototype.enterFunctionCallArguments = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#functionCallArguments.\nSolidityListener.prototype.exitFunctionCallArguments = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#functionCall.\nSolidityListener.prototype.enterFunctionCall = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#functionCall.\nSolidityListener.prototype.exitFunctionCall = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#assemblyBlock.\nSolidityListener.prototype.enterAssemblyBlock = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#assemblyBlock.\nSolidityListener.prototype.exitAssemblyBlock = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#assemblyItem.\nSolidityListener.prototype.enterAssemblyItem = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#assemblyItem.\nSolidityListener.prototype.exitAssemblyItem = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#assemblyExpression.\nSolidityListener.prototype.enterAssemblyExpression = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#assemblyExpression.\nSolidityListener.prototype.exitAssemblyExpression = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#assemblyCall.\nSolidityListener.prototype.enterAssemblyCall = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#assemblyCall.\nSolidityListener.prototype.exitAssemblyCall = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#assemblyLocalDefinition.\nSolidityListener.prototype.enterAssemblyLocalDefinition = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#assemblyLocalDefinition.\nSolidityListener.prototype.exitAssemblyLocalDefinition = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#assemblyAssignment.\nSolidityListener.prototype.enterAssemblyAssignment = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#assemblyAssignment.\nSolidityListener.prototype.exitAssemblyAssignment = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#assemblyIdentifierOrList.\nSolidityListener.prototype.enterAssemblyIdentifierOrList = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#assemblyIdentifierOrList.\nSolidityListener.prototype.exitAssemblyIdentifierOrList = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#assemblyIdentifierList.\nSolidityListener.prototype.enterAssemblyIdentifierList = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#assemblyIdentifierList.\nSolidityListener.prototype.exitAssemblyIdentifierList = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#assemblyStackAssignment.\nSolidityListener.prototype.enterAssemblyStackAssignment = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#assemblyStackAssignment.\nSolidityListener.prototype.exitAssemblyStackAssignment = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#labelDefinition.\nSolidityListener.prototype.enterLabelDefinition = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#labelDefinition.\nSolidityListener.prototype.exitLabelDefinition = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#assemblySwitch.\nSolidityListener.prototype.enterAssemblySwitch = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#assemblySwitch.\nSolidityListener.prototype.exitAssemblySwitch = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#assemblyCase.\nSolidityListener.prototype.enterAssemblyCase = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#assemblyCase.\nSolidityListener.prototype.exitAssemblyCase = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#assemblyFunctionDefinition.\nSolidityListener.prototype.enterAssemblyFunctionDefinition = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#assemblyFunctionDefinition.\nSolidityListener.prototype.exitAssemblyFunctionDefinition = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#assemblyFunctionReturns.\nSolidityListener.prototype.enterAssemblyFunctionReturns = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#assemblyFunctionReturns.\nSolidityListener.prototype.exitAssemblyFunctionReturns = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#assemblyFor.\nSolidityListener.prototype.enterAssemblyFor = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#assemblyFor.\nSolidityListener.prototype.exitAssemblyFor = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#assemblyIf.\nSolidityListener.prototype.enterAssemblyIf = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#assemblyIf.\nSolidityListener.prototype.exitAssemblyIf = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#assemblyLiteral.\nSolidityListener.prototype.enterAssemblyLiteral = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#assemblyLiteral.\nSolidityListener.prototype.exitAssemblyLiteral = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#subAssembly.\nSolidityListener.prototype.enterSubAssembly = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#subAssembly.\nSolidityListener.prototype.exitSubAssembly = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#tupleExpression.\nSolidityListener.prototype.enterTupleExpression = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#tupleExpression.\nSolidityListener.prototype.exitTupleExpression = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#elementaryTypeNameExpression.\nSolidityListener.prototype.enterElementaryTypeNameExpression = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#elementaryTypeNameExpression.\nSolidityListener.prototype.exitElementaryTypeNameExpression = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#numberLiteral.\nSolidityListener.prototype.enterNumberLiteral = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#numberLiteral.\nSolidityListener.prototype.exitNumberLiteral = function (ctx) {};\n\n// Enter a parse tree produced by SolidityParser#identifier.\nSolidityListener.prototype.enterIdentifier = function (ctx) {};\n\n// Exit a parse tree produced by SolidityParser#identifier.\nSolidityListener.prototype.exitIdentifier = function (ctx) {};\n\nexports.SolidityListener = SolidityListener;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/lib/SolidityListener.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/lib/SolidityParser.js":
/*!***********************************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/lib/SolidityParser.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n// Generated from solidity-antlr4/Solidity.g4 by ANTLR 4.7.2\n// jshint ignore: start\nvar antlr4 = __webpack_require__(/*! ../antlr4/index */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/antlr4/index.js\");\nvar SolidityListener = (__webpack_require__(/*! ./SolidityListener */ \"(rsc)/./node_modules/solidity-parser-antlr/dist/lib/SolidityListener.js\").SolidityListener);\nvar grammarFileName = \"Solidity.g4\";\n\nvar serializedATN = ['\\x03\\u608B\\uA72A\\u8133\\uB9ED\\u417C\\u3BE7\\u7786\\u5964', '\\x03z\\u03C0\\x04\\x02\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t', '\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\\x07\\t\\x07\\x04', '\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\x0B\\t\\x0B\\x04\\f\\t\\f\\x04', '\\r\\t\\r\\x04\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x04\\x10\\t\\x10\\x04', '\\x11\\t\\x11\\x04\\x12\\t\\x12\\x04\\x13\\t\\x13\\x04\\x14\\t', '\\x14\\x04\\x15\\t\\x15\\x04\\x16\\t\\x16\\x04\\x17\\t\\x17\\x04', '\\x18\\t\\x18\\x04\\x19\\t\\x19\\x04\\x1A\\t\\x1A\\x04\\x1B\\t', '\\x1B\\x04\\x1C\\t\\x1C\\x04\\x1D\\t\\x1D\\x04\\x1E\\t\\x1E\\x04', '\\x1F\\t\\x1F\\x04 \\t \\x04!\\t!\\x04\"\\t\"\\x04#\\t#\\x04$\\t$\\x04', '%\\t%\\x04&\\t&\\x04\\'\\t\\'\\x04(\\t(\\x04)\\t)\\x04*\\t*\\x04+\\t+\\x04', ',\\t,\\x04-\\t-\\x04.\\t.\\x04/\\t/\\x040\\t0\\x041\\t1\\x042\\t2\\x04', '3\\t3\\x044\\t4\\x045\\t5\\x046\\t6\\x047\\t7\\x048\\t8\\x049\\t9\\x04', ':\\t:\\x04;\\t;\\x04<\\t<\\x04=\\t=\\x04>\\t>\\x04?\\t?\\x04@\\t@\\x04', 'A\\tA\\x04B\\tB\\x04C\\tC\\x04D\\tD\\x04E\\tE\\x04F\\tF\\x04G\\tG\\x04', 'H\\tH\\x04I\\tI\\x04J\\tJ\\x04K\\tK\\x04L\\tL\\x04M\\tM\\x04N\\tN\\x04', 'O\\tO\\x04P\\tP\\x04Q\\tQ\\x04R\\tR\\x04S\\tS\\x04T\\tT\\x04U\\tU\\x03', '\\x02\\x03\\x02\\x03\\x02\\x07\\x02\\xAE\\n\\x02\\f\\x02\\x0E', '\\x02\\xB1\\x0B\\x02\\x03\\x02\\x03\\x02\\x03\\x03\\x03\\x03', '\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x04\\x03\\x04\\x03\\x05', '\\x03\\x05\\x05\\x05\\xBE\\n\\x05\\x03\\x06\\x03\\x06\\x05', '\\x06\\xC2\\n\\x06\\x03\\x07\\x03\\x07\\x03\\b\\x05\\b\\xC7\\n', '\\b\\x03\\b\\x03\\b\\x03\\t\\x03\\t\\x03\\t\\x05\\t\\xCE\\n\\t\\x03\\n', '\\x03\\n\\x03\\n\\x03\\n\\x05\\n\\xD4\\n\\n\\x03\\n\\x03\\n\\x03\\n\\x03', '\\n\\x05\\n\\xDA\\n\\n\\x03\\n\\x03\\n\\x05\\n\\xDE\\n\\n\\x03\\n\\x03', '\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x07\\n\\xE8\\n\\n', '\\f\\n\\x0E\\n\\xEB\\x0B\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x05', '\\n\\xF2\\n\\n\\x03\\x0B\\x03\\x0B\\x03\\x0B\\x03\\x0B\\x03\\x0B', '\\x03\\x0B\\x07\\x0B\\xFA\\n\\x0B\\f\\x0B\\x0E\\x0B\\xFD\\x0B', '\\x0B\\x05\\x0B\\xFF\\n\\x0B\\x03\\x0B\\x03\\x0B\\x07\\x0B', '\\u0103\\n\\x0B\\f\\x0B\\x0E\\x0B\\u0106\\x0B\\x0B\\x03\\x0B\\x03', '\\x0B\\x03\\f\\x03\\f\\x03\\f\\x05\\f\\u010D\\n\\f\\x03\\f\\x05\\f\\u0110', '\\n\\f\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r', '\\x05\\r\\u011A\\n\\r\\x03\\x0E\\x03\\x0E\\x07\\x0E\\u011E\\n\\x0E', '\\f\\x0E\\x0E\\x0E\\u0121\\x0B\\x0E\\x03\\x0E\\x03\\x0E\\x03', '\\x0E\\x05\\x0E\\u0126\\n\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0F', '\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x05\\x0F\\u012F\\n', '\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x10\\x03\\x10\\x03\\x10\\x03', '\\x10\\x03\\x10\\x03\\x10\\x03\\x10\\x03\\x10\\x07\\x10\\u013B', '\\n\\x10\\f\\x10\\x0E\\x10\\u013E\\x0B\\x10\\x05\\x10\\u0140\\n\\x10', '\\x03\\x10\\x03\\x10\\x03\\x11\\x03\\x11\\x03\\x11\\x03\\x11', '\\x03\\x11\\x03\\x12\\x03\\x12\\x03\\x12\\x05\\x12\\u014C\\n', '\\x12\\x03\\x12\\x03\\x12\\x03\\x13\\x03\\x13\\x03\\x13\\x05', '\\x13\\u0153\\n\\x13\\x03\\x13\\x05\\x13\\u0156\\n\\x13\\x03\\x14', '\\x03\\x14\\x05\\x14\\u015A\\n\\x14\\x03\\x14\\x03\\x14\\x03', '\\x14\\x05\\x14\\u015F\\n\\x14\\x03\\x14\\x03\\x14\\x05\\x14', '\\u0163\\n\\x14\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x16\\x03', '\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x07\\x16\\u016E', '\\n\\x16\\f\\x16\\x0E\\x16\\u0171\\x0B\\x16\\x03\\x17\\x03\\x17', '\\x03\\x17\\x03\\x17\\x05\\x17\\u0177\\n\\x17\\x03\\x17\\x03', '\\x17\\x03\\x18\\x03\\x18\\x03\\x19\\x03\\x19\\x03\\x19\\x03', '\\x19\\x05\\x19\\u0181\\n\\x19\\x03\\x19\\x03\\x19\\x07\\x19', '\\u0185\\n\\x19\\f\\x19\\x0E\\x19\\u0188\\x0B\\x19\\x03\\x19\\x03', '\\x19\\x03\\x1A\\x03\\x1A\\x03\\x1A\\x03\\x1A\\x07\\x1A\\u0190', '\\n\\x1A\\f\\x1A\\x0E\\x1A\\u0193\\x0B\\x1A\\x05\\x1A\\u0195\\n\\x1A', '\\x03\\x1A\\x03\\x1A\\x03\\x1B\\x03\\x1B\\x05\\x1B\\u019B\\n', '\\x1B\\x03\\x1B\\x05\\x1B\\u019E\\n\\x1B\\x03\\x1C\\x03\\x1C', '\\x03\\x1C\\x03\\x1C\\x07\\x1C\\u01A4\\n\\x1C\\f\\x1C\\x0E\\x1C', '\\u01A7\\x0B\\x1C\\x05\\x1C\\u01A9\\n\\x1C\\x03\\x1C\\x03\\x1C', '\\x03\\x1D\\x03\\x1D\\x05\\x1D\\u01AF\\n\\x1D\\x03\\x1D\\x05', '\\x1D\\u01B2\\n\\x1D\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E', '\\x07\\x1E\\u01B8\\n\\x1E\\f\\x1E\\x0E\\x1E\\u01BB\\x0B\\x1E\\x05', '\\x1E\\u01BD\\n\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1F\\x03\\x1F', '\\x05\\x1F\\u01C3\\n\\x1F\\x03 \\x03 \\x05 \\u01C7\\n \\x03 \\x03', ' \\x03!\\x03!\\x03!\\x03!\\x03!\\x03!\\x03!\\x05!\\u01D2\\n!\\x03', '!\\x03!\\x03!\\x05!\\u01D7\\n!\\x03!\\x07!\\u01DA\\n!\\f!\\x0E!\\u01DD', '\\x0B!\\x03\"\\x03\"\\x03\"\\x07\"\\u01E2\\n\"\\f\"\\x0E\"\\u01E5', '\\x0B\"\\x03#\\x03#\\x03#\\x03#\\x03#\\x03#\\x03#\\x03$\\x03', '$\\x03$\\x03$\\x03$\\x07$\\u01F3\\n$\\f$\\x0E$\\u01F6\\x0B$\\x03', '$\\x03$\\x05$\\u01FA\\n$\\x03%\\x03%\\x03&\\x03&\\x03\\'\\x03\\'', '\\x07\\'\\u0202\\n\\'\\f\\'\\x0E\\'\\u0205\\x0B\\'\\x03\\'\\x03\\'\\x03(', '\\x03(\\x03(\\x03(\\x03(\\x03(\\x03(\\x03(\\x03(\\x03(\\x03', '(\\x03(\\x05(\\u0215\\n(\\x03)\\x03)\\x03)\\x03*\\x03*\\x03*\\x03', '*\\x03*\\x03*\\x03*\\x05*\\u0221\\n*\\x03+\\x03+\\x03+\\x03+\\x03', '+\\x03+\\x03,\\x03,\\x05,\\u022B\\n,\\x03-\\x03-\\x03-\\x03-\\x05', '-\\u0231\\n-\\x03-\\x03-\\x05-\\u0235\\n-\\x03-\\x05-\\u0238\\n-\\x03', '-\\x03-\\x03-\\x03.\\x03.\\x05.\\u023F\\n.\\x03.\\x03.\\x03/\\x03', '/\\x03/\\x03/\\x03/\\x03/\\x03/\\x03/\\x030\\x030\\x030\\x03', '1\\x031\\x031\\x032\\x032\\x052\\u0253\\n2\\x032\\x032\\x033\\x03', '3\\x033\\x034\\x034\\x034\\x034\\x035\\x035\\x035\\x035\\x03', '5\\x035\\x035\\x055\\u0265\\n5\\x035\\x035\\x055\\u0269\\n5\\x03', '5\\x035\\x036\\x056\\u026E\\n6\\x036\\x036\\x056\\u0272\\n6\\x07', '6\\u0274\\n6\\f6\\x0E6\\u0277\\x0B6\\x037\\x037\\x057\\u027B\\n7\\x03', '7\\x077\\u027E\\n7\\f7\\x0E7\\u0281\\x0B7\\x037\\x057\\u0284\\n7\\x03', '7\\x037\\x038\\x038\\x039\\x039\\x039\\x039\\x039\\x039\\x03', '9\\x039\\x039\\x039\\x039\\x039\\x039\\x039\\x039\\x039\\x03', '9\\x039\\x059\\u029C\\n9\\x039\\x039\\x039\\x039\\x039\\x039\\x03', '9\\x039\\x039\\x039\\x039\\x039\\x039\\x039\\x039\\x039\\x03', '9\\x039\\x039\\x039\\x039\\x039\\x039\\x039\\x039\\x039\\x03', '9\\x039\\x039\\x039\\x039\\x039\\x039\\x039\\x039\\x039\\x03', '9\\x039\\x039\\x039\\x039\\x039\\x039\\x039\\x039\\x039\\x03', '9\\x039\\x039\\x039\\x039\\x039\\x039\\x039\\x039\\x039\\x03', '9\\x079\\u02D7\\n9\\f9\\x0E9\\u02DA\\x0B9\\x03:\\x03:\\x03:\\x03', ':\\x03:\\x03:\\x03:\\x05:\\u02E3\\n:\\x03:\\x03:\\x03:\\x03:\\x03', ':\\x05:\\u02EA\\n:\\x05:\\u02EC\\n:\\x03;\\x03;\\x03;\\x07;\\u02F1', '\\n;\\f;\\x0E;\\u02F4\\x0B;\\x03<\\x03<\\x03<\\x07<\\u02F9\\n<\\f<\\x0E', '<\\u02FC\\x0B<\\x03<\\x05<\\u02FF\\n<\\x03=\\x03=\\x03=\\x03=\\x03', '>\\x03>\\x05>\\u0307\\n>\\x03>\\x03>\\x05>\\u030B\\n>\\x05>\\u030D', '\\n>\\x03?\\x03?\\x03?\\x03?\\x03?\\x03@\\x03@\\x07@\\u0316\\n', '@\\f@\\x0E@\\u0319\\x0B@\\x03@\\x03@\\x03A\\x03A\\x03A\\x03A\\x03', 'A\\x03A\\x03A\\x03A\\x03A\\x03A\\x03A\\x03A\\x03A\\x03A\\x03', 'A\\x03A\\x03A\\x05A\\u032E\\nA\\x03B\\x03B\\x05B\\u0332\\nB\\x03', 'C\\x03C\\x03C\\x03C\\x05C\\u0338\\nC\\x03C\\x03C\\x05C\\u033C\\n', 'C\\x03C\\x03C\\x07C\\u0340\\nC\\fC\\x0EC\\u0343\\x0BC\\x03C\\x05', 'C\\u0346\\nC\\x03D\\x03D\\x03D\\x03D\\x05D\\u034C\\nD\\x03E\\x03', 'E\\x03E\\x03E\\x03F\\x03F\\x03F\\x03F\\x03F\\x05F\\u0357\\nF\\x03', 'G\\x03G\\x03G\\x07G\\u035C\\nG\\fG\\x0EG\\u035F\\x0BG\\x03H\\x03', 'H\\x03H\\x03I\\x03I\\x03I\\x03J\\x03J\\x03J\\x07J\\u036A\\nJ\\f', 'J\\x0EJ\\u036D\\x0BJ\\x03K\\x03K\\x03K\\x03K\\x03K\\x03K\\x05', 'K\\u0375\\nK\\x03L\\x03L\\x03L\\x03L\\x05L\\u037B\\nL\\x03L\\x03', 'L\\x05L\\u037F\\nL\\x03L\\x03L\\x03M\\x03M\\x03M\\x03N\\x03N\\x03', 'N\\x05N\\u0389\\nN\\x03N\\x03N\\x03N\\x05N\\u038E\\nN\\x03N\\x03', 'N\\x03O\\x03O\\x03O\\x03O\\x03P\\x03P\\x03Q\\x03Q\\x03Q\\x03', 'Q\\x03R\\x03R\\x05R\\u039E\\nR\\x03R\\x03R\\x05R\\u03A2\\nR\\x07', 'R\\u03A4\\nR\\fR\\x0ER\\u03A7\\x0BR\\x03R\\x03R\\x03R\\x03R\\x03', 'R\\x07R\\u03AE\\nR\\fR\\x0ER\\u03B1\\x0BR\\x05R\\u03B3\\nR\\x03R\\x05', 'R\\u03B6\\nR\\x03S\\x03S\\x03T\\x03T\\x05T\\u03BC\\nT\\x03U\\x03', 'U\\x03U\\x02\\x04@pV\\x02\\x04\\x06\\b\\n\\f\\x0E\\x10\\x12\\x14', '\\x16\\x18\\x1A\\x1C\\x1E \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\\\^`bd', 'fhjlnprtvxz|~\\x80\\x82\\x84\\x86\\x88\\x8A\\x8C\\x8E\\x90', '\\x92\\x94\\x96\\x98\\x9A\\x9C\\x9E\\xA0\\xA2\\xA4\\xA6\\xA8', '\\x02\\x13\\x03\\x02\\x05\\x0B\\x03\\x02\\x13\\x15\\x05\\x02', 'kkooqr\\x03\\x02(*\\x06\\x02kkppssuu\\x05\\x02$$36]a\\x03\\x02', '78\\x03\\x02:;\\x03\\x02<=\\x04\\x02\\x0E\\x0E@A\\x03\\x02', 'BC\\x03\\x02\\x07\\n\\x03\\x02FG\\x04\\x02\\x0B\\x0BLU\\x05', '\\x02deggww\\x03\\x02de\\x05\\x02\\x0F\\x0F**vv\\x02\\u041A\\x02', '\\xAF\\x03\\x02\\x02\\x02\\x04\\xB4\\x03\\x02\\x02\\x02\\x06', '\\xB9\\x03\\x02\\x02\\x02\\b\\xBD\\x03\\x02\\x02\\x02\\n\\xBF', '\\x03\\x02\\x02\\x02\\f\\xC3\\x03\\x02\\x02\\x02\\x0E\\xC6', '\\x03\\x02\\x02\\x02\\x10\\xCA\\x03\\x02\\x02\\x02\\x12\\xF1', '\\x03\\x02\\x02\\x02\\x14\\xF3\\x03\\x02\\x02\\x02\\x16\\u0109', '\\x03\\x02\\x02\\x02\\x18\\u0119\\x03\\x02\\x02\\x02\\x1A\\u011B', '\\x03\\x02\\x02\\x02\\x1C\\u0129\\x03\\x02\\x02\\x02\\x1E\\u0132', '\\x03\\x02\\x02\\x02 \\u0143\\x03\\x02\\x02\\x02\"\\u0148\\x03', '\\x02\\x02\\x02$\\u014F\\x03\\x02\\x02\\x02&\\u0157\\x03\\x02', '\\x02\\x02(\\u0164\\x03\\x02\\x02\\x02*\\u016F\\x03\\x02\\x02', '\\x02,\\u0172\\x03\\x02\\x02\\x02.\\u017A\\x03\\x02\\x02\\x02', '0\\u017C\\x03\\x02\\x02\\x022\\u018B\\x03\\x02\\x02\\x024\\u0198', '\\x03\\x02\\x02\\x026\\u019F\\x03\\x02\\x02\\x028\\u01AC\\x03', '\\x02\\x02\\x02:\\u01B3\\x03\\x02\\x02\\x02<\\u01C0\\x03\\x02', '\\x02\\x02>\\u01C4\\x03\\x02\\x02\\x02@\\u01D1\\x03\\x02\\x02', '\\x02B\\u01DE\\x03\\x02\\x02\\x02D\\u01E6\\x03\\x02\\x02\\x02', 'F\\u01ED\\x03\\x02\\x02\\x02H\\u01FB\\x03\\x02\\x02\\x02J\\u01FD', '\\x03\\x02\\x02\\x02L\\u01FF\\x03\\x02\\x02\\x02N\\u0214\\x03', '\\x02\\x02\\x02P\\u0216\\x03\\x02\\x02\\x02R\\u0219\\x03\\x02', '\\x02\\x02T\\u0222\\x03\\x02\\x02\\x02V\\u022A\\x03\\x02\\x02', '\\x02X\\u022C\\x03\\x02\\x02\\x02Z\\u023C\\x03\\x02\\x02\\x02', '\\\\\\u0242\\x03\\x02\\x02\\x02^\\u024A\\x03\\x02\\x02\\x02`\\u024D', '\\x03\\x02\\x02\\x02b\\u0250\\x03\\x02\\x02\\x02d\\u0256\\x03', '\\x02\\x02\\x02f\\u0259\\x03\\x02\\x02\\x02h\\u0264\\x03\\x02', '\\x02\\x02j\\u026D\\x03\\x02\\x02\\x02l\\u0278\\x03\\x02\\x02', '\\x02n\\u0287\\x03\\x02\\x02\\x02p\\u029B\\x03\\x02\\x02\\x02', 'r\\u02EB\\x03\\x02\\x02\\x02t\\u02ED\\x03\\x02\\x02\\x02v\\u02F5', '\\x03\\x02\\x02\\x02x\\u0300\\x03\\x02\\x02\\x02z\\u030C\\x03', '\\x02\\x02\\x02|\\u030E\\x03\\x02\\x02\\x02~\\u0313\\x03\\x02', '\\x02\\x02\\x80\\u032D\\x03\\x02\\x02\\x02\\x82\\u0331\\x03\\x02', '\\x02\\x02\\x84\\u0337\\x03\\x02\\x02\\x02\\x86\\u0347\\x03\\x02', '\\x02\\x02\\x88\\u034D\\x03\\x02\\x02\\x02\\x8A\\u0356\\x03\\x02', '\\x02\\x02\\x8C\\u0358\\x03\\x02\\x02\\x02\\x8E\\u0360\\x03\\x02', '\\x02\\x02\\x90\\u0363\\x03\\x02\\x02\\x02\\x92\\u0366\\x03\\x02', '\\x02\\x02\\x94\\u0374\\x03\\x02\\x02\\x02\\x96\\u0376\\x03\\x02', '\\x02\\x02\\x98\\u0382\\x03\\x02\\x02\\x02\\x9A\\u0385\\x03\\x02', '\\x02\\x02\\x9C\\u0391\\x03\\x02\\x02\\x02\\x9E\\u0395\\x03\\x02', '\\x02\\x02\\xA0\\u0397\\x03\\x02\\x02\\x02\\xA2\\u03B5\\x03\\x02', '\\x02\\x02\\xA4\\u03B7\\x03\\x02\\x02\\x02\\xA6\\u03B9\\x03\\x02', '\\x02\\x02\\xA8\\u03BD\\x03\\x02\\x02\\x02\\xAA\\xAE\\x05\\x04', '\\x03\\x02\\xAB\\xAE\\x05\\x12\\n\\x02\\xAC\\xAE\\x05\\x14', '\\x0B\\x02\\xAD\\xAA\\x03\\x02\\x02\\x02\\xAD\\xAB\\x03\\x02', '\\x02\\x02\\xAD\\xAC\\x03\\x02\\x02\\x02\\xAE\\xB1\\x03\\x02', '\\x02\\x02\\xAF\\xAD\\x03\\x02\\x02\\x02\\xAF\\xB0\\x03\\x02', '\\x02\\x02\\xB0\\xB2\\x03\\x02\\x02\\x02\\xB1\\xAF\\x03\\x02', '\\x02\\x02\\xB2\\xB3\\x07\\x02\\x02\\x03\\xB3\\x03\\x03\\x02', '\\x02\\x02\\xB4\\xB5\\x07\\x03\\x02\\x02\\xB5\\xB6\\x05\\x06', '\\x04\\x02\\xB6\\xB7\\x05\\b\\x05\\x02\\xB7\\xB8\\x07\\x04', '\\x02\\x02\\xB8\\x05\\x03\\x02\\x02\\x02\\xB9\\xBA\\x05\\xA8', 'U\\x02\\xBA\\x07\\x03\\x02\\x02\\x02\\xBB\\xBE\\x05\\n\\x06', '\\x02\\xBC\\xBE\\x05p9\\x02\\xBD\\xBB\\x03\\x02\\x02\\x02', '\\xBD\\xBC\\x03\\x02\\x02\\x02\\xBE\\t\\x03\\x02\\x02\\x02', '\\xBF\\xC1\\x05\\x0E\\b\\x02\\xC0\\xC2\\x05\\x0E\\b\\x02\\xC1', '\\xC0\\x03\\x02\\x02\\x02\\xC1\\xC2\\x03\\x02\\x02\\x02\\xC2', '\\x0B\\x03\\x02\\x02\\x02\\xC3\\xC4\\t\\x02\\x02\\x02\\xC4', '\\r\\x03\\x02\\x02\\x02\\xC5\\xC7\\x05\\f\\x07\\x02\\xC6\\xC5', '\\x03\\x02\\x02\\x02\\xC6\\xC7\\x03\\x02\\x02\\x02\\xC7\\xC8', '\\x03\\x02\\x02\\x02\\xC8\\xC9\\x07b\\x02\\x02\\xC9\\x0F', '\\x03\\x02\\x02\\x02\\xCA\\xCD\\x05\\xA8U\\x02\\xCB\\xCC', '\\x07\\f\\x02\\x02\\xCC\\xCE\\x05\\xA8U\\x02\\xCD\\xCB\\x03', '\\x02\\x02\\x02\\xCD\\xCE\\x03\\x02\\x02\\x02\\xCE\\x11\\x03', '\\x02\\x02\\x02\\xCF\\xD0\\x07\\r\\x02\\x02\\xD0\\xD3\\x07', 'w\\x02\\x02\\xD1\\xD2\\x07\\f\\x02\\x02\\xD2\\xD4\\x05\\xA8', 'U\\x02\\xD3\\xD1\\x03\\x02\\x02\\x02\\xD3\\xD4\\x03\\x02', '\\x02\\x02\\xD4\\xD5\\x03\\x02\\x02\\x02\\xD5\\xF2\\x07\\x04', '\\x02\\x02\\xD6\\xD9\\x07\\r\\x02\\x02\\xD7\\xDA\\x07\\x0E', '\\x02\\x02\\xD8\\xDA\\x05\\xA8U\\x02\\xD9\\xD7\\x03\\x02', '\\x02\\x02\\xD9\\xD8\\x03\\x02\\x02\\x02\\xDA\\xDD\\x03\\x02', '\\x02\\x02\\xDB\\xDC\\x07\\f\\x02\\x02\\xDC\\xDE\\x05\\xA8', 'U\\x02\\xDD\\xDB\\x03\\x02\\x02\\x02\\xDD\\xDE\\x03\\x02', '\\x02\\x02\\xDE\\xDF\\x03\\x02\\x02\\x02\\xDF\\xE0\\x07\\x0F', '\\x02\\x02\\xE0\\xE1\\x07w\\x02\\x02\\xE1\\xF2\\x07\\x04', '\\x02\\x02\\xE2\\xE3\\x07\\r\\x02\\x02\\xE3\\xE4\\x07\\x10', '\\x02\\x02\\xE4\\xE9\\x05\\x10\\t\\x02\\xE5\\xE6\\x07\\x11', '\\x02\\x02\\xE6\\xE8\\x05\\x10\\t\\x02\\xE7\\xE5\\x03\\x02', '\\x02\\x02\\xE8\\xEB\\x03\\x02\\x02\\x02\\xE9\\xE7\\x03\\x02', '\\x02\\x02\\xE9\\xEA\\x03\\x02\\x02\\x02\\xEA\\xEC\\x03\\x02', '\\x02\\x02\\xEB\\xE9\\x03\\x02\\x02\\x02\\xEC\\xED\\x07\\x12', '\\x02\\x02\\xED\\xEE\\x07\\x0F\\x02\\x02\\xEE\\xEF\\x07w', '\\x02\\x02\\xEF\\xF0\\x07\\x04\\x02\\x02\\xF0\\xF2\\x03\\x02', '\\x02\\x02\\xF1\\xCF\\x03\\x02\\x02\\x02\\xF1\\xD6\\x03\\x02', '\\x02\\x02\\xF1\\xE2\\x03\\x02\\x02\\x02\\xF2\\x13\\x03\\x02', '\\x02\\x02\\xF3\\xF4\\t\\x03\\x02\\x02\\xF4\\xFE\\x05\\xA8', 'U\\x02\\xF5\\xF6\\x07\\x16\\x02\\x02\\xF6\\xFB\\x05\\x16', '\\f\\x02\\xF7\\xF8\\x07\\x11\\x02\\x02\\xF8\\xFA\\x05\\x16', '\\f\\x02\\xF9\\xF7\\x03\\x02\\x02\\x02\\xFA\\xFD\\x03\\x02', '\\x02\\x02\\xFB\\xF9\\x03\\x02\\x02\\x02\\xFB\\xFC\\x03\\x02', '\\x02\\x02\\xFC\\xFF\\x03\\x02\\x02\\x02\\xFD\\xFB\\x03\\x02', '\\x02\\x02\\xFE\\xF5\\x03\\x02\\x02\\x02\\xFE\\xFF\\x03\\x02', '\\x02\\x02\\xFF\\u0100\\x03\\x02\\x02\\x02\\u0100\\u0104\\x07\\x10', '\\x02\\x02\\u0101\\u0103\\x05\\x18\\r\\x02\\u0102\\u0101\\x03\\x02', '\\x02\\x02\\u0103\\u0106\\x03\\x02\\x02\\x02\\u0104\\u0102\\x03\\x02', '\\x02\\x02\\u0104\\u0105\\x03\\x02\\x02\\x02\\u0105\\u0107\\x03\\x02', '\\x02\\x02\\u0106\\u0104\\x03\\x02\\x02\\x02\\u0107\\u0108\\x07\\x12', '\\x02\\x02\\u0108\\x15\\x03\\x02\\x02\\x02\\u0109\\u010F\\x05B', '\"\\x02\\u010A\\u010C\\x07\\x17\\x02\\x02\\u010B\\u010D\\x05t;\\x02', '\\u010C\\u010B\\x03\\x02\\x02\\x02\\u010C\\u010D\\x03\\x02\\x02\\x02', '\\u010D\\u010E\\x03\\x02\\x02\\x02\\u010E\\u0110\\x07\\x18\\x02\\x02', '\\u010F\\u010A\\x03\\x02\\x02\\x02\\u010F\\u0110\\x03\\x02\\x02\\x02', '\\u0110\\x17\\x03\\x02\\x02\\x02\\u0111\\u011A\\x05\\x1A\\x0E\\x02', '\\u0112\\u011A\\x05\\x1C\\x0F\\x02\\u0113\\u011A\\x05\\x1E\\x10\\x02', '\\u0114\\u011A\\x05 \\x11\\x02\\u0115\\u011A\\x05\"\\x12\\x02\\u0116', '\\u011A\\x05&\\x14\\x02\\u0117\\u011A\\x05,\\x17\\x02\\u0118\\u011A', '\\x050\\x19\\x02\\u0119\\u0111\\x03\\x02\\x02\\x02\\u0119\\u0112', '\\x03\\x02\\x02\\x02\\u0119\\u0113\\x03\\x02\\x02\\x02\\u0119\\u0114', '\\x03\\x02\\x02\\x02\\u0119\\u0115\\x03\\x02\\x02\\x02\\u0119\\u0116', '\\x03\\x02\\x02\\x02\\u0119\\u0117\\x03\\x02\\x02\\x02\\u0119\\u0118', '\\x03\\x02\\x02\\x02\\u011A\\x19\\x03\\x02\\x02\\x02\\u011B\\u011F', '\\x05@!\\x02\\u011C\\u011E\\t\\x04\\x02\\x02\\u011D\\u011C\\x03\\x02', '\\x02\\x02\\u011E\\u0121\\x03\\x02\\x02\\x02\\u011F\\u011D\\x03\\x02', '\\x02\\x02\\u011F\\u0120\\x03\\x02\\x02\\x02\\u0120\\u0122\\x03\\x02', '\\x02\\x02\\u0121\\u011F\\x03\\x02\\x02\\x02\\u0122\\u0125\\x05\\xA8', 'U\\x02\\u0123\\u0124\\x07\\x0B\\x02\\x02\\u0124\\u0126\\x05p9\\x02', '\\u0125\\u0123\\x03\\x02\\x02\\x02\\u0125\\u0126\\x03\\x02\\x02\\x02', '\\u0126\\u0127\\x03\\x02\\x02\\x02\\u0127\\u0128\\x07\\x04\\x02\\x02', '\\u0128\\x1B\\x03\\x02\\x02\\x02\\u0129\\u012A\\x07\\x19\\x02\\x02', '\\u012A\\u012B\\x05\\xA8U\\x02\\u012B\\u012E\\x07\\x1A\\x02\\x02', '\\u012C\\u012F\\x07\\x0E\\x02\\x02\\u012D\\u012F\\x05@!\\x02\\u012E', '\\u012C\\x03\\x02\\x02\\x02\\u012E\\u012D\\x03\\x02\\x02\\x02\\u012F', '\\u0130\\x03\\x02\\x02\\x02\\u0130\\u0131\\x07\\x04\\x02\\x02\\u0131', '\\x1D\\x03\\x02\\x02\\x02\\u0132\\u0133\\x07\\x1B\\x02\\x02\\u0133', '\\u0134\\x05\\xA8U\\x02\\u0134\\u013F\\x07\\x10\\x02\\x02\\u0135', '\\u0136\\x05> \\x02\\u0136\\u013C\\x07\\x04\\x02\\x02\\u0137\\u0138', '\\x05> \\x02\\u0138\\u0139\\x07\\x04\\x02\\x02\\u0139\\u013B\\x03', '\\x02\\x02\\x02\\u013A\\u0137\\x03\\x02\\x02\\x02\\u013B\\u013E\\x03', '\\x02\\x02\\x02\\u013C\\u013A\\x03\\x02\\x02\\x02\\u013C\\u013D\\x03', '\\x02\\x02\\x02\\u013D\\u0140\\x03\\x02\\x02\\x02\\u013E\\u013C\\x03', '\\x02\\x02\\x02\\u013F\\u0135\\x03\\x02\\x02\\x02\\u013F\\u0140\\x03', '\\x02\\x02\\x02\\u0140\\u0141\\x03\\x02\\x02\\x02\\u0141\\u0142\\x07', '\\x12\\x02\\x02\\u0142\\x1F\\x03\\x02\\x02\\x02\\u0143\\u0144\\x07', '\\x1C\\x02\\x02\\u0144\\u0145\\x052\\x1A\\x02\\u0145\\u0146\\x05', '*\\x16\\x02\\u0146\\u0147\\x05L\\'\\x02\\u0147!\\x03\\x02\\x02\\x02', '\\u0148\\u0149\\x07\\x1D\\x02\\x02\\u0149\\u014B\\x05\\xA8U\\x02', '\\u014A\\u014C\\x052\\x1A\\x02\\u014B\\u014A\\x03\\x02\\x02\\x02', '\\u014B\\u014C\\x03\\x02\\x02\\x02\\u014C\\u014D\\x03\\x02\\x02\\x02', '\\u014D\\u014E\\x05L\\'\\x02\\u014E#\\x03\\x02\\x02\\x02\\u014F\\u0155', '\\x05\\xA8U\\x02\\u0150\\u0152\\x07\\x17\\x02\\x02\\u0151\\u0153', '\\x05t;\\x02\\u0152\\u0151\\x03\\x02\\x02\\x02\\u0152\\u0153\\x03', '\\x02\\x02\\x02\\u0153\\u0154\\x03\\x02\\x02\\x02\\u0154\\u0156\\x07', '\\x18\\x02\\x02\\u0155\\u0150\\x03\\x02\\x02\\x02\\u0155\\u0156\\x03', '\\x02\\x02\\x02\\u0156%\\x03\\x02\\x02\\x02\\u0157\\u0159\\x07', '\\x1E\\x02\\x02\\u0158\\u015A\\x05\\xA8U\\x02\\u0159\\u0158\\x03', '\\x02\\x02\\x02\\u0159\\u015A\\x03\\x02\\x02\\x02\\u015A\\u015B\\x03', '\\x02\\x02\\x02\\u015B\\u015C\\x052\\x1A\\x02\\u015C\\u015E\\x05', '*\\x16\\x02\\u015D\\u015F\\x05(\\x15\\x02\\u015E\\u015D\\x03\\x02', '\\x02\\x02\\u015E\\u015F\\x03\\x02\\x02\\x02\\u015F\\u0162\\x03\\x02', '\\x02\\x02\\u0160\\u0163\\x07\\x04\\x02\\x02\\u0161\\u0163\\x05L', '\\'\\x02\\u0162\\u0160\\x03\\x02\\x02\\x02\\u0162\\u0161\\x03\\x02', '\\x02\\x02\\u0163\\'\\x03\\x02\\x02\\x02\\u0164\\u0165\\x07\\x1F', '\\x02\\x02\\u0165\\u0166\\x052\\x1A\\x02\\u0166)\\x03\\x02\\x02', '\\x02\\u0167\\u016E\\x05$\\x13\\x02\\u0168\\u016E\\x05J&\\x02\\u0169', '\\u016E\\x07m\\x02\\x02\\u016A\\u016E\\x07r\\x02\\x02\\u016B\\u016E', '\\x07o\\x02\\x02\\u016C\\u016E\\x07q\\x02\\x02\\u016D\\u0167\\x03', '\\x02\\x02\\x02\\u016D\\u0168\\x03\\x02\\x02\\x02\\u016D\\u0169\\x03', '\\x02\\x02\\x02\\u016D\\u016A\\x03\\x02\\x02\\x02\\u016D\\u016B\\x03', '\\x02\\x02\\x02\\u016D\\u016C\\x03\\x02\\x02\\x02\\u016E\\u0171\\x03', '\\x02\\x02\\x02\\u016F\\u016D\\x03\\x02\\x02\\x02\\u016F\\u0170\\x03', '\\x02\\x02\\x02\\u0170+\\x03\\x02\\x02\\x02\\u0171\\u016F\\x03', '\\x02\\x02\\x02\\u0172\\u0173\\x07 \\x02\\x02\\u0173\\u0174\\x05', '\\xA8U\\x02\\u0174\\u0176\\x056\\x1C\\x02\\u0175\\u0177\\x07i\\x02', '\\x02\\u0176\\u0175\\x03\\x02\\x02\\x02\\u0176\\u0177\\x03\\x02\\x02', '\\x02\\u0177\\u0178\\x03\\x02\\x02\\x02\\u0178\\u0179\\x07\\x04\\x02', '\\x02\\u0179-\\x03\\x02\\x02\\x02\\u017A\\u017B\\x05\\xA8U\\x02', '\\u017B/\\x03\\x02\\x02\\x02\\u017C\\u017D\\x07!\\x02\\x02\\u017D', '\\u017E\\x05\\xA8U\\x02\\u017E\\u0180\\x07\\x10\\x02\\x02\\u017F', '\\u0181\\x05.\\x18\\x02\\u0180\\u017F\\x03\\x02\\x02\\x02\\u0180', '\\u0181\\x03\\x02\\x02\\x02\\u0181\\u0186\\x03\\x02\\x02\\x02\\u0182', '\\u0183\\x07\\x11\\x02\\x02\\u0183\\u0185\\x05.\\x18\\x02\\u0184', '\\u0182\\x03\\x02\\x02\\x02\\u0185\\u0188\\x03\\x02\\x02\\x02\\u0186', '\\u0184\\x03\\x02\\x02\\x02\\u0186\\u0187\\x03\\x02\\x02\\x02\\u0187', '\\u0189\\x03\\x02\\x02\\x02\\u0188\\u0186\\x03\\x02\\x02\\x02\\u0189', '\\u018A\\x07\\x12\\x02\\x02\\u018A1\\x03\\x02\\x02\\x02\\u018B', '\\u0194\\x07\\x17\\x02\\x02\\u018C\\u0191\\x054\\x1B\\x02\\u018D', '\\u018E\\x07\\x11\\x02\\x02\\u018E\\u0190\\x054\\x1B\\x02\\u018F', '\\u018D\\x03\\x02\\x02\\x02\\u0190\\u0193\\x03\\x02\\x02\\x02\\u0191', '\\u018F\\x03\\x02\\x02\\x02\\u0191\\u0192\\x03\\x02\\x02\\x02\\u0192', '\\u0195\\x03\\x02\\x02\\x02\\u0193\\u0191\\x03\\x02\\x02\\x02\\u0194', '\\u018C\\x03\\x02\\x02\\x02\\u0194\\u0195\\x03\\x02\\x02\\x02\\u0195', '\\u0196\\x03\\x02\\x02\\x02\\u0196\\u0197\\x07\\x18\\x02\\x02\\u0197', '3\\x03\\x02\\x02\\x02\\u0198\\u019A\\x05@!\\x02\\u0199\\u019B\\x05', 'H%\\x02\\u019A\\u0199\\x03\\x02\\x02\\x02\\u019A\\u019B\\x03\\x02', '\\x02\\x02\\u019B\\u019D\\x03\\x02\\x02\\x02\\u019C\\u019E\\x05\\xA8', 'U\\x02\\u019D\\u019C\\x03\\x02\\x02\\x02\\u019D\\u019E\\x03\\x02', '\\x02\\x02\\u019E5\\x03\\x02\\x02\\x02\\u019F\\u01A8\\x07\\x17', '\\x02\\x02\\u01A0\\u01A5\\x058\\x1D\\x02\\u01A1\\u01A2\\x07\\x11', '\\x02\\x02\\u01A2\\u01A4\\x058\\x1D\\x02\\u01A3\\u01A1\\x03\\x02', '\\x02\\x02\\u01A4\\u01A7\\x03\\x02\\x02\\x02\\u01A5\\u01A3\\x03\\x02', '\\x02\\x02\\u01A5\\u01A6\\x03\\x02\\x02\\x02\\u01A6\\u01A9\\x03\\x02', '\\x02\\x02\\u01A7\\u01A5\\x03\\x02\\x02\\x02\\u01A8\\u01A0\\x03\\x02', '\\x02\\x02\\u01A8\\u01A9\\x03\\x02\\x02\\x02\\u01A9\\u01AA\\x03\\x02', '\\x02\\x02\\u01AA\\u01AB\\x07\\x18\\x02\\x02\\u01AB7\\x03\\x02', '\\x02\\x02\\u01AC\\u01AE\\x05@!\\x02\\u01AD\\u01AF\\x07n\\x02\\x02', '\\u01AE\\u01AD\\x03\\x02\\x02\\x02\\u01AE\\u01AF\\x03\\x02\\x02\\x02', '\\u01AF\\u01B1\\x03\\x02\\x02\\x02\\u01B0\\u01B2\\x05\\xA8U\\x02', '\\u01B1\\u01B0\\x03\\x02\\x02\\x02\\u01B1\\u01B2\\x03\\x02\\x02\\x02', '\\u01B29\\x03\\x02\\x02\\x02\\u01B3\\u01BC\\x07\\x17\\x02\\x02', '\\u01B4\\u01B9\\x05<\\x1F\\x02\\u01B5\\u01B6\\x07\\x11\\x02\\x02', '\\u01B6\\u01B8\\x05<\\x1F\\x02\\u01B7\\u01B5\\x03\\x02\\x02\\x02', '\\u01B8\\u01BB\\x03\\x02\\x02\\x02\\u01B9\\u01B7\\x03\\x02\\x02\\x02', '\\u01B9\\u01BA\\x03\\x02\\x02\\x02\\u01BA\\u01BD\\x03\\x02\\x02\\x02', '\\u01BB\\u01B9\\x03\\x02\\x02\\x02\\u01BC\\u01B4\\x03\\x02\\x02\\x02', '\\u01BC\\u01BD\\x03\\x02\\x02\\x02\\u01BD\\u01BE\\x03\\x02\\x02\\x02', '\\u01BE\\u01BF\\x07\\x18\\x02\\x02\\u01BF;\\x03\\x02\\x02\\x02', '\\u01C0\\u01C2\\x05@!\\x02\\u01C1\\u01C3\\x05H%\\x02\\u01C2\\u01C1\\x03', '\\x02\\x02\\x02\\u01C2\\u01C3\\x03\\x02\\x02\\x02\\u01C3=\\x03', '\\x02\\x02\\x02\\u01C4\\u01C6\\x05@!\\x02\\u01C5\\u01C7\\x05H%\\x02', '\\u01C6\\u01C5\\x03\\x02\\x02\\x02\\u01C6\\u01C7\\x03\\x02\\x02\\x02', '\\u01C7\\u01C8\\x03\\x02\\x02\\x02\\u01C8\\u01C9\\x05\\xA8U\\x02', '\\u01C9?\\x03\\x02\\x02\\x02\\u01CA\\u01CB\\b!\\x01\\x02\\u01CB\\u01D2', '\\x05n8\\x02\\u01CC\\u01D2\\x05B\"\\x02\\u01CD\\u01D2\\x05D#\\x02', '\\u01CE\\u01D2\\x05F$\\x02\\u01CF\\u01D0\\x07$\\x02\\x02\\u01D0\\u01D2', '\\x07p\\x02\\x02\\u01D1\\u01CA\\x03\\x02\\x02\\x02\\u01D1\\u01CC', '\\x03\\x02\\x02\\x02\\u01D1\\u01CD\\x03\\x02\\x02\\x02\\u01D1\\u01CE', '\\x03\\x02\\x02\\x02\\u01D1\\u01CF\\x03\\x02\\x02\\x02\\u01D2\\u01DB', '\\x03\\x02\\x02\\x02\\u01D3\\u01D4\\f\\x05\\x02\\x02\\u01D4\\u01D6', '\\x07\"\\x02\\x02\\u01D5\\u01D7\\x05p9\\x02\\u01D6\\u01D5\\x03\\x02', '\\x02\\x02\\u01D6\\u01D7\\x03\\x02\\x02\\x02\\u01D7\\u01D8\\x03\\x02', '\\x02\\x02\\u01D8\\u01DA\\x07#\\x02\\x02\\u01D9\\u01D3\\x03\\x02', '\\x02\\x02\\u01DA\\u01DD\\x03\\x02\\x02\\x02\\u01DB\\u01D9\\x03\\x02', '\\x02\\x02\\u01DB\\u01DC\\x03\\x02\\x02\\x02\\u01DCA\\x03\\x02', '\\x02\\x02\\u01DD\\u01DB\\x03\\x02\\x02\\x02\\u01DE\\u01E3\\x05\\xA8', 'U\\x02\\u01DF\\u01E0\\x07%\\x02\\x02\\u01E0\\u01E2\\x05\\xA8U\\x02', '\\u01E1\\u01DF\\x03\\x02\\x02\\x02\\u01E2\\u01E5\\x03\\x02\\x02\\x02', '\\u01E3\\u01E1\\x03\\x02\\x02\\x02\\u01E3\\u01E4\\x03\\x02\\x02\\x02', '\\u01E4C\\x03\\x02\\x02\\x02\\u01E5\\u01E3\\x03\\x02\\x02\\x02', '\\u01E6\\u01E7\\x07&\\x02\\x02\\u01E7\\u01E8\\x07\\x17\\x02\\x02', '\\u01E8\\u01E9\\x05n8\\x02\\u01E9\\u01EA\\x07\\'\\x02\\x02\\u01EA\\u01EB', '\\x05@!\\x02\\u01EB\\u01EC\\x07\\x18\\x02\\x02\\u01ECE\\x03\\x02', '\\x02\\x02\\u01ED\\u01EE\\x07\\x1E\\x02\\x02\\u01EE\\u01F4\\x05:', '\\x1E\\x02\\u01EF\\u01F3\\x07o\\x02\\x02\\u01F0\\u01F3\\x07m\\x02', '\\x02\\u01F1\\u01F3\\x05J&\\x02\\u01F2\\u01EF\\x03\\x02\\x02\\x02', '\\u01F2\\u01F0\\x03\\x02\\x02\\x02\\u01F2\\u01F1\\x03\\x02\\x02\\x02', '\\u01F3\\u01F6\\x03\\x02\\x02\\x02\\u01F4\\u01F2\\x03\\x02\\x02\\x02', '\\u01F4\\u01F5\\x03\\x02\\x02\\x02\\u01F5\\u01F9\\x03\\x02\\x02\\x02', '\\u01F6\\u01F4\\x03\\x02\\x02\\x02\\u01F7\\u01F8\\x07\\x1F\\x02\\x02', '\\u01F8\\u01FA\\x05:\\x1E\\x02\\u01F9\\u01F7\\x03\\x02\\x02\\x02', '\\u01F9\\u01FA\\x03\\x02\\x02\\x02\\u01FAG\\x03\\x02\\x02\\x02', '\\u01FB\\u01FC\\t\\x05\\x02\\x02\\u01FCI\\x03\\x02\\x02\\x02\\u01FD', '\\u01FE\\t\\x06\\x02\\x02\\u01FEK\\x03\\x02\\x02\\x02\\u01FF\\u0203', '\\x07\\x10\\x02\\x02\\u0200\\u0202\\x05N(\\x02\\u0201\\u0200\\x03', '\\x02\\x02\\x02\\u0202\\u0205\\x03\\x02\\x02\\x02\\u0203\\u0201\\x03', '\\x02\\x02\\x02\\u0203\\u0204\\x03\\x02\\x02\\x02\\u0204\\u0206\\x03', '\\x02\\x02\\x02\\u0205\\u0203\\x03\\x02\\x02\\x02\\u0206\\u0207\\x07', '\\x12\\x02\\x02\\u0207M\\x03\\x02\\x02\\x02\\u0208\\u0215\\x05', 'R*\\x02\\u0209\\u0215\\x05T+\\x02\\u020A\\u0215\\x05X-\\x02\\u020B\\u0215', '\\x05L\\'\\x02\\u020C\\u0215\\x05Z.\\x02\\u020D\\u0215\\x05\\\\/\\x02', '\\u020E\\u0215\\x05^0\\x02\\u020F\\u0215\\x05`1\\x02\\u0210\\u0215\\x05', 'b2\\x02\\u0211\\u0215\\x05d3\\x02\\u0212\\u0215\\x05f4\\x02\\u0213\\u0215', '\\x05V,\\x02\\u0214\\u0208\\x03\\x02\\x02\\x02\\u0214\\u0209\\x03', '\\x02\\x02\\x02\\u0214\\u020A\\x03\\x02\\x02\\x02\\u0214\\u020B\\x03', '\\x02\\x02\\x02\\u0214\\u020C\\x03\\x02\\x02\\x02\\u0214\\u020D\\x03', '\\x02\\x02\\x02\\u0214\\u020E\\x03\\x02\\x02\\x02\\u0214\\u020F\\x03', '\\x02\\x02\\x02\\u0214\\u0210\\x03\\x02\\x02\\x02\\u0214\\u0211\\x03', '\\x02\\x02\\x02\\u0214\\u0212\\x03\\x02\\x02\\x02\\u0214\\u0213\\x03', '\\x02\\x02\\x02\\u0215O\\x03\\x02\\x02\\x02\\u0216\\u0217\\x05', 'p9\\x02\\u0217\\u0218\\x07\\x04\\x02\\x02\\u0218Q\\x03\\x02\\x02', '\\x02\\u0219\\u021A\\x07+\\x02\\x02\\u021A\\u021B\\x07\\x17\\x02', '\\x02\\u021B\\u021C\\x05p9\\x02\\u021C\\u021D\\x07\\x18\\x02\\x02', '\\u021D\\u0220\\x05N(\\x02\\u021E\\u021F\\x07,\\x02\\x02\\u021F\\u0221', '\\x05N(\\x02\\u0220\\u021E\\x03\\x02\\x02\\x02\\u0220\\u0221\\x03', '\\x02\\x02\\x02\\u0221S\\x03\\x02\\x02\\x02\\u0222\\u0223\\x07', '-\\x02\\x02\\u0223\\u0224\\x07\\x17\\x02\\x02\\u0224\\u0225\\x05', 'p9\\x02\\u0225\\u0226\\x07\\x18\\x02\\x02\\u0226\\u0227\\x05N(\\x02', '\\u0227U\\x03\\x02\\x02\\x02\\u0228\\u022B\\x05h5\\x02\\u0229\\u022B', '\\x05P)\\x02\\u022A\\u0228\\x03\\x02\\x02\\x02\\u022A\\u0229\\x03', '\\x02\\x02\\x02\\u022BW\\x03\\x02\\x02\\x02\\u022C\\u022D\\x07', '\\x1A\\x02\\x02\\u022D\\u0230\\x07\\x17\\x02\\x02\\u022E\\u0231\\x05', 'V,\\x02\\u022F\\u0231\\x07\\x04\\x02\\x02\\u0230\\u022E\\x03\\x02', '\\x02\\x02\\u0230\\u022F\\x03\\x02\\x02\\x02\\u0231\\u0234\\x03\\x02', '\\x02\\x02\\u0232\\u0235\\x05P)\\x02\\u0233\\u0235\\x07\\x04\\x02', '\\x02\\u0234\\u0232\\x03\\x02\\x02\\x02\\u0234\\u0233\\x03\\x02\\x02', '\\x02\\u0235\\u0237\\x03\\x02\\x02\\x02\\u0236\\u0238\\x05p9\\x02', '\\u0237\\u0236\\x03\\x02\\x02\\x02\\u0237\\u0238\\x03\\x02\\x02\\x02', '\\u0238\\u0239\\x03\\x02\\x02\\x02\\u0239\\u023A\\x07\\x18\\x02\\x02', '\\u023A\\u023B\\x05N(\\x02\\u023BY\\x03\\x02\\x02\\x02\\u023C\\u023E', '\\x07.\\x02\\x02\\u023D\\u023F\\x07w\\x02\\x02\\u023E\\u023D\\x03', '\\x02\\x02\\x02\\u023E\\u023F\\x03\\x02\\x02\\x02\\u023F\\u0240\\x03', '\\x02\\x02\\x02\\u0240\\u0241\\x05~@\\x02\\u0241[\\x03\\x02\\x02', '\\x02\\u0242\\u0243\\x07/\\x02\\x02\\u0243\\u0244\\x05N(\\x02\\u0244', '\\u0245\\x07-\\x02\\x02\\u0245\\u0246\\x07\\x17\\x02\\x02\\u0246', '\\u0247\\x05p9\\x02\\u0247\\u0248\\x07\\x18\\x02\\x02\\u0248\\u0249', '\\x07\\x04\\x02\\x02\\u0249]\\x03\\x02\\x02\\x02\\u024A\\u024B', '\\x07l\\x02\\x02\\u024B\\u024C\\x07\\x04\\x02\\x02\\u024C_\\x03', '\\x02\\x02\\x02\\u024D\\u024E\\x07j\\x02\\x02\\u024E\\u024F\\x07', '\\x04\\x02\\x02\\u024Fa\\x03\\x02\\x02\\x02\\u0250\\u0252\\x07', '0\\x02\\x02\\u0251\\u0253\\x05p9\\x02\\u0252\\u0251\\x03\\x02\\x02', '\\x02\\u0252\\u0253\\x03\\x02\\x02\\x02\\u0253\\u0254\\x03\\x02\\x02', '\\x02\\u0254\\u0255\\x07\\x04\\x02\\x02\\u0255c\\x03\\x02\\x02', '\\x02\\u0256\\u0257\\x071\\x02\\x02\\u0257\\u0258\\x07\\x04\\x02', '\\x02\\u0258e\\x03\\x02\\x02\\x02\\u0259\\u025A\\x072\\x02\\x02', '\\u025A\\u025B\\x05|?\\x02\\u025B\\u025C\\x07\\x04\\x02\\x02\\u025C', 'g\\x03\\x02\\x02\\x02\\u025D\\u025E\\x073\\x02\\x02\\u025E\\u0265', '\\x05l7\\x02\\u025F\\u0265\\x05> \\x02\\u0260\\u0261\\x07\\x17\\x02', '\\x02\\u0261\\u0262\\x05j6\\x02\\u0262\\u0263\\x07\\x18\\x02\\x02', '\\u0263\\u0265\\x03\\x02\\x02\\x02\\u0264\\u025D\\x03\\x02\\x02\\x02', '\\u0264\\u025F\\x03\\x02\\x02\\x02\\u0264\\u0260\\x03\\x02\\x02\\x02', '\\u0265\\u0268\\x03\\x02\\x02\\x02\\u0266\\u0267\\x07\\x0B\\x02\\x02', '\\u0267\\u0269\\x05p9\\x02\\u0268\\u0266\\x03\\x02\\x02\\x02\\u0268', '\\u0269\\x03\\x02\\x02\\x02\\u0269\\u026A\\x03\\x02\\x02\\x02\\u026A', '\\u026B\\x07\\x04\\x02\\x02\\u026Bi\\x03\\x02\\x02\\x02\\u026C', '\\u026E\\x05> \\x02\\u026D\\u026C\\x03\\x02\\x02\\x02\\u026D\\u026E', '\\x03\\x02\\x02\\x02\\u026E\\u0275\\x03\\x02\\x02\\x02\\u026F\\u0271', '\\x07\\x11\\x02\\x02\\u0270\\u0272\\x05> \\x02\\u0271\\u0270\\x03', '\\x02\\x02\\x02\\u0271\\u0272\\x03\\x02\\x02\\x02\\u0272\\u0274\\x03', '\\x02\\x02\\x02\\u0273\\u026F\\x03\\x02\\x02\\x02\\u0274\\u0277\\x03', '\\x02\\x02\\x02\\u0275\\u0273\\x03\\x02\\x02\\x02\\u0275\\u0276\\x03', '\\x02\\x02\\x02\\u0276k\\x03\\x02\\x02\\x02\\u0277\\u0275\\x03', '\\x02\\x02\\x02\\u0278\\u027F\\x07\\x17\\x02\\x02\\u0279\\u027B\\x05', '\\xA8U\\x02\\u027A\\u0279\\x03\\x02\\x02\\x02\\u027A\\u027B\\x03', '\\x02\\x02\\x02\\u027B\\u027C\\x03\\x02\\x02\\x02\\u027C\\u027E\\x07', '\\x11\\x02\\x02\\u027D\\u027A\\x03\\x02\\x02\\x02\\u027E\\u0281\\x03', '\\x02\\x02\\x02\\u027F\\u027D\\x03\\x02\\x02\\x02\\u027F\\u0280\\x03', '\\x02\\x02\\x02\\u0280\\u0283\\x03\\x02\\x02\\x02\\u0281\\u027F\\x03', '\\x02\\x02\\x02\\u0282\\u0284\\x05\\xA8U\\x02\\u0283\\u0282\\x03', '\\x02\\x02\\x02\\u0283\\u0284\\x03\\x02\\x02\\x02\\u0284\\u0285\\x03', '\\x02\\x02\\x02\\u0285\\u0286\\x07\\x18\\x02\\x02\\u0286m\\x03', '\\x02\\x02\\x02\\u0287\\u0288\\t\\x07\\x02\\x02\\u0288o\\x03\\x02', '\\x02\\x02\\u0289\\u028A\\b9\\x01\\x02\\u028A\\u028B\\x079\\x02\\x02', '\\u028B\\u029C\\x05@!\\x02\\u028C\\u028D\\x07\\x17\\x02\\x02\\u028D', '\\u028E\\x05p9\\x02\\u028E\\u028F\\x07\\x18\\x02\\x02\\u028F\\u029C', '\\x03\\x02\\x02\\x02\\u0290\\u0291\\t\\b\\x02\\x02\\u0291\\u029C\\x05', 'p9\\x15\\u0292\\u0293\\t\\t\\x02\\x02\\u0293\\u029C\\x05p9\\x14\\u0294', '\\u0295\\t\\n\\x02\\x02\\u0295\\u029C\\x05p9\\x13\\u0296\\u0297\\x07>', '\\x02\\x02\\u0297\\u029C\\x05p9\\x12\\u0298\\u0299\\x07\\x06\\x02', '\\x02\\u0299\\u029C\\x05p9\\x11\\u029A\\u029C\\x05r:\\x02\\u029B\\u0289', '\\x03\\x02\\x02\\x02\\u029B\\u028C\\x03\\x02\\x02\\x02\\u029B\\u0290', '\\x03\\x02\\x02\\x02\\u029B\\u0292\\x03\\x02\\x02\\x02\\u029B\\u0294', '\\x03\\x02\\x02\\x02\\u029B\\u0296\\x03\\x02\\x02\\x02\\u029B\\u0298', '\\x03\\x02\\x02\\x02\\u029B\\u029A\\x03\\x02\\x02\\x02\\u029C\\u02D8', '\\x03\\x02\\x02\\x02\\u029D\\u029E\\f\\x10\\x02\\x02\\u029E\\u029F', '\\x07?\\x02\\x02\\u029F\\u02D7\\x05p9\\x11\\u02A0\\u02A1\\f\\x0F\\x02', '\\x02\\u02A1\\u02A2\\t\\x0B\\x02\\x02\\u02A2\\u02D7\\x05p9\\x10\\u02A3', '\\u02A4\\f\\x0E\\x02\\x02\\u02A4\\u02A5\\t\\t\\x02\\x02\\u02A5\\u02D7\\x05', 'p9\\x0F\\u02A6\\u02A7\\f\\r\\x02\\x02\\u02A7\\u02A8\\t\\f\\x02\\x02\\u02A8', '\\u02D7\\x05p9\\x0E\\u02A9\\u02AA\\f\\f\\x02\\x02\\u02AA\\u02AB\\x07D', '\\x02\\x02\\u02AB\\u02D7\\x05p9\\r\\u02AC\\u02AD\\f\\x0B\\x02\\x02\\u02AD', '\\u02AE\\x07\\x05\\x02\\x02\\u02AE\\u02D7\\x05p9\\f\\u02AF\\u02B0\\f\\n', '\\x02\\x02\\u02B0\\u02B1\\x07E\\x02\\x02\\u02B1\\u02D7\\x05p9\\x0B', '\\u02B2\\u02B3\\f\\t\\x02\\x02\\u02B3\\u02B4\\t\\r\\x02\\x02\\u02B4\\u02D7', '\\x05p9\\n\\u02B5\\u02B6\\f\\b\\x02\\x02\\u02B6\\u02B7\\t\\x0E\\x02\\x02', '\\u02B7\\u02D7\\x05p9\\t\\u02B8\\u02B9\\f\\x07\\x02\\x02\\u02B9\\u02BA\\x07', 'H\\x02\\x02\\u02BA\\u02D7\\x05p9\\b\\u02BB\\u02BC\\f\\x06\\x02\\x02', '\\u02BC\\u02BD\\x07I\\x02\\x02\\u02BD\\u02D7\\x05p9\\x07\\u02BE\\u02BF', '\\f\\x05\\x02\\x02\\u02BF\\u02C0\\x07J\\x02\\x02\\u02C0\\u02C1\\x05', 'p9\\x02\\u02C1\\u02C2\\x07K\\x02\\x02\\u02C2\\u02C3\\x05p9\\x06\\u02C3', '\\u02D7\\x03\\x02\\x02\\x02\\u02C4\\u02C5\\f\\x04\\x02\\x02\\u02C5', '\\u02C6\\t\\x0F\\x02\\x02\\u02C6\\u02D7\\x05p9\\x05\\u02C7\\u02C8\\f\\x1B', '\\x02\\x02\\u02C8\\u02D7\\t\\b\\x02\\x02\\u02C9\\u02CA\\f\\x19\\x02\\x02', '\\u02CA\\u02CB\\x07\"\\x02\\x02\\u02CB\\u02CC\\x05p9\\x02\\u02CC\\u02CD', '\\x07#\\x02\\x02\\u02CD\\u02D7\\x03\\x02\\x02\\x02\\u02CE\\u02CF', '\\f\\x18\\x02\\x02\\u02CF\\u02D0\\x07\\x17\\x02\\x02\\u02D0\\u02D1', '\\x05z>\\x02\\u02D1\\u02D2\\x07\\x18\\x02\\x02\\u02D2\\u02D7\\x03', '\\x02\\x02\\x02\\u02D3\\u02D4\\f\\x17\\x02\\x02\\u02D4\\u02D5\\x07', '%\\x02\\x02\\u02D5\\u02D7\\x05\\xA8U\\x02\\u02D6\\u029D\\x03\\x02', '\\x02\\x02\\u02D6\\u02A0\\x03\\x02\\x02\\x02\\u02D6\\u02A3\\x03\\x02', '\\x02\\x02\\u02D6\\u02A6\\x03\\x02\\x02\\x02\\u02D6\\u02A9\\x03\\x02', '\\x02\\x02\\u02D6\\u02AC\\x03\\x02\\x02\\x02\\u02D6\\u02AF\\x03\\x02', '\\x02\\x02\\u02D6\\u02B2\\x03\\x02\\x02\\x02\\u02D6\\u02B5\\x03\\x02', '\\x02\\x02\\u02D6\\u02B8\\x03\\x02\\x02\\x02\\u02D6\\u02BB\\x03\\x02', '\\x02\\x02\\u02D6\\u02BE\\x03\\x02\\x02\\x02\\u02D6\\u02C4\\x03\\x02', '\\x02\\x02\\u02D6\\u02C7\\x03\\x02\\x02\\x02\\u02D6\\u02C9\\x03\\x02', '\\x02\\x02\\u02D6\\u02CE\\x03\\x02\\x02\\x02\\u02D6\\u02D3\\x03\\x02', '\\x02\\x02\\u02D7\\u02DA\\x03\\x02\\x02\\x02\\u02D8\\u02D6\\x03\\x02', '\\x02\\x02\\u02D8\\u02D9\\x03\\x02\\x02\\x02\\u02D9q\\x03\\x02', '\\x02\\x02\\u02DA\\u02D8\\x03\\x02\\x02\\x02\\u02DB\\u02EC\\x07c', '\\x02\\x02\\u02DC\\u02EC\\x05\\xA6T\\x02\\u02DD\\u02EC\\x07g\\x02', '\\x02\\u02DE\\u02EC\\x07w\\x02\\x02\\u02DF\\u02E2\\x05\\xA8U\\x02', '\\u02E0\\u02E1\\x07\"\\x02\\x02\\u02E1\\u02E3\\x07#\\x02\\x02\\u02E2', '\\u02E0\\x03\\x02\\x02\\x02\\u02E2\\u02E3\\x03\\x02\\x02\\x02\\u02E3', '\\u02EC\\x03\\x02\\x02\\x02\\u02E4\\u02EC\\x07t\\x02\\x02\\u02E5', '\\u02EC\\x05\\xA2R\\x02\\u02E6\\u02E9\\x05\\xA4S\\x02\\u02E7\\u02E8', '\\x07\"\\x02\\x02\\u02E8\\u02EA\\x07#\\x02\\x02\\u02E9\\u02E7\\x03', '\\x02\\x02\\x02\\u02E9\\u02EA\\x03\\x02\\x02\\x02\\u02EA\\u02EC\\x03', '\\x02\\x02\\x02\\u02EB\\u02DB\\x03\\x02\\x02\\x02\\u02EB\\u02DC\\x03', '\\x02\\x02\\x02\\u02EB\\u02DD\\x03\\x02\\x02\\x02\\u02EB\\u02DE\\x03', '\\x02\\x02\\x02\\u02EB\\u02DF\\x03\\x02\\x02\\x02\\u02EB\\u02E4\\x03', '\\x02\\x02\\x02\\u02EB\\u02E5\\x03\\x02\\x02\\x02\\u02EB\\u02E6\\x03', '\\x02\\x02\\x02\\u02ECs\\x03\\x02\\x02\\x02\\u02ED\\u02F2\\x05', 'p9\\x02\\u02EE\\u02EF\\x07\\x11\\x02\\x02\\u02EF\\u02F1\\x05p9\\x02', '\\u02F0\\u02EE\\x03\\x02\\x02\\x02\\u02F1\\u02F4\\x03\\x02\\x02\\x02', '\\u02F2\\u02F0\\x03\\x02\\x02\\x02\\u02F2\\u02F3\\x03\\x02\\x02\\x02', '\\u02F3u\\x03\\x02\\x02\\x02\\u02F4\\u02F2\\x03\\x02\\x02\\x02', '\\u02F5\\u02FA\\x05x=\\x02\\u02F6\\u02F7\\x07\\x11\\x02\\x02\\u02F7', '\\u02F9\\x05x=\\x02\\u02F8\\u02F6\\x03\\x02\\x02\\x02\\u02F9\\u02FC', '\\x03\\x02\\x02\\x02\\u02FA\\u02F8\\x03\\x02\\x02\\x02\\u02FA\\u02FB', '\\x03\\x02\\x02\\x02\\u02FB\\u02FE\\x03\\x02\\x02\\x02\\u02FC\\u02FA', '\\x03\\x02\\x02\\x02\\u02FD\\u02FF\\x07\\x11\\x02\\x02\\u02FE\\u02FD', '\\x03\\x02\\x02\\x02\\u02FE\\u02FF\\x03\\x02\\x02\\x02\\u02FFw', '\\x03\\x02\\x02\\x02\\u0300\\u0301\\x05\\xA8U\\x02\\u0301\\u0302', '\\x07K\\x02\\x02\\u0302\\u0303\\x05p9\\x02\\u0303y\\x03\\x02\\x02', '\\x02\\u0304\\u0306\\x07\\x10\\x02\\x02\\u0305\\u0307\\x05v<\\x02', '\\u0306\\u0305\\x03\\x02\\x02\\x02\\u0306\\u0307\\x03\\x02\\x02\\x02', '\\u0307\\u0308\\x03\\x02\\x02\\x02\\u0308\\u030D\\x07\\x12\\x02\\x02', '\\u0309\\u030B\\x05t;\\x02\\u030A\\u0309\\x03\\x02\\x02\\x02\\u030A', '\\u030B\\x03\\x02\\x02\\x02\\u030B\\u030D\\x03\\x02\\x02\\x02\\u030C', '\\u0304\\x03\\x02\\x02\\x02\\u030C\\u030A\\x03\\x02\\x02\\x02\\u030D', '{\\x03\\x02\\x02\\x02\\u030E\\u030F\\x05p9\\x02\\u030F\\u0310\\x07', '\\x17\\x02\\x02\\u0310\\u0311\\x05z>\\x02\\u0311\\u0312\\x07\\x18', '\\x02\\x02\\u0312}\\x03\\x02\\x02\\x02\\u0313\\u0317\\x07\\x10', '\\x02\\x02\\u0314\\u0316\\x05\\x80A\\x02\\u0315\\u0314\\x03\\x02', '\\x02\\x02\\u0316\\u0319\\x03\\x02\\x02\\x02\\u0317\\u0315\\x03\\x02', '\\x02\\x02\\u0317\\u0318\\x03\\x02\\x02\\x02\\u0318\\u031A\\x03\\x02', '\\x02\\x02\\u0319\\u0317\\x03\\x02\\x02\\x02\\u031A\\u031B\\x07\\x12', '\\x02\\x02\\u031B\\x7F\\x03\\x02\\x02\\x02\\u031C\\u032E\\x05\\xA8', 'U\\x02\\u031D\\u032E\\x05~@\\x02\\u031E\\u032E\\x05\\x82B\\x02\\u031F', '\\u032E\\x05\\x86D\\x02\\u0320\\u032E\\x05\\x88E\\x02\\u0321\\u032E', '\\x05\\x8EH\\x02\\u0322\\u032E\\x05\\x90I\\x02\\u0323\\u032E\\x05', '\\x92J\\x02\\u0324\\u032E\\x05\\x96L\\x02\\u0325\\u032E\\x05\\x9A', 'N\\x02\\u0326\\u032E\\x05\\x9CO\\x02\\u0327\\u032E\\x07j\\x02\\x02', '\\u0328\\u032E\\x07l\\x02\\x02\\u0329\\u032E\\x05\\xA0Q\\x02\\u032A', '\\u032E\\x05\\xA6T\\x02\\u032B\\u032E\\x07w\\x02\\x02\\u032C\\u032E', '\\x07g\\x02\\x02\\u032D\\u031C\\x03\\x02\\x02\\x02\\u032D\\u031D', '\\x03\\x02\\x02\\x02\\u032D\\u031E\\x03\\x02\\x02\\x02\\u032D\\u031F', '\\x03\\x02\\x02\\x02\\u032D\\u0320\\x03\\x02\\x02\\x02\\u032D\\u0321', '\\x03\\x02\\x02\\x02\\u032D\\u0322\\x03\\x02\\x02\\x02\\u032D\\u0323', '\\x03\\x02\\x02\\x02\\u032D\\u0324\\x03\\x02\\x02\\x02\\u032D\\u0325', '\\x03\\x02\\x02\\x02\\u032D\\u0326\\x03\\x02\\x02\\x02\\u032D\\u0327', '\\x03\\x02\\x02\\x02\\u032D\\u0328\\x03\\x02\\x02\\x02\\u032D\\u0329', '\\x03\\x02\\x02\\x02\\u032D\\u032A\\x03\\x02\\x02\\x02\\u032D\\u032B', '\\x03\\x02\\x02\\x02\\u032D\\u032C\\x03\\x02\\x02\\x02\\u032E\\x81', '\\x03\\x02\\x02\\x02\\u032F\\u0332\\x05\\x84C\\x02\\u0330\\u0332', '\\x05\\x9EP\\x02\\u0331\\u032F\\x03\\x02\\x02\\x02\\u0331\\u0330', '\\x03\\x02\\x02\\x02\\u0332\\x83\\x03\\x02\\x02\\x02\\u0333\\u0338', '\\x070\\x02\\x02\\u0334\\u0338\\x07$\\x02\\x02\\u0335\\u0338\\x07', '6\\x02\\x02\\u0336\\u0338\\x05\\xA8U\\x02\\u0337\\u0333\\x03\\x02', '\\x02\\x02\\u0337\\u0334\\x03\\x02\\x02\\x02\\u0337\\u0335\\x03\\x02', '\\x02\\x02\\u0337\\u0336\\x03\\x02\\x02\\x02\\u0338\\u0345\\x03\\x02', '\\x02\\x02\\u0339\\u033B\\x07\\x17\\x02\\x02\\u033A\\u033C\\x05\\x82', 'B\\x02\\u033B\\u033A\\x03\\x02\\x02\\x02\\u033B\\u033C\\x03\\x02', '\\x02\\x02\\u033C\\u0341\\x03\\x02\\x02\\x02\\u033D\\u033E\\x07\\x11', '\\x02\\x02\\u033E\\u0340\\x05\\x82B\\x02\\u033F\\u033D\\x03\\x02', '\\x02\\x02\\u0340\\u0343\\x03\\x02\\x02\\x02\\u0341\\u033F\\x03\\x02', '\\x02\\x02\\u0341\\u0342\\x03\\x02\\x02\\x02\\u0342\\u0344\\x03\\x02', '\\x02\\x02\\u0343\\u0341\\x03\\x02\\x02\\x02\\u0344\\u0346\\x07\\x18', '\\x02\\x02\\u0345\\u0339\\x03\\x02\\x02\\x02\\u0345\\u0346\\x03\\x02', '\\x02\\x02\\u0346\\x85\\x03\\x02\\x02\\x02\\u0347\\u0348\\x07V', '\\x02\\x02\\u0348\\u034B\\x05\\x8AF\\x02\\u0349\\u034A\\x07W\\x02', '\\x02\\u034A\\u034C\\x05\\x82B\\x02\\u034B\\u0349\\x03\\x02\\x02', '\\x02\\u034B\\u034C\\x03\\x02\\x02\\x02\\u034C\\x87\\x03\\x02\\x02', '\\x02\\u034D\\u034E\\x05\\x8AF\\x02\\u034E\\u034F\\x07W\\x02\\x02', '\\u034F\\u0350\\x05\\x82B\\x02\\u0350\\x89\\x03\\x02\\x02\\x02', '\\u0351\\u0357\\x05\\xA8U\\x02\\u0352\\u0353\\x07\\x17\\x02\\x02', '\\u0353\\u0354\\x05\\x8CG\\x02\\u0354\\u0355\\x07\\x18\\x02\\x02', '\\u0355\\u0357\\x03\\x02\\x02\\x02\\u0356\\u0351\\x03\\x02\\x02\\x02', '\\u0356\\u0352\\x03\\x02\\x02\\x02\\u0357\\x8B\\x03\\x02\\x02\\x02', '\\u0358\\u035D\\x05\\xA8U\\x02\\u0359\\u035A\\x07\\x11\\x02\\x02', '\\u035A\\u035C\\x05\\xA8U\\x02\\u035B\\u0359\\x03\\x02\\x02\\x02', '\\u035C\\u035F\\x03\\x02\\x02\\x02\\u035D\\u035B\\x03\\x02\\x02\\x02', '\\u035D\\u035E\\x03\\x02\\x02\\x02\\u035E\\x8D\\x03\\x02\\x02\\x02', '\\u035F\\u035D\\x03\\x02\\x02\\x02\\u0360\\u0361\\x07X\\x02\\x02', '\\u0361\\u0362\\x05\\xA8U\\x02\\u0362\\x8F\\x03\\x02\\x02\\x02', '\\u0363\\u0364\\x05\\xA8U\\x02\\u0364\\u0365\\x07K\\x02\\x02\\u0365', '\\x91\\x03\\x02\\x02\\x02\\u0366\\u0367\\x07Y\\x02\\x02\\u0367', '\\u036B\\x05\\x82B\\x02\\u0368\\u036A\\x05\\x94K\\x02\\u0369\\u0368', '\\x03\\x02\\x02\\x02\\u036A\\u036D\\x03\\x02\\x02\\x02\\u036B\\u0369', '\\x03\\x02\\x02\\x02\\u036B\\u036C\\x03\\x02\\x02\\x02\\u036C\\x93', '\\x03\\x02\\x02\\x02\\u036D\\u036B\\x03\\x02\\x02\\x02\\u036E\\u036F', '\\x07Z\\x02\\x02\\u036F\\u0370\\x05\\x9EP\\x02\\u0370\\u0371\\x05', '~@\\x02\\u0371\\u0375\\x03\\x02\\x02\\x02\\u0372\\u0373\\x07[\\x02', '\\x02\\u0373\\u0375\\x05~@\\x02\\u0374\\u036E\\x03\\x02\\x02\\x02', '\\u0374\\u0372\\x03\\x02\\x02\\x02\\u0375\\x95\\x03\\x02\\x02\\x02', '\\u0376\\u0377\\x07\\x1E\\x02\\x02\\u0377\\u0378\\x05\\xA8U\\x02', '\\u0378\\u037A\\x07\\x17\\x02\\x02\\u0379\\u037B\\x05\\x8CG\\x02', '\\u037A\\u0379\\x03\\x02\\x02\\x02\\u037A\\u037B\\x03\\x02\\x02\\x02', '\\u037B\\u037C\\x03\\x02\\x02\\x02\\u037C\\u037E\\x07\\x18\\x02\\x02', '\\u037D\\u037F\\x05\\x98M\\x02\\u037E\\u037D\\x03\\x02\\x02\\x02', '\\u037E\\u037F\\x03\\x02\\x02\\x02\\u037F\\u0380\\x03\\x02\\x02\\x02', '\\u0380\\u0381\\x05~@\\x02\\u0381\\x97\\x03\\x02\\x02\\x02\\u0382', '\\u0383\\x07\\\\\\x02\\x02\\u0383\\u0384\\x05\\x8CG\\x02\\u0384\\x99', '\\x03\\x02\\x02\\x02\\u0385\\u0388\\x07\\x1A\\x02\\x02\\u0386\\u0389', '\\x05~@\\x02\\u0387\\u0389\\x05\\x82B\\x02\\u0388\\u0386\\x03\\x02', '\\x02\\x02\\u0388\\u0387\\x03\\x02\\x02\\x02\\u0389\\u038A\\x03\\x02', '\\x02\\x02\\u038A\\u038D\\x05\\x82B\\x02\\u038B\\u038E\\x05~@\\x02', '\\u038C\\u038E\\x05\\x82B\\x02\\u038D\\u038B\\x03\\x02\\x02\\x02', '\\u038D\\u038C\\x03\\x02\\x02\\x02\\u038E\\u038F\\x03\\x02\\x02\\x02', '\\u038F\\u0390\\x05~@\\x02\\u0390\\x9B\\x03\\x02\\x02\\x02\\u0391', '\\u0392\\x07+\\x02\\x02\\u0392\\u0393\\x05\\x82B\\x02\\u0393\\u0394', '\\x05~@\\x02\\u0394\\x9D\\x03\\x02\\x02\\x02\\u0395\\u0396\\t\\x10', '\\x02\\x02\\u0396\\x9F\\x03\\x02\\x02\\x02\\u0397\\u0398\\x07.', '\\x02\\x02\\u0398\\u0399\\x05\\xA8U\\x02\\u0399\\u039A\\x05~@\\x02', '\\u039A\\xA1\\x03\\x02\\x02\\x02\\u039B\\u039D\\x07\\x17\\x02\\x02', '\\u039C\\u039E\\x05p9\\x02\\u039D\\u039C\\x03\\x02\\x02\\x02\\u039D', '\\u039E\\x03\\x02\\x02\\x02\\u039E\\u03A5\\x03\\x02\\x02\\x02\\u039F', '\\u03A1\\x07\\x11\\x02\\x02\\u03A0\\u03A2\\x05p9\\x02\\u03A1\\u03A0', '\\x03\\x02\\x02\\x02\\u03A1\\u03A2\\x03\\x02\\x02\\x02\\u03A2\\u03A4', '\\x03\\x02\\x02\\x02\\u03A3\\u039F\\x03\\x02\\x02\\x02\\u03A4\\u03A7', '\\x03\\x02\\x02\\x02\\u03A5\\u03A3\\x03\\x02\\x02\\x02\\u03A5\\u03A6', '\\x03\\x02\\x02\\x02\\u03A6\\u03A8\\x03\\x02\\x02\\x02\\u03A7\\u03A5', '\\x03\\x02\\x02\\x02\\u03A8\\u03B6\\x07\\x18\\x02\\x02\\u03A9\\u03B2', '\\x07\"\\x02\\x02\\u03AA\\u03AF\\x05p9\\x02\\u03AB\\u03AC\\x07\\x11', '\\x02\\x02\\u03AC\\u03AE\\x05p9\\x02\\u03AD\\u03AB\\x03\\x02\\x02', '\\x02\\u03AE\\u03B1\\x03\\x02\\x02\\x02\\u03AF\\u03AD\\x03\\x02\\x02', '\\x02\\u03AF\\u03B0\\x03\\x02\\x02\\x02\\u03B0\\u03B3\\x03\\x02\\x02', '\\x02\\u03B1\\u03AF\\x03\\x02\\x02\\x02\\u03B2\\u03AA\\x03\\x02\\x02', '\\x02\\u03B2\\u03B3\\x03\\x02\\x02\\x02\\u03B3\\u03B4\\x03\\x02\\x02', '\\x02\\u03B4\\u03B6\\x07#\\x02\\x02\\u03B5\\u039B\\x03\\x02\\x02', '\\x02\\u03B5\\u03A9\\x03\\x02\\x02\\x02\\u03B6\\xA3\\x03\\x02\\x02', '\\x02\\u03B7\\u03B8\\x05n8\\x02\\u03B8\\xA5\\x03\\x02\\x02\\x02', '\\u03B9\\u03BB\\t\\x11\\x02\\x02\\u03BA\\u03BC\\x07f\\x02\\x02\\u03BB', '\\u03BA\\x03\\x02\\x02\\x02\\u03BB\\u03BC\\x03\\x02\\x02\\x02\\u03BC', '\\xA7\\x03\\x02\\x02\\x02\\u03BD\\u03BE\\t\\x12\\x02\\x02\\u03BE', '\\xA9\\x03\\x02\\x02\\x02j\\xAD\\xAF\\xBD\\xC1\\xC6\\xCD', '\\xD3\\xD9\\xDD\\xE9\\xF1\\xFB\\xFE\\u0104\\u010C\\u010F\\u0119\\u011F', '\\u0125\\u012E\\u013C\\u013F\\u014B\\u0152\\u0155\\u0159\\u015E\\u0162\\u016D\\u016F', '\\u0176\\u0180\\u0186\\u0191\\u0194\\u019A\\u019D\\u01A5\\u01A8\\u01AE\\u01B1\\u01B9', '\\u01BC\\u01C2\\u01C6\\u01D1\\u01D6\\u01DB\\u01E3\\u01F2\\u01F4\\u01F9\\u0203\\u0214', '\\u0220\\u022A\\u0230\\u0234\\u0237\\u023E\\u0252\\u0264\\u0268\\u026D\\u0271\\u0275', '\\u027A\\u027F\\u0283\\u029B\\u02D6\\u02D8\\u02E2\\u02E9\\u02EB\\u02F2\\u02FA\\u02FE', '\\u0306\\u030A\\u030C\\u0317\\u032D\\u0331\\u0337\\u033B\\u0341\\u0345\\u034B\\u0356', '\\u035D\\u036B\\u0374\\u037A\\u037E\\u0388\\u038D\\u039D\\u03A1\\u03A5\\u03AF\\u03B2', '\\u03B5\\u03BB'].join(\"\");\n\nvar atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);\n\nvar decisionsToDFA = atn.decisionToState.map(function (ds, index) {\n    return new antlr4.dfa.DFA(ds, index);\n});\n\nvar sharedContextCache = new antlr4.PredictionContextCache();\n\nvar literalNames = [null, \"'pragma'\", \"';'\", \"'^'\", \"'~'\", \"'>='\", \"'>'\", \"'<'\", \"'<='\", \"'='\", \"'as'\", \"'import'\", \"'*'\", \"'from'\", \"'{'\", \"','\", \"'}'\", \"'contract'\", \"'interface'\", \"'library'\", \"'is'\", \"'('\", \"')'\", \"'using'\", \"'for'\", \"'struct'\", \"'constructor'\", \"'modifier'\", \"'function'\", \"'returns'\", \"'event'\", \"'enum'\", \"'['\", \"']'\", \"'address'\", \"'.'\", \"'mapping'\", \"'=>'\", \"'memory'\", \"'storage'\", \"'calldata'\", \"'if'\", \"'else'\", \"'while'\", \"'assembly'\", \"'do'\", \"'return'\", \"'throw'\", \"'emit'\", \"'var'\", \"'bool'\", \"'string'\", \"'byte'\", \"'++'\", \"'--'\", \"'new'\", \"'+'\", \"'-'\", \"'after'\", \"'delete'\", \"'!'\", \"'**'\", \"'/'\", \"'%'\", \"'<<'\", \"'>>'\", \"'&'\", \"'|'\", \"'=='\", \"'!='\", \"'&&'\", \"'||'\", \"'?'\", \"':'\", \"'|='\", \"'^='\", \"'&='\", \"'<<='\", \"'>>='\", \"'+='\", \"'-='\", \"'*='\", \"'/='\", \"'%='\", \"'let'\", \"':='\", \"'=:'\", \"'switch'\", \"'case'\", \"'default'\", \"'->'\", null, null, null, null, null, null, null, null, null, null, null, null, \"'anonymous'\", \"'break'\", \"'constant'\", \"'continue'\", \"'external'\", \"'indexed'\", \"'internal'\", \"'payable'\", \"'private'\", \"'public'\", \"'pure'\", \"'type'\", \"'view'\"];\n\nvar symbolicNames = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, \"Int\", \"Uint\", \"Byte\", \"Fixed\", \"Ufixed\", \"VersionLiteral\", \"BooleanLiteral\", \"DecimalNumber\", \"HexNumber\", \"NumberUnit\", \"HexLiteral\", \"ReservedKeyword\", \"AnonymousKeyword\", \"BreakKeyword\", \"ConstantKeyword\", \"ContinueKeyword\", \"ExternalKeyword\", \"IndexedKeyword\", \"InternalKeyword\", \"PayableKeyword\", \"PrivateKeyword\", \"PublicKeyword\", \"PureKeyword\", \"TypeKeyword\", \"ViewKeyword\", \"Identifier\", \"StringLiteral\", \"WS\", \"COMMENT\", \"LINE_COMMENT\"];\n\nvar ruleNames = [\"sourceUnit\", \"pragmaDirective\", \"pragmaName\", \"pragmaValue\", \"version\", \"versionOperator\", \"versionConstraint\", \"importDeclaration\", \"importDirective\", \"contractDefinition\", \"inheritanceSpecifier\", \"contractPart\", \"stateVariableDeclaration\", \"usingForDeclaration\", \"structDefinition\", \"constructorDefinition\", \"modifierDefinition\", \"modifierInvocation\", \"functionDefinition\", \"returnParameters\", \"modifierList\", \"eventDefinition\", \"enumValue\", \"enumDefinition\", \"parameterList\", \"parameter\", \"eventParameterList\", \"eventParameter\", \"functionTypeParameterList\", \"functionTypeParameter\", \"variableDeclaration\", \"typeName\", \"userDefinedTypeName\", \"mapping\", \"functionTypeName\", \"storageLocation\", \"stateMutability\", \"block\", \"statement\", \"expressionStatement\", \"ifStatement\", \"whileStatement\", \"simpleStatement\", \"forStatement\", \"inlineAssemblyStatement\", \"doWhileStatement\", \"continueStatement\", \"breakStatement\", \"returnStatement\", \"throwStatement\", \"emitStatement\", \"variableDeclarationStatement\", \"variableDeclarationList\", \"identifierList\", \"elementaryTypeName\", \"expression\", \"primaryExpression\", \"expressionList\", \"nameValueList\", \"nameValue\", \"functionCallArguments\", \"functionCall\", \"assemblyBlock\", \"assemblyItem\", \"assemblyExpression\", \"assemblyCall\", \"assemblyLocalDefinition\", \"assemblyAssignment\", \"assemblyIdentifierOrList\", \"assemblyIdentifierList\", \"assemblyStackAssignment\", \"labelDefinition\", \"assemblySwitch\", \"assemblyCase\", \"assemblyFunctionDefinition\", \"assemblyFunctionReturns\", \"assemblyFor\", \"assemblyIf\", \"assemblyLiteral\", \"subAssembly\", \"tupleExpression\", \"elementaryTypeNameExpression\", \"numberLiteral\", \"identifier\"];\n\nfunction SolidityParser(input) {\n    antlr4.Parser.call(this, input);\n    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);\n    this.ruleNames = ruleNames;\n    this.literalNames = literalNames;\n    this.symbolicNames = symbolicNames;\n    return this;\n}\n\nSolidityParser.prototype = Object.create(antlr4.Parser.prototype);\nSolidityParser.prototype.constructor = SolidityParser;\n\nObject.defineProperty(SolidityParser.prototype, \"atn\", {\n    get: function get() {\n        return atn;\n    }\n});\n\nSolidityParser.EOF = antlr4.Token.EOF;\nSolidityParser.T__0 = 1;\nSolidityParser.T__1 = 2;\nSolidityParser.T__2 = 3;\nSolidityParser.T__3 = 4;\nSolidityParser.T__4 = 5;\nSolidityParser.T__5 = 6;\nSolidityParser.T__6 = 7;\nSolidityParser.T__7 = 8;\nSolidityParser.T__8 = 9;\nSolidityParser.T__9 = 10;\nSolidityParser.T__10 = 11;\nSolidityParser.T__11 = 12;\nSolidityParser.T__12 = 13;\nSolidityParser.T__13 = 14;\nSolidityParser.T__14 = 15;\nSolidityParser.T__15 = 16;\nSolidityParser.T__16 = 17;\nSolidityParser.T__17 = 18;\nSolidityParser.T__18 = 19;\nSolidityParser.T__19 = 20;\nSolidityParser.T__20 = 21;\nSolidityParser.T__21 = 22;\nSolidityParser.T__22 = 23;\nSolidityParser.T__23 = 24;\nSolidityParser.T__24 = 25;\nSolidityParser.T__25 = 26;\nSolidityParser.T__26 = 27;\nSolidityParser.T__27 = 28;\nSolidityParser.T__28 = 29;\nSolidityParser.T__29 = 30;\nSolidityParser.T__30 = 31;\nSolidityParser.T__31 = 32;\nSolidityParser.T__32 = 33;\nSolidityParser.T__33 = 34;\nSolidityParser.T__34 = 35;\nSolidityParser.T__35 = 36;\nSolidityParser.T__36 = 37;\nSolidityParser.T__37 = 38;\nSolidityParser.T__38 = 39;\nSolidityParser.T__39 = 40;\nSolidityParser.T__40 = 41;\nSolidityParser.T__41 = 42;\nSolidityParser.T__42 = 43;\nSolidityParser.T__43 = 44;\nSolidityParser.T__44 = 45;\nSolidityParser.T__45 = 46;\nSolidityParser.T__46 = 47;\nSolidityParser.T__47 = 48;\nSolidityParser.T__48 = 49;\nSolidityParser.T__49 = 50;\nSolidityParser.T__50 = 51;\nSolidityParser.T__51 = 52;\nSolidityParser.T__52 = 53;\nSolidityParser.T__53 = 54;\nSolidityParser.T__54 = 55;\nSolidityParser.T__55 = 56;\nSolidityParser.T__56 = 57;\nSolidityParser.T__57 = 58;\nSolidityParser.T__58 = 59;\nSolidityParser.T__59 = 60;\nSolidityParser.T__60 = 61;\nSolidityParser.T__61 = 62;\nSolidityParser.T__62 = 63;\nSolidityParser.T__63 = 64;\nSolidityParser.T__64 = 65;\nSolidityParser.T__65 = 66;\nSolidityParser.T__66 = 67;\nSolidityParser.T__67 = 68;\nSolidityParser.T__68 = 69;\nSolidityParser.T__69 = 70;\nSolidityParser.T__70 = 71;\nSolidityParser.T__71 = 72;\nSolidityParser.T__72 = 73;\nSolidityParser.T__73 = 74;\nSolidityParser.T__74 = 75;\nSolidityParser.T__75 = 76;\nSolidityParser.T__76 = 77;\nSolidityParser.T__77 = 78;\nSolidityParser.T__78 = 79;\nSolidityParser.T__79 = 80;\nSolidityParser.T__80 = 81;\nSolidityParser.T__81 = 82;\nSolidityParser.T__82 = 83;\nSolidityParser.T__83 = 84;\nSolidityParser.T__84 = 85;\nSolidityParser.T__85 = 86;\nSolidityParser.T__86 = 87;\nSolidityParser.T__87 = 88;\nSolidityParser.T__88 = 89;\nSolidityParser.T__89 = 90;\nSolidityParser.Int = 91;\nSolidityParser.Uint = 92;\nSolidityParser.Byte = 93;\nSolidityParser.Fixed = 94;\nSolidityParser.Ufixed = 95;\nSolidityParser.VersionLiteral = 96;\nSolidityParser.BooleanLiteral = 97;\nSolidityParser.DecimalNumber = 98;\nSolidityParser.HexNumber = 99;\nSolidityParser.NumberUnit = 100;\nSolidityParser.HexLiteral = 101;\nSolidityParser.ReservedKeyword = 102;\nSolidityParser.AnonymousKeyword = 103;\nSolidityParser.BreakKeyword = 104;\nSolidityParser.ConstantKeyword = 105;\nSolidityParser.ContinueKeyword = 106;\nSolidityParser.ExternalKeyword = 107;\nSolidityParser.IndexedKeyword = 108;\nSolidityParser.InternalKeyword = 109;\nSolidityParser.PayableKeyword = 110;\nSolidityParser.PrivateKeyword = 111;\nSolidityParser.PublicKeyword = 112;\nSolidityParser.PureKeyword = 113;\nSolidityParser.TypeKeyword = 114;\nSolidityParser.ViewKeyword = 115;\nSolidityParser.Identifier = 116;\nSolidityParser.StringLiteral = 117;\nSolidityParser.WS = 118;\nSolidityParser.COMMENT = 119;\nSolidityParser.LINE_COMMENT = 120;\n\nSolidityParser.RULE_sourceUnit = 0;\nSolidityParser.RULE_pragmaDirective = 1;\nSolidityParser.RULE_pragmaName = 2;\nSolidityParser.RULE_pragmaValue = 3;\nSolidityParser.RULE_version = 4;\nSolidityParser.RULE_versionOperator = 5;\nSolidityParser.RULE_versionConstraint = 6;\nSolidityParser.RULE_importDeclaration = 7;\nSolidityParser.RULE_importDirective = 8;\nSolidityParser.RULE_contractDefinition = 9;\nSolidityParser.RULE_inheritanceSpecifier = 10;\nSolidityParser.RULE_contractPart = 11;\nSolidityParser.RULE_stateVariableDeclaration = 12;\nSolidityParser.RULE_usingForDeclaration = 13;\nSolidityParser.RULE_structDefinition = 14;\nSolidityParser.RULE_constructorDefinition = 15;\nSolidityParser.RULE_modifierDefinition = 16;\nSolidityParser.RULE_modifierInvocation = 17;\nSolidityParser.RULE_functionDefinition = 18;\nSolidityParser.RULE_returnParameters = 19;\nSolidityParser.RULE_modifierList = 20;\nSolidityParser.RULE_eventDefinition = 21;\nSolidityParser.RULE_enumValue = 22;\nSolidityParser.RULE_enumDefinition = 23;\nSolidityParser.RULE_parameterList = 24;\nSolidityParser.RULE_parameter = 25;\nSolidityParser.RULE_eventParameterList = 26;\nSolidityParser.RULE_eventParameter = 27;\nSolidityParser.RULE_functionTypeParameterList = 28;\nSolidityParser.RULE_functionTypeParameter = 29;\nSolidityParser.RULE_variableDeclaration = 30;\nSolidityParser.RULE_typeName = 31;\nSolidityParser.RULE_userDefinedTypeName = 32;\nSolidityParser.RULE_mapping = 33;\nSolidityParser.RULE_functionTypeName = 34;\nSolidityParser.RULE_storageLocation = 35;\nSolidityParser.RULE_stateMutability = 36;\nSolidityParser.RULE_block = 37;\nSolidityParser.RULE_statement = 38;\nSolidityParser.RULE_expressionStatement = 39;\nSolidityParser.RULE_ifStatement = 40;\nSolidityParser.RULE_whileStatement = 41;\nSolidityParser.RULE_simpleStatement = 42;\nSolidityParser.RULE_forStatement = 43;\nSolidityParser.RULE_inlineAssemblyStatement = 44;\nSolidityParser.RULE_doWhileStatement = 45;\nSolidityParser.RULE_continueStatement = 46;\nSolidityParser.RULE_breakStatement = 47;\nSolidityParser.RULE_returnStatement = 48;\nSolidityParser.RULE_throwStatement = 49;\nSolidityParser.RULE_emitStatement = 50;\nSolidityParser.RULE_variableDeclarationStatement = 51;\nSolidityParser.RULE_variableDeclarationList = 52;\nSolidityParser.RULE_identifierList = 53;\nSolidityParser.RULE_elementaryTypeName = 54;\nSolidityParser.RULE_expression = 55;\nSolidityParser.RULE_primaryExpression = 56;\nSolidityParser.RULE_expressionList = 57;\nSolidityParser.RULE_nameValueList = 58;\nSolidityParser.RULE_nameValue = 59;\nSolidityParser.RULE_functionCallArguments = 60;\nSolidityParser.RULE_functionCall = 61;\nSolidityParser.RULE_assemblyBlock = 62;\nSolidityParser.RULE_assemblyItem = 63;\nSolidityParser.RULE_assemblyExpression = 64;\nSolidityParser.RULE_assemblyCall = 65;\nSolidityParser.RULE_assemblyLocalDefinition = 66;\nSolidityParser.RULE_assemblyAssignment = 67;\nSolidityParser.RULE_assemblyIdentifierOrList = 68;\nSolidityParser.RULE_assemblyIdentifierList = 69;\nSolidityParser.RULE_assemblyStackAssignment = 70;\nSolidityParser.RULE_labelDefinition = 71;\nSolidityParser.RULE_assemblySwitch = 72;\nSolidityParser.RULE_assemblyCase = 73;\nSolidityParser.RULE_assemblyFunctionDefinition = 74;\nSolidityParser.RULE_assemblyFunctionReturns = 75;\nSolidityParser.RULE_assemblyFor = 76;\nSolidityParser.RULE_assemblyIf = 77;\nSolidityParser.RULE_assemblyLiteral = 78;\nSolidityParser.RULE_subAssembly = 79;\nSolidityParser.RULE_tupleExpression = 80;\nSolidityParser.RULE_elementaryTypeNameExpression = 81;\nSolidityParser.RULE_numberLiteral = 82;\nSolidityParser.RULE_identifier = 83;\n\nfunction SourceUnitContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_sourceUnit;\n    return this;\n}\n\nSourceUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nSourceUnitContext.prototype.constructor = SourceUnitContext;\n\nSourceUnitContext.prototype.EOF = function () {\n    return this.getToken(SolidityParser.EOF, 0);\n};\n\nSourceUnitContext.prototype.pragmaDirective = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(PragmaDirectiveContext);\n    } else {\n        return this.getTypedRuleContext(PragmaDirectiveContext, i);\n    }\n};\n\nSourceUnitContext.prototype.importDirective = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(ImportDirectiveContext);\n    } else {\n        return this.getTypedRuleContext(ImportDirectiveContext, i);\n    }\n};\n\nSourceUnitContext.prototype.contractDefinition = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(ContractDefinitionContext);\n    } else {\n        return this.getTypedRuleContext(ContractDefinitionContext, i);\n    }\n};\n\nSourceUnitContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterSourceUnit(this);\n    }\n};\n\nSourceUnitContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitSourceUnit(this);\n    }\n};\n\nSolidityParser.SourceUnitContext = SourceUnitContext;\n\nSolidityParser.prototype.sourceUnit = function () {\n\n    var localctx = new SourceUnitContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 0, SolidityParser.RULE_sourceUnit);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 173;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__0 | 1 << SolidityParser.T__10 | 1 << SolidityParser.T__16 | 1 << SolidityParser.T__17 | 1 << SolidityParser.T__18)) !== 0) {\n            this.state = 171;\n            this._errHandler.sync(this);\n            switch (this._input.LA(1)) {\n                case SolidityParser.T__0:\n                    this.state = 168;\n                    this.pragmaDirective();\n                    break;\n                case SolidityParser.T__10:\n                    this.state = 169;\n                    this.importDirective();\n                    break;\n                case SolidityParser.T__16:\n                case SolidityParser.T__17:\n                case SolidityParser.T__18:\n                    this.state = 170;\n                    this.contractDefinition();\n                    break;\n                default:\n                    throw new antlr4.error.NoViableAltException(this);\n            }\n            this.state = 175;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n        }\n        this.state = 176;\n        this.match(SolidityParser.EOF);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction PragmaDirectiveContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_pragmaDirective;\n    return this;\n}\n\nPragmaDirectiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nPragmaDirectiveContext.prototype.constructor = PragmaDirectiveContext;\n\nPragmaDirectiveContext.prototype.pragmaName = function () {\n    return this.getTypedRuleContext(PragmaNameContext, 0);\n};\n\nPragmaDirectiveContext.prototype.pragmaValue = function () {\n    return this.getTypedRuleContext(PragmaValueContext, 0);\n};\n\nPragmaDirectiveContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterPragmaDirective(this);\n    }\n};\n\nPragmaDirectiveContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitPragmaDirective(this);\n    }\n};\n\nSolidityParser.PragmaDirectiveContext = PragmaDirectiveContext;\n\nSolidityParser.prototype.pragmaDirective = function () {\n\n    var localctx = new PragmaDirectiveContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 2, SolidityParser.RULE_pragmaDirective);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 178;\n        this.match(SolidityParser.T__0);\n        this.state = 179;\n        this.pragmaName();\n        this.state = 180;\n        this.pragmaValue();\n        this.state = 181;\n        this.match(SolidityParser.T__1);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction PragmaNameContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_pragmaName;\n    return this;\n}\n\nPragmaNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nPragmaNameContext.prototype.constructor = PragmaNameContext;\n\nPragmaNameContext.prototype.identifier = function () {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n};\n\nPragmaNameContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterPragmaName(this);\n    }\n};\n\nPragmaNameContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitPragmaName(this);\n    }\n};\n\nSolidityParser.PragmaNameContext = PragmaNameContext;\n\nSolidityParser.prototype.pragmaName = function () {\n\n    var localctx = new PragmaNameContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 4, SolidityParser.RULE_pragmaName);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 183;\n        this.identifier();\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction PragmaValueContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_pragmaValue;\n    return this;\n}\n\nPragmaValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nPragmaValueContext.prototype.constructor = PragmaValueContext;\n\nPragmaValueContext.prototype.version = function () {\n    return this.getTypedRuleContext(VersionContext, 0);\n};\n\nPragmaValueContext.prototype.expression = function () {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n};\n\nPragmaValueContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterPragmaValue(this);\n    }\n};\n\nPragmaValueContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitPragmaValue(this);\n    }\n};\n\nSolidityParser.PragmaValueContext = PragmaValueContext;\n\nSolidityParser.prototype.pragmaValue = function () {\n\n    var localctx = new PragmaValueContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 6, SolidityParser.RULE_pragmaValue);\n    try {\n        this.state = 187;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 2, this._ctx);\n        switch (la_) {\n            case 1:\n                this.enterOuterAlt(localctx, 1);\n                this.state = 185;\n                this.version();\n                break;\n\n            case 2:\n                this.enterOuterAlt(localctx, 2);\n                this.state = 186;\n                this.expression(0);\n                break;\n\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction VersionContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_version;\n    return this;\n}\n\nVersionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nVersionContext.prototype.constructor = VersionContext;\n\nVersionContext.prototype.versionConstraint = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(VersionConstraintContext);\n    } else {\n        return this.getTypedRuleContext(VersionConstraintContext, i);\n    }\n};\n\nVersionContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterVersion(this);\n    }\n};\n\nVersionContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitVersion(this);\n    }\n};\n\nSolidityParser.VersionContext = VersionContext;\n\nSolidityParser.prototype.version = function () {\n\n    var localctx = new VersionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 8, SolidityParser.RULE_version);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 189;\n        this.versionConstraint();\n        this.state = 191;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__2 | 1 << SolidityParser.T__3 | 1 << SolidityParser.T__4 | 1 << SolidityParser.T__5 | 1 << SolidityParser.T__6 | 1 << SolidityParser.T__7 | 1 << SolidityParser.T__8)) !== 0 || _la === SolidityParser.VersionLiteral) {\n            this.state = 190;\n            this.versionConstraint();\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction VersionOperatorContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_versionOperator;\n    return this;\n}\n\nVersionOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nVersionOperatorContext.prototype.constructor = VersionOperatorContext;\n\nVersionOperatorContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterVersionOperator(this);\n    }\n};\n\nVersionOperatorContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitVersionOperator(this);\n    }\n};\n\nSolidityParser.VersionOperatorContext = VersionOperatorContext;\n\nSolidityParser.prototype.versionOperator = function () {\n\n    var localctx = new VersionOperatorContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 10, SolidityParser.RULE_versionOperator);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 193;\n        _la = this._input.LA(1);\n        if (!((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__2 | 1 << SolidityParser.T__3 | 1 << SolidityParser.T__4 | 1 << SolidityParser.T__5 | 1 << SolidityParser.T__6 | 1 << SolidityParser.T__7 | 1 << SolidityParser.T__8)) !== 0)) {\n            this._errHandler.recoverInline(this);\n        } else {\n            this._errHandler.reportMatch(this);\n            this.consume();\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction VersionConstraintContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_versionConstraint;\n    return this;\n}\n\nVersionConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nVersionConstraintContext.prototype.constructor = VersionConstraintContext;\n\nVersionConstraintContext.prototype.VersionLiteral = function () {\n    return this.getToken(SolidityParser.VersionLiteral, 0);\n};\n\nVersionConstraintContext.prototype.versionOperator = function () {\n    return this.getTypedRuleContext(VersionOperatorContext, 0);\n};\n\nVersionConstraintContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterVersionConstraint(this);\n    }\n};\n\nVersionConstraintContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitVersionConstraint(this);\n    }\n};\n\nSolidityParser.VersionConstraintContext = VersionConstraintContext;\n\nSolidityParser.prototype.versionConstraint = function () {\n\n    var localctx = new VersionConstraintContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 12, SolidityParser.RULE_versionConstraint);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 196;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__2 | 1 << SolidityParser.T__3 | 1 << SolidityParser.T__4 | 1 << SolidityParser.T__5 | 1 << SolidityParser.T__6 | 1 << SolidityParser.T__7 | 1 << SolidityParser.T__8)) !== 0) {\n            this.state = 195;\n            this.versionOperator();\n        }\n\n        this.state = 198;\n        this.match(SolidityParser.VersionLiteral);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction ImportDeclarationContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_importDeclaration;\n    return this;\n}\n\nImportDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nImportDeclarationContext.prototype.constructor = ImportDeclarationContext;\n\nImportDeclarationContext.prototype.identifier = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(IdentifierContext);\n    } else {\n        return this.getTypedRuleContext(IdentifierContext, i);\n    }\n};\n\nImportDeclarationContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterImportDeclaration(this);\n    }\n};\n\nImportDeclarationContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitImportDeclaration(this);\n    }\n};\n\nSolidityParser.ImportDeclarationContext = ImportDeclarationContext;\n\nSolidityParser.prototype.importDeclaration = function () {\n\n    var localctx = new ImportDeclarationContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 14, SolidityParser.RULE_importDeclaration);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 200;\n        this.identifier();\n        this.state = 203;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === SolidityParser.T__9) {\n            this.state = 201;\n            this.match(SolidityParser.T__9);\n            this.state = 202;\n            this.identifier();\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction ImportDirectiveContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_importDirective;\n    return this;\n}\n\nImportDirectiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nImportDirectiveContext.prototype.constructor = ImportDirectiveContext;\n\nImportDirectiveContext.prototype.StringLiteral = function () {\n    return this.getToken(SolidityParser.StringLiteral, 0);\n};\n\nImportDirectiveContext.prototype.identifier = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(IdentifierContext);\n    } else {\n        return this.getTypedRuleContext(IdentifierContext, i);\n    }\n};\n\nImportDirectiveContext.prototype.importDeclaration = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(ImportDeclarationContext);\n    } else {\n        return this.getTypedRuleContext(ImportDeclarationContext, i);\n    }\n};\n\nImportDirectiveContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterImportDirective(this);\n    }\n};\n\nImportDirectiveContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitImportDirective(this);\n    }\n};\n\nSolidityParser.ImportDirectiveContext = ImportDirectiveContext;\n\nSolidityParser.prototype.importDirective = function () {\n\n    var localctx = new ImportDirectiveContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 16, SolidityParser.RULE_importDirective);\n    var _la = 0; // Token type\n    try {\n        this.state = 239;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 10, this._ctx);\n        switch (la_) {\n            case 1:\n                this.enterOuterAlt(localctx, 1);\n                this.state = 205;\n                this.match(SolidityParser.T__10);\n                this.state = 206;\n                this.match(SolidityParser.StringLiteral);\n                this.state = 209;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n                if (_la === SolidityParser.T__9) {\n                    this.state = 207;\n                    this.match(SolidityParser.T__9);\n                    this.state = 208;\n                    this.identifier();\n                }\n\n                this.state = 211;\n                this.match(SolidityParser.T__1);\n                break;\n\n            case 2:\n                this.enterOuterAlt(localctx, 2);\n                this.state = 212;\n                this.match(SolidityParser.T__10);\n                this.state = 215;\n                this._errHandler.sync(this);\n                switch (this._input.LA(1)) {\n                    case SolidityParser.T__11:\n                        this.state = 213;\n                        this.match(SolidityParser.T__11);\n                        break;\n                    case SolidityParser.T__12:\n                    case SolidityParser.T__39:\n                    case SolidityParser.Identifier:\n                        this.state = 214;\n                        this.identifier();\n                        break;\n                    default:\n                        throw new antlr4.error.NoViableAltException(this);\n                }\n                this.state = 219;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n                if (_la === SolidityParser.T__9) {\n                    this.state = 217;\n                    this.match(SolidityParser.T__9);\n                    this.state = 218;\n                    this.identifier();\n                }\n\n                this.state = 221;\n                this.match(SolidityParser.T__12);\n                this.state = 222;\n                this.match(SolidityParser.StringLiteral);\n                this.state = 223;\n                this.match(SolidityParser.T__1);\n                break;\n\n            case 3:\n                this.enterOuterAlt(localctx, 3);\n                this.state = 224;\n                this.match(SolidityParser.T__10);\n                this.state = 225;\n                this.match(SolidityParser.T__13);\n                this.state = 226;\n                this.importDeclaration();\n                this.state = 231;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n                while (_la === SolidityParser.T__14) {\n                    this.state = 227;\n                    this.match(SolidityParser.T__14);\n                    this.state = 228;\n                    this.importDeclaration();\n                    this.state = 233;\n                    this._errHandler.sync(this);\n                    _la = this._input.LA(1);\n                }\n                this.state = 234;\n                this.match(SolidityParser.T__15);\n                this.state = 235;\n                this.match(SolidityParser.T__12);\n                this.state = 236;\n                this.match(SolidityParser.StringLiteral);\n                this.state = 237;\n                this.match(SolidityParser.T__1);\n                break;\n\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction ContractDefinitionContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_contractDefinition;\n    return this;\n}\n\nContractDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nContractDefinitionContext.prototype.constructor = ContractDefinitionContext;\n\nContractDefinitionContext.prototype.identifier = function () {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n};\n\nContractDefinitionContext.prototype.inheritanceSpecifier = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(InheritanceSpecifierContext);\n    } else {\n        return this.getTypedRuleContext(InheritanceSpecifierContext, i);\n    }\n};\n\nContractDefinitionContext.prototype.contractPart = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(ContractPartContext);\n    } else {\n        return this.getTypedRuleContext(ContractPartContext, i);\n    }\n};\n\nContractDefinitionContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterContractDefinition(this);\n    }\n};\n\nContractDefinitionContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitContractDefinition(this);\n    }\n};\n\nSolidityParser.ContractDefinitionContext = ContractDefinitionContext;\n\nSolidityParser.prototype.contractDefinition = function () {\n\n    var localctx = new ContractDefinitionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 18, SolidityParser.RULE_contractDefinition);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 241;\n        _la = this._input.LA(1);\n        if (!((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__16 | 1 << SolidityParser.T__17 | 1 << SolidityParser.T__18)) !== 0)) {\n            this._errHandler.recoverInline(this);\n        } else {\n            this._errHandler.reportMatch(this);\n            this.consume();\n        }\n        this.state = 242;\n        this.identifier();\n        this.state = 252;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === SolidityParser.T__19) {\n            this.state = 243;\n            this.match(SolidityParser.T__19);\n            this.state = 244;\n            this.inheritanceSpecifier();\n            this.state = 249;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            while (_la === SolidityParser.T__14) {\n                this.state = 245;\n                this.match(SolidityParser.T__14);\n                this.state = 246;\n                this.inheritanceSpecifier();\n                this.state = 251;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n            }\n        }\n\n        this.state = 254;\n        this.match(SolidityParser.T__13);\n        this.state = 258;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__12 | 1 << SolidityParser.T__22 | 1 << SolidityParser.T__24 | 1 << SolidityParser.T__25 | 1 << SolidityParser.T__26 | 1 << SolidityParser.T__27 | 1 << SolidityParser.T__29 | 1 << SolidityParser.T__30)) !== 0 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__35 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__48 - 34 | 1 << SolidityParser.T__49 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34)) !== 0 || (_la - 91 & ~0x1f) == 0 && (1 << _la - 91 & (1 << SolidityParser.Int - 91 | 1 << SolidityParser.Uint - 91 | 1 << SolidityParser.Byte - 91 | 1 << SolidityParser.Fixed - 91 | 1 << SolidityParser.Ufixed - 91 | 1 << SolidityParser.Identifier - 91)) !== 0) {\n            this.state = 255;\n            this.contractPart();\n            this.state = 260;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n        }\n        this.state = 261;\n        this.match(SolidityParser.T__15);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction InheritanceSpecifierContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_inheritanceSpecifier;\n    return this;\n}\n\nInheritanceSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nInheritanceSpecifierContext.prototype.constructor = InheritanceSpecifierContext;\n\nInheritanceSpecifierContext.prototype.userDefinedTypeName = function () {\n    return this.getTypedRuleContext(UserDefinedTypeNameContext, 0);\n};\n\nInheritanceSpecifierContext.prototype.expressionList = function () {\n    return this.getTypedRuleContext(ExpressionListContext, 0);\n};\n\nInheritanceSpecifierContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterInheritanceSpecifier(this);\n    }\n};\n\nInheritanceSpecifierContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitInheritanceSpecifier(this);\n    }\n};\n\nSolidityParser.InheritanceSpecifierContext = InheritanceSpecifierContext;\n\nSolidityParser.prototype.inheritanceSpecifier = function () {\n\n    var localctx = new InheritanceSpecifierContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 20, SolidityParser.RULE_inheritanceSpecifier);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 263;\n        this.userDefinedTypeName();\n        this.state = 269;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === SolidityParser.T__20) {\n            this.state = 264;\n            this.match(SolidityParser.T__20);\n            this.state = 266;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__20)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__48 - 32 | 1 << SolidityParser.T__49 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__57 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32)) !== 0 || (_la - 91 & ~0x1f) == 0 && (1 << _la - 91 & (1 << SolidityParser.Int - 91 | 1 << SolidityParser.Uint - 91 | 1 << SolidityParser.Byte - 91 | 1 << SolidityParser.Fixed - 91 | 1 << SolidityParser.Ufixed - 91 | 1 << SolidityParser.BooleanLiteral - 91 | 1 << SolidityParser.DecimalNumber - 91 | 1 << SolidityParser.HexNumber - 91 | 1 << SolidityParser.HexLiteral - 91 | 1 << SolidityParser.TypeKeyword - 91 | 1 << SolidityParser.Identifier - 91 | 1 << SolidityParser.StringLiteral - 91)) !== 0) {\n                this.state = 265;\n                this.expressionList();\n            }\n\n            this.state = 268;\n            this.match(SolidityParser.T__21);\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction ContractPartContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_contractPart;\n    return this;\n}\n\nContractPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nContractPartContext.prototype.constructor = ContractPartContext;\n\nContractPartContext.prototype.stateVariableDeclaration = function () {\n    return this.getTypedRuleContext(StateVariableDeclarationContext, 0);\n};\n\nContractPartContext.prototype.usingForDeclaration = function () {\n    return this.getTypedRuleContext(UsingForDeclarationContext, 0);\n};\n\nContractPartContext.prototype.structDefinition = function () {\n    return this.getTypedRuleContext(StructDefinitionContext, 0);\n};\n\nContractPartContext.prototype.constructorDefinition = function () {\n    return this.getTypedRuleContext(ConstructorDefinitionContext, 0);\n};\n\nContractPartContext.prototype.modifierDefinition = function () {\n    return this.getTypedRuleContext(ModifierDefinitionContext, 0);\n};\n\nContractPartContext.prototype.functionDefinition = function () {\n    return this.getTypedRuleContext(FunctionDefinitionContext, 0);\n};\n\nContractPartContext.prototype.eventDefinition = function () {\n    return this.getTypedRuleContext(EventDefinitionContext, 0);\n};\n\nContractPartContext.prototype.enumDefinition = function () {\n    return this.getTypedRuleContext(EnumDefinitionContext, 0);\n};\n\nContractPartContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterContractPart(this);\n    }\n};\n\nContractPartContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitContractPart(this);\n    }\n};\n\nSolidityParser.ContractPartContext = ContractPartContext;\n\nSolidityParser.prototype.contractPart = function () {\n\n    var localctx = new ContractPartContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 22, SolidityParser.RULE_contractPart);\n    try {\n        this.state = 279;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 16, this._ctx);\n        switch (la_) {\n            case 1:\n                this.enterOuterAlt(localctx, 1);\n                this.state = 271;\n                this.stateVariableDeclaration();\n                break;\n\n            case 2:\n                this.enterOuterAlt(localctx, 2);\n                this.state = 272;\n                this.usingForDeclaration();\n                break;\n\n            case 3:\n                this.enterOuterAlt(localctx, 3);\n                this.state = 273;\n                this.structDefinition();\n                break;\n\n            case 4:\n                this.enterOuterAlt(localctx, 4);\n                this.state = 274;\n                this.constructorDefinition();\n                break;\n\n            case 5:\n                this.enterOuterAlt(localctx, 5);\n                this.state = 275;\n                this.modifierDefinition();\n                break;\n\n            case 6:\n                this.enterOuterAlt(localctx, 6);\n                this.state = 276;\n                this.functionDefinition();\n                break;\n\n            case 7:\n                this.enterOuterAlt(localctx, 7);\n                this.state = 277;\n                this.eventDefinition();\n                break;\n\n            case 8:\n                this.enterOuterAlt(localctx, 8);\n                this.state = 278;\n                this.enumDefinition();\n                break;\n\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction StateVariableDeclarationContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_stateVariableDeclaration;\n    return this;\n}\n\nStateVariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nStateVariableDeclarationContext.prototype.constructor = StateVariableDeclarationContext;\n\nStateVariableDeclarationContext.prototype.typeName = function () {\n    return this.getTypedRuleContext(TypeNameContext, 0);\n};\n\nStateVariableDeclarationContext.prototype.identifier = function () {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n};\n\nStateVariableDeclarationContext.prototype.expression = function () {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n};\n\nStateVariableDeclarationContext.prototype.PublicKeyword = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTokens(SolidityParser.PublicKeyword);\n    } else {\n        return this.getToken(SolidityParser.PublicKeyword, i);\n    }\n};\n\nStateVariableDeclarationContext.prototype.InternalKeyword = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTokens(SolidityParser.InternalKeyword);\n    } else {\n        return this.getToken(SolidityParser.InternalKeyword, i);\n    }\n};\n\nStateVariableDeclarationContext.prototype.PrivateKeyword = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTokens(SolidityParser.PrivateKeyword);\n    } else {\n        return this.getToken(SolidityParser.PrivateKeyword, i);\n    }\n};\n\nStateVariableDeclarationContext.prototype.ConstantKeyword = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTokens(SolidityParser.ConstantKeyword);\n    } else {\n        return this.getToken(SolidityParser.ConstantKeyword, i);\n    }\n};\n\nStateVariableDeclarationContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterStateVariableDeclaration(this);\n    }\n};\n\nStateVariableDeclarationContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitStateVariableDeclaration(this);\n    }\n};\n\nSolidityParser.StateVariableDeclarationContext = StateVariableDeclarationContext;\n\nSolidityParser.prototype.stateVariableDeclaration = function () {\n\n    var localctx = new StateVariableDeclarationContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 24, SolidityParser.RULE_stateVariableDeclaration);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 281;\n        this.typeName(0);\n        this.state = 285;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while ((_la - 105 & ~0x1f) == 0 && (1 << _la - 105 & (1 << SolidityParser.ConstantKeyword - 105 | 1 << SolidityParser.InternalKeyword - 105 | 1 << SolidityParser.PrivateKeyword - 105 | 1 << SolidityParser.PublicKeyword - 105)) !== 0) {\n            this.state = 282;\n            _la = this._input.LA(1);\n            if (!((_la - 105 & ~0x1f) == 0 && (1 << _la - 105 & (1 << SolidityParser.ConstantKeyword - 105 | 1 << SolidityParser.InternalKeyword - 105 | 1 << SolidityParser.PrivateKeyword - 105 | 1 << SolidityParser.PublicKeyword - 105)) !== 0)) {\n                this._errHandler.recoverInline(this);\n            } else {\n                this._errHandler.reportMatch(this);\n                this.consume();\n            }\n            this.state = 287;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n        }\n        this.state = 288;\n        this.identifier();\n        this.state = 291;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === SolidityParser.T__8) {\n            this.state = 289;\n            this.match(SolidityParser.T__8);\n            this.state = 290;\n            this.expression(0);\n        }\n\n        this.state = 293;\n        this.match(SolidityParser.T__1);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction UsingForDeclarationContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_usingForDeclaration;\n    return this;\n}\n\nUsingForDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nUsingForDeclarationContext.prototype.constructor = UsingForDeclarationContext;\n\nUsingForDeclarationContext.prototype.identifier = function () {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n};\n\nUsingForDeclarationContext.prototype.typeName = function () {\n    return this.getTypedRuleContext(TypeNameContext, 0);\n};\n\nUsingForDeclarationContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterUsingForDeclaration(this);\n    }\n};\n\nUsingForDeclarationContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitUsingForDeclaration(this);\n    }\n};\n\nSolidityParser.UsingForDeclarationContext = UsingForDeclarationContext;\n\nSolidityParser.prototype.usingForDeclaration = function () {\n\n    var localctx = new UsingForDeclarationContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 26, SolidityParser.RULE_usingForDeclaration);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 295;\n        this.match(SolidityParser.T__22);\n        this.state = 296;\n        this.identifier();\n        this.state = 297;\n        this.match(SolidityParser.T__23);\n        this.state = 300;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n            case SolidityParser.T__11:\n                this.state = 298;\n                this.match(SolidityParser.T__11);\n                break;\n            case SolidityParser.T__12:\n            case SolidityParser.T__27:\n            case SolidityParser.T__33:\n            case SolidityParser.T__35:\n            case SolidityParser.T__39:\n            case SolidityParser.T__48:\n            case SolidityParser.T__49:\n            case SolidityParser.T__50:\n            case SolidityParser.T__51:\n            case SolidityParser.Int:\n            case SolidityParser.Uint:\n            case SolidityParser.Byte:\n            case SolidityParser.Fixed:\n            case SolidityParser.Ufixed:\n            case SolidityParser.Identifier:\n                this.state = 299;\n                this.typeName(0);\n                break;\n            default:\n                throw new antlr4.error.NoViableAltException(this);\n        }\n        this.state = 302;\n        this.match(SolidityParser.T__1);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction StructDefinitionContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_structDefinition;\n    return this;\n}\n\nStructDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nStructDefinitionContext.prototype.constructor = StructDefinitionContext;\n\nStructDefinitionContext.prototype.identifier = function () {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n};\n\nStructDefinitionContext.prototype.variableDeclaration = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(VariableDeclarationContext);\n    } else {\n        return this.getTypedRuleContext(VariableDeclarationContext, i);\n    }\n};\n\nStructDefinitionContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterStructDefinition(this);\n    }\n};\n\nStructDefinitionContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitStructDefinition(this);\n    }\n};\n\nSolidityParser.StructDefinitionContext = StructDefinitionContext;\n\nSolidityParser.prototype.structDefinition = function () {\n\n    var localctx = new StructDefinitionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 28, SolidityParser.RULE_structDefinition);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 304;\n        this.match(SolidityParser.T__24);\n        this.state = 305;\n        this.identifier();\n        this.state = 306;\n        this.match(SolidityParser.T__13);\n        this.state = 317;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__27 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__35 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__48 - 34 | 1 << SolidityParser.T__49 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34)) !== 0 || (_la - 91 & ~0x1f) == 0 && (1 << _la - 91 & (1 << SolidityParser.Int - 91 | 1 << SolidityParser.Uint - 91 | 1 << SolidityParser.Byte - 91 | 1 << SolidityParser.Fixed - 91 | 1 << SolidityParser.Ufixed - 91 | 1 << SolidityParser.Identifier - 91)) !== 0) {\n            this.state = 307;\n            this.variableDeclaration();\n            this.state = 308;\n            this.match(SolidityParser.T__1);\n            this.state = 314;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            while (_la === SolidityParser.T__12 || _la === SolidityParser.T__27 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__35 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__48 - 34 | 1 << SolidityParser.T__49 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34)) !== 0 || (_la - 91 & ~0x1f) == 0 && (1 << _la - 91 & (1 << SolidityParser.Int - 91 | 1 << SolidityParser.Uint - 91 | 1 << SolidityParser.Byte - 91 | 1 << SolidityParser.Fixed - 91 | 1 << SolidityParser.Ufixed - 91 | 1 << SolidityParser.Identifier - 91)) !== 0) {\n                this.state = 309;\n                this.variableDeclaration();\n                this.state = 310;\n                this.match(SolidityParser.T__1);\n                this.state = 316;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n            }\n        }\n\n        this.state = 319;\n        this.match(SolidityParser.T__15);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction ConstructorDefinitionContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_constructorDefinition;\n    return this;\n}\n\nConstructorDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nConstructorDefinitionContext.prototype.constructor = ConstructorDefinitionContext;\n\nConstructorDefinitionContext.prototype.parameterList = function () {\n    return this.getTypedRuleContext(ParameterListContext, 0);\n};\n\nConstructorDefinitionContext.prototype.modifierList = function () {\n    return this.getTypedRuleContext(ModifierListContext, 0);\n};\n\nConstructorDefinitionContext.prototype.block = function () {\n    return this.getTypedRuleContext(BlockContext, 0);\n};\n\nConstructorDefinitionContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterConstructorDefinition(this);\n    }\n};\n\nConstructorDefinitionContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitConstructorDefinition(this);\n    }\n};\n\nSolidityParser.ConstructorDefinitionContext = ConstructorDefinitionContext;\n\nSolidityParser.prototype.constructorDefinition = function () {\n\n    var localctx = new ConstructorDefinitionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 30, SolidityParser.RULE_constructorDefinition);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 321;\n        this.match(SolidityParser.T__25);\n        this.state = 322;\n        this.parameterList();\n        this.state = 323;\n        this.modifierList();\n        this.state = 324;\n        this.block();\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction ModifierDefinitionContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_modifierDefinition;\n    return this;\n}\n\nModifierDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nModifierDefinitionContext.prototype.constructor = ModifierDefinitionContext;\n\nModifierDefinitionContext.prototype.identifier = function () {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n};\n\nModifierDefinitionContext.prototype.block = function () {\n    return this.getTypedRuleContext(BlockContext, 0);\n};\n\nModifierDefinitionContext.prototype.parameterList = function () {\n    return this.getTypedRuleContext(ParameterListContext, 0);\n};\n\nModifierDefinitionContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterModifierDefinition(this);\n    }\n};\n\nModifierDefinitionContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitModifierDefinition(this);\n    }\n};\n\nSolidityParser.ModifierDefinitionContext = ModifierDefinitionContext;\n\nSolidityParser.prototype.modifierDefinition = function () {\n\n    var localctx = new ModifierDefinitionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 32, SolidityParser.RULE_modifierDefinition);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 326;\n        this.match(SolidityParser.T__26);\n        this.state = 327;\n        this.identifier();\n        this.state = 329;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === SolidityParser.T__20) {\n            this.state = 328;\n            this.parameterList();\n        }\n\n        this.state = 331;\n        this.block();\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction ModifierInvocationContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_modifierInvocation;\n    return this;\n}\n\nModifierInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nModifierInvocationContext.prototype.constructor = ModifierInvocationContext;\n\nModifierInvocationContext.prototype.identifier = function () {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n};\n\nModifierInvocationContext.prototype.expressionList = function () {\n    return this.getTypedRuleContext(ExpressionListContext, 0);\n};\n\nModifierInvocationContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterModifierInvocation(this);\n    }\n};\n\nModifierInvocationContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitModifierInvocation(this);\n    }\n};\n\nSolidityParser.ModifierInvocationContext = ModifierInvocationContext;\n\nSolidityParser.prototype.modifierInvocation = function () {\n\n    var localctx = new ModifierInvocationContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 34, SolidityParser.RULE_modifierInvocation);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 333;\n        this.identifier();\n        this.state = 339;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === SolidityParser.T__20) {\n            this.state = 334;\n            this.match(SolidityParser.T__20);\n            this.state = 336;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__20)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__48 - 32 | 1 << SolidityParser.T__49 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__57 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32)) !== 0 || (_la - 91 & ~0x1f) == 0 && (1 << _la - 91 & (1 << SolidityParser.Int - 91 | 1 << SolidityParser.Uint - 91 | 1 << SolidityParser.Byte - 91 | 1 << SolidityParser.Fixed - 91 | 1 << SolidityParser.Ufixed - 91 | 1 << SolidityParser.BooleanLiteral - 91 | 1 << SolidityParser.DecimalNumber - 91 | 1 << SolidityParser.HexNumber - 91 | 1 << SolidityParser.HexLiteral - 91 | 1 << SolidityParser.TypeKeyword - 91 | 1 << SolidityParser.Identifier - 91 | 1 << SolidityParser.StringLiteral - 91)) !== 0) {\n                this.state = 335;\n                this.expressionList();\n            }\n\n            this.state = 338;\n            this.match(SolidityParser.T__21);\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction FunctionDefinitionContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_functionDefinition;\n    return this;\n}\n\nFunctionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nFunctionDefinitionContext.prototype.constructor = FunctionDefinitionContext;\n\nFunctionDefinitionContext.prototype.parameterList = function () {\n    return this.getTypedRuleContext(ParameterListContext, 0);\n};\n\nFunctionDefinitionContext.prototype.modifierList = function () {\n    return this.getTypedRuleContext(ModifierListContext, 0);\n};\n\nFunctionDefinitionContext.prototype.block = function () {\n    return this.getTypedRuleContext(BlockContext, 0);\n};\n\nFunctionDefinitionContext.prototype.identifier = function () {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n};\n\nFunctionDefinitionContext.prototype.returnParameters = function () {\n    return this.getTypedRuleContext(ReturnParametersContext, 0);\n};\n\nFunctionDefinitionContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterFunctionDefinition(this);\n    }\n};\n\nFunctionDefinitionContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitFunctionDefinition(this);\n    }\n};\n\nSolidityParser.FunctionDefinitionContext = FunctionDefinitionContext;\n\nSolidityParser.prototype.functionDefinition = function () {\n\n    var localctx = new FunctionDefinitionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 36, SolidityParser.RULE_functionDefinition);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 341;\n        this.match(SolidityParser.T__27);\n        this.state = 343;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || _la === SolidityParser.Identifier) {\n            this.state = 342;\n            this.identifier();\n        }\n\n        this.state = 345;\n        this.parameterList();\n        this.state = 346;\n        this.modifierList();\n        this.state = 348;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === SolidityParser.T__28) {\n            this.state = 347;\n            this.returnParameters();\n        }\n\n        this.state = 352;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n            case SolidityParser.T__1:\n                this.state = 350;\n                this.match(SolidityParser.T__1);\n                break;\n            case SolidityParser.T__13:\n                this.state = 351;\n                this.block();\n                break;\n            default:\n                throw new antlr4.error.NoViableAltException(this);\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction ReturnParametersContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_returnParameters;\n    return this;\n}\n\nReturnParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nReturnParametersContext.prototype.constructor = ReturnParametersContext;\n\nReturnParametersContext.prototype.parameterList = function () {\n    return this.getTypedRuleContext(ParameterListContext, 0);\n};\n\nReturnParametersContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterReturnParameters(this);\n    }\n};\n\nReturnParametersContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitReturnParameters(this);\n    }\n};\n\nSolidityParser.ReturnParametersContext = ReturnParametersContext;\n\nSolidityParser.prototype.returnParameters = function () {\n\n    var localctx = new ReturnParametersContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 38, SolidityParser.RULE_returnParameters);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 354;\n        this.match(SolidityParser.T__28);\n        this.state = 355;\n        this.parameterList();\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction ModifierListContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_modifierList;\n    return this;\n}\n\nModifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nModifierListContext.prototype.constructor = ModifierListContext;\n\nModifierListContext.prototype.modifierInvocation = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(ModifierInvocationContext);\n    } else {\n        return this.getTypedRuleContext(ModifierInvocationContext, i);\n    }\n};\n\nModifierListContext.prototype.stateMutability = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(StateMutabilityContext);\n    } else {\n        return this.getTypedRuleContext(StateMutabilityContext, i);\n    }\n};\n\nModifierListContext.prototype.ExternalKeyword = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTokens(SolidityParser.ExternalKeyword);\n    } else {\n        return this.getToken(SolidityParser.ExternalKeyword, i);\n    }\n};\n\nModifierListContext.prototype.PublicKeyword = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTokens(SolidityParser.PublicKeyword);\n    } else {\n        return this.getToken(SolidityParser.PublicKeyword, i);\n    }\n};\n\nModifierListContext.prototype.InternalKeyword = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTokens(SolidityParser.InternalKeyword);\n    } else {\n        return this.getToken(SolidityParser.InternalKeyword, i);\n    }\n};\n\nModifierListContext.prototype.PrivateKeyword = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTokens(SolidityParser.PrivateKeyword);\n    } else {\n        return this.getToken(SolidityParser.PrivateKeyword, i);\n    }\n};\n\nModifierListContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterModifierList(this);\n    }\n};\n\nModifierListContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitModifierList(this);\n    }\n};\n\nSolidityParser.ModifierListContext = ModifierListContext;\n\nSolidityParser.prototype.modifierList = function () {\n\n    var localctx = new ModifierListContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 40, SolidityParser.RULE_modifierList);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 365;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || (_la - 105 & ~0x1f) == 0 && (1 << _la - 105 & (1 << SolidityParser.ConstantKeyword - 105 | 1 << SolidityParser.ExternalKeyword - 105 | 1 << SolidityParser.InternalKeyword - 105 | 1 << SolidityParser.PayableKeyword - 105 | 1 << SolidityParser.PrivateKeyword - 105 | 1 << SolidityParser.PublicKeyword - 105 | 1 << SolidityParser.PureKeyword - 105 | 1 << SolidityParser.ViewKeyword - 105 | 1 << SolidityParser.Identifier - 105)) !== 0) {\n            this.state = 363;\n            this._errHandler.sync(this);\n            switch (this._input.LA(1)) {\n                case SolidityParser.T__12:\n                case SolidityParser.T__39:\n                case SolidityParser.Identifier:\n                    this.state = 357;\n                    this.modifierInvocation();\n                    break;\n                case SolidityParser.ConstantKeyword:\n                case SolidityParser.PayableKeyword:\n                case SolidityParser.PureKeyword:\n                case SolidityParser.ViewKeyword:\n                    this.state = 358;\n                    this.stateMutability();\n                    break;\n                case SolidityParser.ExternalKeyword:\n                    this.state = 359;\n                    this.match(SolidityParser.ExternalKeyword);\n                    break;\n                case SolidityParser.PublicKeyword:\n                    this.state = 360;\n                    this.match(SolidityParser.PublicKeyword);\n                    break;\n                case SolidityParser.InternalKeyword:\n                    this.state = 361;\n                    this.match(SolidityParser.InternalKeyword);\n                    break;\n                case SolidityParser.PrivateKeyword:\n                    this.state = 362;\n                    this.match(SolidityParser.PrivateKeyword);\n                    break;\n                default:\n                    throw new antlr4.error.NoViableAltException(this);\n            }\n            this.state = 367;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction EventDefinitionContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_eventDefinition;\n    return this;\n}\n\nEventDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nEventDefinitionContext.prototype.constructor = EventDefinitionContext;\n\nEventDefinitionContext.prototype.identifier = function () {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n};\n\nEventDefinitionContext.prototype.eventParameterList = function () {\n    return this.getTypedRuleContext(EventParameterListContext, 0);\n};\n\nEventDefinitionContext.prototype.AnonymousKeyword = function () {\n    return this.getToken(SolidityParser.AnonymousKeyword, 0);\n};\n\nEventDefinitionContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterEventDefinition(this);\n    }\n};\n\nEventDefinitionContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitEventDefinition(this);\n    }\n};\n\nSolidityParser.EventDefinitionContext = EventDefinitionContext;\n\nSolidityParser.prototype.eventDefinition = function () {\n\n    var localctx = new EventDefinitionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 42, SolidityParser.RULE_eventDefinition);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 368;\n        this.match(SolidityParser.T__29);\n        this.state = 369;\n        this.identifier();\n        this.state = 370;\n        this.eventParameterList();\n        this.state = 372;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === SolidityParser.AnonymousKeyword) {\n            this.state = 371;\n            this.match(SolidityParser.AnonymousKeyword);\n        }\n\n        this.state = 374;\n        this.match(SolidityParser.T__1);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction EnumValueContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_enumValue;\n    return this;\n}\n\nEnumValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nEnumValueContext.prototype.constructor = EnumValueContext;\n\nEnumValueContext.prototype.identifier = function () {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n};\n\nEnumValueContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterEnumValue(this);\n    }\n};\n\nEnumValueContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitEnumValue(this);\n    }\n};\n\nSolidityParser.EnumValueContext = EnumValueContext;\n\nSolidityParser.prototype.enumValue = function () {\n\n    var localctx = new EnumValueContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 44, SolidityParser.RULE_enumValue);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 376;\n        this.identifier();\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction EnumDefinitionContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_enumDefinition;\n    return this;\n}\n\nEnumDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nEnumDefinitionContext.prototype.constructor = EnumDefinitionContext;\n\nEnumDefinitionContext.prototype.identifier = function () {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n};\n\nEnumDefinitionContext.prototype.enumValue = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(EnumValueContext);\n    } else {\n        return this.getTypedRuleContext(EnumValueContext, i);\n    }\n};\n\nEnumDefinitionContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterEnumDefinition(this);\n    }\n};\n\nEnumDefinitionContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitEnumDefinition(this);\n    }\n};\n\nSolidityParser.EnumDefinitionContext = EnumDefinitionContext;\n\nSolidityParser.prototype.enumDefinition = function () {\n\n    var localctx = new EnumDefinitionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 46, SolidityParser.RULE_enumDefinition);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 378;\n        this.match(SolidityParser.T__30);\n        this.state = 379;\n        this.identifier();\n        this.state = 380;\n        this.match(SolidityParser.T__13);\n        this.state = 382;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || _la === SolidityParser.Identifier) {\n            this.state = 381;\n            this.enumValue();\n        }\n\n        this.state = 388;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while (_la === SolidityParser.T__14) {\n            this.state = 384;\n            this.match(SolidityParser.T__14);\n            this.state = 385;\n            this.enumValue();\n            this.state = 390;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n        }\n        this.state = 391;\n        this.match(SolidityParser.T__15);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction ParameterListContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_parameterList;\n    return this;\n}\n\nParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nParameterListContext.prototype.constructor = ParameterListContext;\n\nParameterListContext.prototype.parameter = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(ParameterContext);\n    } else {\n        return this.getTypedRuleContext(ParameterContext, i);\n    }\n};\n\nParameterListContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterParameterList(this);\n    }\n};\n\nParameterListContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitParameterList(this);\n    }\n};\n\nSolidityParser.ParameterListContext = ParameterListContext;\n\nSolidityParser.prototype.parameterList = function () {\n\n    var localctx = new ParameterListContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 48, SolidityParser.RULE_parameterList);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 393;\n        this.match(SolidityParser.T__20);\n        this.state = 402;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__27 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__35 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__48 - 34 | 1 << SolidityParser.T__49 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34)) !== 0 || (_la - 91 & ~0x1f) == 0 && (1 << _la - 91 & (1 << SolidityParser.Int - 91 | 1 << SolidityParser.Uint - 91 | 1 << SolidityParser.Byte - 91 | 1 << SolidityParser.Fixed - 91 | 1 << SolidityParser.Ufixed - 91 | 1 << SolidityParser.Identifier - 91)) !== 0) {\n            this.state = 394;\n            this.parameter();\n            this.state = 399;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            while (_la === SolidityParser.T__14) {\n                this.state = 395;\n                this.match(SolidityParser.T__14);\n                this.state = 396;\n                this.parameter();\n                this.state = 401;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n            }\n        }\n\n        this.state = 404;\n        this.match(SolidityParser.T__21);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction ParameterContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_parameter;\n    return this;\n}\n\nParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nParameterContext.prototype.constructor = ParameterContext;\n\nParameterContext.prototype.typeName = function () {\n    return this.getTypedRuleContext(TypeNameContext, 0);\n};\n\nParameterContext.prototype.storageLocation = function () {\n    return this.getTypedRuleContext(StorageLocationContext, 0);\n};\n\nParameterContext.prototype.identifier = function () {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n};\n\nParameterContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterParameter(this);\n    }\n};\n\nParameterContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitParameter(this);\n    }\n};\n\nSolidityParser.ParameterContext = ParameterContext;\n\nSolidityParser.prototype.parameter = function () {\n\n    var localctx = new ParameterContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 50, SolidityParser.RULE_parameter);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 406;\n        this.typeName(0);\n        this.state = 408;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 35, this._ctx);\n        if (la_ === 1) {\n            this.state = 407;\n            this.storageLocation();\n        }\n        this.state = 411;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || _la === SolidityParser.Identifier) {\n            this.state = 410;\n            this.identifier();\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction EventParameterListContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_eventParameterList;\n    return this;\n}\n\nEventParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nEventParameterListContext.prototype.constructor = EventParameterListContext;\n\nEventParameterListContext.prototype.eventParameter = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(EventParameterContext);\n    } else {\n        return this.getTypedRuleContext(EventParameterContext, i);\n    }\n};\n\nEventParameterListContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterEventParameterList(this);\n    }\n};\n\nEventParameterListContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitEventParameterList(this);\n    }\n};\n\nSolidityParser.EventParameterListContext = EventParameterListContext;\n\nSolidityParser.prototype.eventParameterList = function () {\n\n    var localctx = new EventParameterListContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 52, SolidityParser.RULE_eventParameterList);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 413;\n        this.match(SolidityParser.T__20);\n        this.state = 422;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__27 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__35 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__48 - 34 | 1 << SolidityParser.T__49 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34)) !== 0 || (_la - 91 & ~0x1f) == 0 && (1 << _la - 91 & (1 << SolidityParser.Int - 91 | 1 << SolidityParser.Uint - 91 | 1 << SolidityParser.Byte - 91 | 1 << SolidityParser.Fixed - 91 | 1 << SolidityParser.Ufixed - 91 | 1 << SolidityParser.Identifier - 91)) !== 0) {\n            this.state = 414;\n            this.eventParameter();\n            this.state = 419;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            while (_la === SolidityParser.T__14) {\n                this.state = 415;\n                this.match(SolidityParser.T__14);\n                this.state = 416;\n                this.eventParameter();\n                this.state = 421;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n            }\n        }\n\n        this.state = 424;\n        this.match(SolidityParser.T__21);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction EventParameterContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_eventParameter;\n    return this;\n}\n\nEventParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nEventParameterContext.prototype.constructor = EventParameterContext;\n\nEventParameterContext.prototype.typeName = function () {\n    return this.getTypedRuleContext(TypeNameContext, 0);\n};\n\nEventParameterContext.prototype.IndexedKeyword = function () {\n    return this.getToken(SolidityParser.IndexedKeyword, 0);\n};\n\nEventParameterContext.prototype.identifier = function () {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n};\n\nEventParameterContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterEventParameter(this);\n    }\n};\n\nEventParameterContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitEventParameter(this);\n    }\n};\n\nSolidityParser.EventParameterContext = EventParameterContext;\n\nSolidityParser.prototype.eventParameter = function () {\n\n    var localctx = new EventParameterContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 54, SolidityParser.RULE_eventParameter);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 426;\n        this.typeName(0);\n        this.state = 428;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === SolidityParser.IndexedKeyword) {\n            this.state = 427;\n            this.match(SolidityParser.IndexedKeyword);\n        }\n\n        this.state = 431;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || _la === SolidityParser.Identifier) {\n            this.state = 430;\n            this.identifier();\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction FunctionTypeParameterListContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_functionTypeParameterList;\n    return this;\n}\n\nFunctionTypeParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nFunctionTypeParameterListContext.prototype.constructor = FunctionTypeParameterListContext;\n\nFunctionTypeParameterListContext.prototype.functionTypeParameter = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(FunctionTypeParameterContext);\n    } else {\n        return this.getTypedRuleContext(FunctionTypeParameterContext, i);\n    }\n};\n\nFunctionTypeParameterListContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterFunctionTypeParameterList(this);\n    }\n};\n\nFunctionTypeParameterListContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitFunctionTypeParameterList(this);\n    }\n};\n\nSolidityParser.FunctionTypeParameterListContext = FunctionTypeParameterListContext;\n\nSolidityParser.prototype.functionTypeParameterList = function () {\n\n    var localctx = new FunctionTypeParameterListContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 56, SolidityParser.RULE_functionTypeParameterList);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 433;\n        this.match(SolidityParser.T__20);\n        this.state = 442;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__27 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__35 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__48 - 34 | 1 << SolidityParser.T__49 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34)) !== 0 || (_la - 91 & ~0x1f) == 0 && (1 << _la - 91 & (1 << SolidityParser.Int - 91 | 1 << SolidityParser.Uint - 91 | 1 << SolidityParser.Byte - 91 | 1 << SolidityParser.Fixed - 91 | 1 << SolidityParser.Ufixed - 91 | 1 << SolidityParser.Identifier - 91)) !== 0) {\n            this.state = 434;\n            this.functionTypeParameter();\n            this.state = 439;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            while (_la === SolidityParser.T__14) {\n                this.state = 435;\n                this.match(SolidityParser.T__14);\n                this.state = 436;\n                this.functionTypeParameter();\n                this.state = 441;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n            }\n        }\n\n        this.state = 444;\n        this.match(SolidityParser.T__21);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction FunctionTypeParameterContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_functionTypeParameter;\n    return this;\n}\n\nFunctionTypeParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nFunctionTypeParameterContext.prototype.constructor = FunctionTypeParameterContext;\n\nFunctionTypeParameterContext.prototype.typeName = function () {\n    return this.getTypedRuleContext(TypeNameContext, 0);\n};\n\nFunctionTypeParameterContext.prototype.storageLocation = function () {\n    return this.getTypedRuleContext(StorageLocationContext, 0);\n};\n\nFunctionTypeParameterContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterFunctionTypeParameter(this);\n    }\n};\n\nFunctionTypeParameterContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitFunctionTypeParameter(this);\n    }\n};\n\nSolidityParser.FunctionTypeParameterContext = FunctionTypeParameterContext;\n\nSolidityParser.prototype.functionTypeParameter = function () {\n\n    var localctx = new FunctionTypeParameterContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 58, SolidityParser.RULE_functionTypeParameter);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 446;\n        this.typeName(0);\n        this.state = 448;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if ((_la - 38 & ~0x1f) == 0 && (1 << _la - 38 & (1 << SolidityParser.T__37 - 38 | 1 << SolidityParser.T__38 - 38 | 1 << SolidityParser.T__39 - 38)) !== 0) {\n            this.state = 447;\n            this.storageLocation();\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction VariableDeclarationContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_variableDeclaration;\n    return this;\n}\n\nVariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nVariableDeclarationContext.prototype.constructor = VariableDeclarationContext;\n\nVariableDeclarationContext.prototype.typeName = function () {\n    return this.getTypedRuleContext(TypeNameContext, 0);\n};\n\nVariableDeclarationContext.prototype.identifier = function () {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n};\n\nVariableDeclarationContext.prototype.storageLocation = function () {\n    return this.getTypedRuleContext(StorageLocationContext, 0);\n};\n\nVariableDeclarationContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterVariableDeclaration(this);\n    }\n};\n\nVariableDeclarationContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitVariableDeclaration(this);\n    }\n};\n\nSolidityParser.VariableDeclarationContext = VariableDeclarationContext;\n\nSolidityParser.prototype.variableDeclaration = function () {\n\n    var localctx = new VariableDeclarationContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 60, SolidityParser.RULE_variableDeclaration);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 450;\n        this.typeName(0);\n        this.state = 452;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 44, this._ctx);\n        if (la_ === 1) {\n            this.state = 451;\n            this.storageLocation();\n        }\n        this.state = 454;\n        this.identifier();\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction TypeNameContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_typeName;\n    return this;\n}\n\nTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nTypeNameContext.prototype.constructor = TypeNameContext;\n\nTypeNameContext.prototype.elementaryTypeName = function () {\n    return this.getTypedRuleContext(ElementaryTypeNameContext, 0);\n};\n\nTypeNameContext.prototype.userDefinedTypeName = function () {\n    return this.getTypedRuleContext(UserDefinedTypeNameContext, 0);\n};\n\nTypeNameContext.prototype.mapping = function () {\n    return this.getTypedRuleContext(MappingContext, 0);\n};\n\nTypeNameContext.prototype.functionTypeName = function () {\n    return this.getTypedRuleContext(FunctionTypeNameContext, 0);\n};\n\nTypeNameContext.prototype.PayableKeyword = function () {\n    return this.getToken(SolidityParser.PayableKeyword, 0);\n};\n\nTypeNameContext.prototype.typeName = function () {\n    return this.getTypedRuleContext(TypeNameContext, 0);\n};\n\nTypeNameContext.prototype.expression = function () {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n};\n\nTypeNameContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterTypeName(this);\n    }\n};\n\nTypeNameContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitTypeName(this);\n    }\n};\n\nSolidityParser.prototype.typeName = function (_p) {\n    if (_p === undefined) {\n        _p = 0;\n    }\n    var _parentctx = this._ctx;\n    var _parentState = this.state;\n    var localctx = new TypeNameContext(this, this._ctx, _parentState);\n    var _prevctx = localctx;\n    var _startState = 62;\n    this.enterRecursionRule(localctx, 62, SolidityParser.RULE_typeName, _p);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 463;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 45, this._ctx);\n        switch (la_) {\n            case 1:\n                this.state = 457;\n                this.elementaryTypeName();\n                break;\n\n            case 2:\n                this.state = 458;\n                this.userDefinedTypeName();\n                break;\n\n            case 3:\n                this.state = 459;\n                this.mapping();\n                break;\n\n            case 4:\n                this.state = 460;\n                this.functionTypeName();\n                break;\n\n            case 5:\n                this.state = 461;\n                this.match(SolidityParser.T__33);\n                this.state = 462;\n                this.match(SolidityParser.PayableKeyword);\n                break;\n\n        }\n        this._ctx.stop = this._input.LT(-1);\n        this.state = 473;\n        this._errHandler.sync(this);\n        var _alt = this._interp.adaptivePredict(this._input, 47, this._ctx);\n        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {\n            if (_alt === 1) {\n                if (this._parseListeners !== null) {\n                    this.triggerExitRuleEvent();\n                }\n                _prevctx = localctx;\n                localctx = new TypeNameContext(this, _parentctx, _parentState);\n                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_typeName);\n                this.state = 465;\n                if (!this.precpred(this._ctx, 3)) {\n                    throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 3)\");\n                }\n                this.state = 466;\n                this.match(SolidityParser.T__31);\n                this.state = 468;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n                if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__20)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__48 - 32 | 1 << SolidityParser.T__49 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__57 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32)) !== 0 || (_la - 91 & ~0x1f) == 0 && (1 << _la - 91 & (1 << SolidityParser.Int - 91 | 1 << SolidityParser.Uint - 91 | 1 << SolidityParser.Byte - 91 | 1 << SolidityParser.Fixed - 91 | 1 << SolidityParser.Ufixed - 91 | 1 << SolidityParser.BooleanLiteral - 91 | 1 << SolidityParser.DecimalNumber - 91 | 1 << SolidityParser.HexNumber - 91 | 1 << SolidityParser.HexLiteral - 91 | 1 << SolidityParser.TypeKeyword - 91 | 1 << SolidityParser.Identifier - 91 | 1 << SolidityParser.StringLiteral - 91)) !== 0) {\n                    this.state = 467;\n                    this.expression(0);\n                }\n\n                this.state = 470;\n                this.match(SolidityParser.T__32);\n            }\n            this.state = 475;\n            this._errHandler.sync(this);\n            _alt = this._interp.adaptivePredict(this._input, 47, this._ctx);\n        }\n    } catch (error) {\n        if (error instanceof antlr4.error.RecognitionException) {\n            localctx.exception = error;\n            this._errHandler.reportError(this, error);\n            this._errHandler.recover(this, error);\n        } else {\n            throw error;\n        }\n    } finally {\n        this.unrollRecursionContexts(_parentctx);\n    }\n    return localctx;\n};\n\nfunction UserDefinedTypeNameContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_userDefinedTypeName;\n    return this;\n}\n\nUserDefinedTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nUserDefinedTypeNameContext.prototype.constructor = UserDefinedTypeNameContext;\n\nUserDefinedTypeNameContext.prototype.identifier = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(IdentifierContext);\n    } else {\n        return this.getTypedRuleContext(IdentifierContext, i);\n    }\n};\n\nUserDefinedTypeNameContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterUserDefinedTypeName(this);\n    }\n};\n\nUserDefinedTypeNameContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitUserDefinedTypeName(this);\n    }\n};\n\nSolidityParser.UserDefinedTypeNameContext = UserDefinedTypeNameContext;\n\nSolidityParser.prototype.userDefinedTypeName = function () {\n\n    var localctx = new UserDefinedTypeNameContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 64, SolidityParser.RULE_userDefinedTypeName);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 476;\n        this.identifier();\n        this.state = 481;\n        this._errHandler.sync(this);\n        var _alt = this._interp.adaptivePredict(this._input, 48, this._ctx);\n        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {\n            if (_alt === 1) {\n                this.state = 477;\n                this.match(SolidityParser.T__34);\n                this.state = 478;\n                this.identifier();\n            }\n            this.state = 483;\n            this._errHandler.sync(this);\n            _alt = this._interp.adaptivePredict(this._input, 48, this._ctx);\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction MappingContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_mapping;\n    return this;\n}\n\nMappingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nMappingContext.prototype.constructor = MappingContext;\n\nMappingContext.prototype.elementaryTypeName = function () {\n    return this.getTypedRuleContext(ElementaryTypeNameContext, 0);\n};\n\nMappingContext.prototype.typeName = function () {\n    return this.getTypedRuleContext(TypeNameContext, 0);\n};\n\nMappingContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterMapping(this);\n    }\n};\n\nMappingContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitMapping(this);\n    }\n};\n\nSolidityParser.MappingContext = MappingContext;\n\nSolidityParser.prototype.mapping = function () {\n\n    var localctx = new MappingContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 66, SolidityParser.RULE_mapping);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 484;\n        this.match(SolidityParser.T__35);\n        this.state = 485;\n        this.match(SolidityParser.T__20);\n        this.state = 486;\n        this.elementaryTypeName();\n        this.state = 487;\n        this.match(SolidityParser.T__36);\n        this.state = 488;\n        this.typeName(0);\n        this.state = 489;\n        this.match(SolidityParser.T__21);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction FunctionTypeNameContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_functionTypeName;\n    return this;\n}\n\nFunctionTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nFunctionTypeNameContext.prototype.constructor = FunctionTypeNameContext;\n\nFunctionTypeNameContext.prototype.functionTypeParameterList = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(FunctionTypeParameterListContext);\n    } else {\n        return this.getTypedRuleContext(FunctionTypeParameterListContext, i);\n    }\n};\n\nFunctionTypeNameContext.prototype.InternalKeyword = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTokens(SolidityParser.InternalKeyword);\n    } else {\n        return this.getToken(SolidityParser.InternalKeyword, i);\n    }\n};\n\nFunctionTypeNameContext.prototype.ExternalKeyword = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTokens(SolidityParser.ExternalKeyword);\n    } else {\n        return this.getToken(SolidityParser.ExternalKeyword, i);\n    }\n};\n\nFunctionTypeNameContext.prototype.stateMutability = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(StateMutabilityContext);\n    } else {\n        return this.getTypedRuleContext(StateMutabilityContext, i);\n    }\n};\n\nFunctionTypeNameContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterFunctionTypeName(this);\n    }\n};\n\nFunctionTypeNameContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitFunctionTypeName(this);\n    }\n};\n\nSolidityParser.FunctionTypeNameContext = FunctionTypeNameContext;\n\nSolidityParser.prototype.functionTypeName = function () {\n\n    var localctx = new FunctionTypeNameContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 68, SolidityParser.RULE_functionTypeName);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 491;\n        this.match(SolidityParser.T__27);\n        this.state = 492;\n        this.functionTypeParameterList();\n        this.state = 498;\n        this._errHandler.sync(this);\n        var _alt = this._interp.adaptivePredict(this._input, 50, this._ctx);\n        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {\n            if (_alt === 1) {\n                this.state = 496;\n                this._errHandler.sync(this);\n                switch (this._input.LA(1)) {\n                    case SolidityParser.InternalKeyword:\n                        this.state = 493;\n                        this.match(SolidityParser.InternalKeyword);\n                        break;\n                    case SolidityParser.ExternalKeyword:\n                        this.state = 494;\n                        this.match(SolidityParser.ExternalKeyword);\n                        break;\n                    case SolidityParser.ConstantKeyword:\n                    case SolidityParser.PayableKeyword:\n                    case SolidityParser.PureKeyword:\n                    case SolidityParser.ViewKeyword:\n                        this.state = 495;\n                        this.stateMutability();\n                        break;\n                    default:\n                        throw new antlr4.error.NoViableAltException(this);\n                }\n            }\n            this.state = 500;\n            this._errHandler.sync(this);\n            _alt = this._interp.adaptivePredict(this._input, 50, this._ctx);\n        }\n\n        this.state = 503;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 51, this._ctx);\n        if (la_ === 1) {\n            this.state = 501;\n            this.match(SolidityParser.T__28);\n            this.state = 502;\n            this.functionTypeParameterList();\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction StorageLocationContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_storageLocation;\n    return this;\n}\n\nStorageLocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nStorageLocationContext.prototype.constructor = StorageLocationContext;\n\nStorageLocationContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterStorageLocation(this);\n    }\n};\n\nStorageLocationContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitStorageLocation(this);\n    }\n};\n\nSolidityParser.StorageLocationContext = StorageLocationContext;\n\nSolidityParser.prototype.storageLocation = function () {\n\n    var localctx = new StorageLocationContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 70, SolidityParser.RULE_storageLocation);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 505;\n        _la = this._input.LA(1);\n        if (!((_la - 38 & ~0x1f) == 0 && (1 << _la - 38 & (1 << SolidityParser.T__37 - 38 | 1 << SolidityParser.T__38 - 38 | 1 << SolidityParser.T__39 - 38)) !== 0)) {\n            this._errHandler.recoverInline(this);\n        } else {\n            this._errHandler.reportMatch(this);\n            this.consume();\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction StateMutabilityContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_stateMutability;\n    return this;\n}\n\nStateMutabilityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nStateMutabilityContext.prototype.constructor = StateMutabilityContext;\n\nStateMutabilityContext.prototype.PureKeyword = function () {\n    return this.getToken(SolidityParser.PureKeyword, 0);\n};\n\nStateMutabilityContext.prototype.ConstantKeyword = function () {\n    return this.getToken(SolidityParser.ConstantKeyword, 0);\n};\n\nStateMutabilityContext.prototype.ViewKeyword = function () {\n    return this.getToken(SolidityParser.ViewKeyword, 0);\n};\n\nStateMutabilityContext.prototype.PayableKeyword = function () {\n    return this.getToken(SolidityParser.PayableKeyword, 0);\n};\n\nStateMutabilityContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterStateMutability(this);\n    }\n};\n\nStateMutabilityContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitStateMutability(this);\n    }\n};\n\nSolidityParser.StateMutabilityContext = StateMutabilityContext;\n\nSolidityParser.prototype.stateMutability = function () {\n\n    var localctx = new StateMutabilityContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 72, SolidityParser.RULE_stateMutability);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 507;\n        _la = this._input.LA(1);\n        if (!((_la - 105 & ~0x1f) == 0 && (1 << _la - 105 & (1 << SolidityParser.ConstantKeyword - 105 | 1 << SolidityParser.PayableKeyword - 105 | 1 << SolidityParser.PureKeyword - 105 | 1 << SolidityParser.ViewKeyword - 105)) !== 0)) {\n            this._errHandler.recoverInline(this);\n        } else {\n            this._errHandler.reportMatch(this);\n            this.consume();\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction BlockContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_block;\n    return this;\n}\n\nBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nBlockContext.prototype.constructor = BlockContext;\n\nBlockContext.prototype.statement = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(StatementContext);\n    } else {\n        return this.getTypedRuleContext(StatementContext, i);\n    }\n};\n\nBlockContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterBlock(this);\n    }\n};\n\nBlockContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitBlock(this);\n    }\n};\n\nSolidityParser.BlockContext = BlockContext;\n\nSolidityParser.prototype.block = function () {\n\n    var localctx = new BlockContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 74, SolidityParser.RULE_block);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 509;\n        this.match(SolidityParser.T__13);\n        this.state = 513;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__13 | 1 << SolidityParser.T__20 | 1 << SolidityParser.T__23 | 1 << SolidityParser.T__27)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__35 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__40 - 32 | 1 << SolidityParser.T__42 - 32 | 1 << SolidityParser.T__43 - 32 | 1 << SolidityParser.T__44 - 32 | 1 << SolidityParser.T__45 - 32 | 1 << SolidityParser.T__46 - 32 | 1 << SolidityParser.T__47 - 32 | 1 << SolidityParser.T__48 - 32 | 1 << SolidityParser.T__49 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__57 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32)) !== 0 || (_la - 91 & ~0x1f) == 0 && (1 << _la - 91 & (1 << SolidityParser.Int - 91 | 1 << SolidityParser.Uint - 91 | 1 << SolidityParser.Byte - 91 | 1 << SolidityParser.Fixed - 91 | 1 << SolidityParser.Ufixed - 91 | 1 << SolidityParser.BooleanLiteral - 91 | 1 << SolidityParser.DecimalNumber - 91 | 1 << SolidityParser.HexNumber - 91 | 1 << SolidityParser.HexLiteral - 91 | 1 << SolidityParser.BreakKeyword - 91 | 1 << SolidityParser.ContinueKeyword - 91 | 1 << SolidityParser.TypeKeyword - 91 | 1 << SolidityParser.Identifier - 91 | 1 << SolidityParser.StringLiteral - 91)) !== 0) {\n            this.state = 510;\n            this.statement();\n            this.state = 515;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n        }\n        this.state = 516;\n        this.match(SolidityParser.T__15);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction StatementContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_statement;\n    return this;\n}\n\nStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nStatementContext.prototype.constructor = StatementContext;\n\nStatementContext.prototype.ifStatement = function () {\n    return this.getTypedRuleContext(IfStatementContext, 0);\n};\n\nStatementContext.prototype.whileStatement = function () {\n    return this.getTypedRuleContext(WhileStatementContext, 0);\n};\n\nStatementContext.prototype.forStatement = function () {\n    return this.getTypedRuleContext(ForStatementContext, 0);\n};\n\nStatementContext.prototype.block = function () {\n    return this.getTypedRuleContext(BlockContext, 0);\n};\n\nStatementContext.prototype.inlineAssemblyStatement = function () {\n    return this.getTypedRuleContext(InlineAssemblyStatementContext, 0);\n};\n\nStatementContext.prototype.doWhileStatement = function () {\n    return this.getTypedRuleContext(DoWhileStatementContext, 0);\n};\n\nStatementContext.prototype.continueStatement = function () {\n    return this.getTypedRuleContext(ContinueStatementContext, 0);\n};\n\nStatementContext.prototype.breakStatement = function () {\n    return this.getTypedRuleContext(BreakStatementContext, 0);\n};\n\nStatementContext.prototype.returnStatement = function () {\n    return this.getTypedRuleContext(ReturnStatementContext, 0);\n};\n\nStatementContext.prototype.throwStatement = function () {\n    return this.getTypedRuleContext(ThrowStatementContext, 0);\n};\n\nStatementContext.prototype.emitStatement = function () {\n    return this.getTypedRuleContext(EmitStatementContext, 0);\n};\n\nStatementContext.prototype.simpleStatement = function () {\n    return this.getTypedRuleContext(SimpleStatementContext, 0);\n};\n\nStatementContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterStatement(this);\n    }\n};\n\nStatementContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitStatement(this);\n    }\n};\n\nSolidityParser.StatementContext = StatementContext;\n\nSolidityParser.prototype.statement = function () {\n\n    var localctx = new StatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 76, SolidityParser.RULE_statement);\n    try {\n        this.state = 530;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n            case SolidityParser.T__40:\n                this.enterOuterAlt(localctx, 1);\n                this.state = 518;\n                this.ifStatement();\n                break;\n            case SolidityParser.T__42:\n                this.enterOuterAlt(localctx, 2);\n                this.state = 519;\n                this.whileStatement();\n                break;\n            case SolidityParser.T__23:\n                this.enterOuterAlt(localctx, 3);\n                this.state = 520;\n                this.forStatement();\n                break;\n            case SolidityParser.T__13:\n                this.enterOuterAlt(localctx, 4);\n                this.state = 521;\n                this.block();\n                break;\n            case SolidityParser.T__43:\n                this.enterOuterAlt(localctx, 5);\n                this.state = 522;\n                this.inlineAssemblyStatement();\n                break;\n            case SolidityParser.T__44:\n                this.enterOuterAlt(localctx, 6);\n                this.state = 523;\n                this.doWhileStatement();\n                break;\n            case SolidityParser.ContinueKeyword:\n                this.enterOuterAlt(localctx, 7);\n                this.state = 524;\n                this.continueStatement();\n                break;\n            case SolidityParser.BreakKeyword:\n                this.enterOuterAlt(localctx, 8);\n                this.state = 525;\n                this.breakStatement();\n                break;\n            case SolidityParser.T__45:\n                this.enterOuterAlt(localctx, 9);\n                this.state = 526;\n                this.returnStatement();\n                break;\n            case SolidityParser.T__46:\n                this.enterOuterAlt(localctx, 10);\n                this.state = 527;\n                this.throwStatement();\n                break;\n            case SolidityParser.T__47:\n                this.enterOuterAlt(localctx, 11);\n                this.state = 528;\n                this.emitStatement();\n                break;\n            case SolidityParser.T__3:\n            case SolidityParser.T__12:\n            case SolidityParser.T__20:\n            case SolidityParser.T__27:\n            case SolidityParser.T__31:\n            case SolidityParser.T__33:\n            case SolidityParser.T__35:\n            case SolidityParser.T__39:\n            case SolidityParser.T__48:\n            case SolidityParser.T__49:\n            case SolidityParser.T__50:\n            case SolidityParser.T__51:\n            case SolidityParser.T__52:\n            case SolidityParser.T__53:\n            case SolidityParser.T__54:\n            case SolidityParser.T__55:\n            case SolidityParser.T__56:\n            case SolidityParser.T__57:\n            case SolidityParser.T__58:\n            case SolidityParser.T__59:\n            case SolidityParser.Int:\n            case SolidityParser.Uint:\n            case SolidityParser.Byte:\n            case SolidityParser.Fixed:\n            case SolidityParser.Ufixed:\n            case SolidityParser.BooleanLiteral:\n            case SolidityParser.DecimalNumber:\n            case SolidityParser.HexNumber:\n            case SolidityParser.HexLiteral:\n            case SolidityParser.TypeKeyword:\n            case SolidityParser.Identifier:\n            case SolidityParser.StringLiteral:\n                this.enterOuterAlt(localctx, 12);\n                this.state = 529;\n                this.simpleStatement();\n                break;\n            default:\n                throw new antlr4.error.NoViableAltException(this);\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction ExpressionStatementContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_expressionStatement;\n    return this;\n}\n\nExpressionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nExpressionStatementContext.prototype.constructor = ExpressionStatementContext;\n\nExpressionStatementContext.prototype.expression = function () {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n};\n\nExpressionStatementContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterExpressionStatement(this);\n    }\n};\n\nExpressionStatementContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitExpressionStatement(this);\n    }\n};\n\nSolidityParser.ExpressionStatementContext = ExpressionStatementContext;\n\nSolidityParser.prototype.expressionStatement = function () {\n\n    var localctx = new ExpressionStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 78, SolidityParser.RULE_expressionStatement);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 532;\n        this.expression(0);\n        this.state = 533;\n        this.match(SolidityParser.T__1);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction IfStatementContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_ifStatement;\n    return this;\n}\n\nIfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nIfStatementContext.prototype.constructor = IfStatementContext;\n\nIfStatementContext.prototype.expression = function () {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n};\n\nIfStatementContext.prototype.statement = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(StatementContext);\n    } else {\n        return this.getTypedRuleContext(StatementContext, i);\n    }\n};\n\nIfStatementContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterIfStatement(this);\n    }\n};\n\nIfStatementContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitIfStatement(this);\n    }\n};\n\nSolidityParser.IfStatementContext = IfStatementContext;\n\nSolidityParser.prototype.ifStatement = function () {\n\n    var localctx = new IfStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 80, SolidityParser.RULE_ifStatement);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 535;\n        this.match(SolidityParser.T__40);\n        this.state = 536;\n        this.match(SolidityParser.T__20);\n        this.state = 537;\n        this.expression(0);\n        this.state = 538;\n        this.match(SolidityParser.T__21);\n        this.state = 539;\n        this.statement();\n        this.state = 542;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 54, this._ctx);\n        if (la_ === 1) {\n            this.state = 540;\n            this.match(SolidityParser.T__41);\n            this.state = 541;\n            this.statement();\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction WhileStatementContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_whileStatement;\n    return this;\n}\n\nWhileStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nWhileStatementContext.prototype.constructor = WhileStatementContext;\n\nWhileStatementContext.prototype.expression = function () {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n};\n\nWhileStatementContext.prototype.statement = function () {\n    return this.getTypedRuleContext(StatementContext, 0);\n};\n\nWhileStatementContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterWhileStatement(this);\n    }\n};\n\nWhileStatementContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitWhileStatement(this);\n    }\n};\n\nSolidityParser.WhileStatementContext = WhileStatementContext;\n\nSolidityParser.prototype.whileStatement = function () {\n\n    var localctx = new WhileStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 82, SolidityParser.RULE_whileStatement);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 544;\n        this.match(SolidityParser.T__42);\n        this.state = 545;\n        this.match(SolidityParser.T__20);\n        this.state = 546;\n        this.expression(0);\n        this.state = 547;\n        this.match(SolidityParser.T__21);\n        this.state = 548;\n        this.statement();\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction SimpleStatementContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_simpleStatement;\n    return this;\n}\n\nSimpleStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nSimpleStatementContext.prototype.constructor = SimpleStatementContext;\n\nSimpleStatementContext.prototype.variableDeclarationStatement = function () {\n    return this.getTypedRuleContext(VariableDeclarationStatementContext, 0);\n};\n\nSimpleStatementContext.prototype.expressionStatement = function () {\n    return this.getTypedRuleContext(ExpressionStatementContext, 0);\n};\n\nSimpleStatementContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterSimpleStatement(this);\n    }\n};\n\nSimpleStatementContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitSimpleStatement(this);\n    }\n};\n\nSolidityParser.SimpleStatementContext = SimpleStatementContext;\n\nSolidityParser.prototype.simpleStatement = function () {\n\n    var localctx = new SimpleStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 84, SolidityParser.RULE_simpleStatement);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 552;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 55, this._ctx);\n        switch (la_) {\n            case 1:\n                this.state = 550;\n                this.variableDeclarationStatement();\n                break;\n\n            case 2:\n                this.state = 551;\n                this.expressionStatement();\n                break;\n\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction ForStatementContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_forStatement;\n    return this;\n}\n\nForStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nForStatementContext.prototype.constructor = ForStatementContext;\n\nForStatementContext.prototype.statement = function () {\n    return this.getTypedRuleContext(StatementContext, 0);\n};\n\nForStatementContext.prototype.simpleStatement = function () {\n    return this.getTypedRuleContext(SimpleStatementContext, 0);\n};\n\nForStatementContext.prototype.expressionStatement = function () {\n    return this.getTypedRuleContext(ExpressionStatementContext, 0);\n};\n\nForStatementContext.prototype.expression = function () {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n};\n\nForStatementContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterForStatement(this);\n    }\n};\n\nForStatementContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitForStatement(this);\n    }\n};\n\nSolidityParser.ForStatementContext = ForStatementContext;\n\nSolidityParser.prototype.forStatement = function () {\n\n    var localctx = new ForStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 86, SolidityParser.RULE_forStatement);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 554;\n        this.match(SolidityParser.T__23);\n        this.state = 555;\n        this.match(SolidityParser.T__20);\n        this.state = 558;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n            case SolidityParser.T__3:\n            case SolidityParser.T__12:\n            case SolidityParser.T__20:\n            case SolidityParser.T__27:\n            case SolidityParser.T__31:\n            case SolidityParser.T__33:\n            case SolidityParser.T__35:\n            case SolidityParser.T__39:\n            case SolidityParser.T__48:\n            case SolidityParser.T__49:\n            case SolidityParser.T__50:\n            case SolidityParser.T__51:\n            case SolidityParser.T__52:\n            case SolidityParser.T__53:\n            case SolidityParser.T__54:\n            case SolidityParser.T__55:\n            case SolidityParser.T__56:\n            case SolidityParser.T__57:\n            case SolidityParser.T__58:\n            case SolidityParser.T__59:\n            case SolidityParser.Int:\n            case SolidityParser.Uint:\n            case SolidityParser.Byte:\n            case SolidityParser.Fixed:\n            case SolidityParser.Ufixed:\n            case SolidityParser.BooleanLiteral:\n            case SolidityParser.DecimalNumber:\n            case SolidityParser.HexNumber:\n            case SolidityParser.HexLiteral:\n            case SolidityParser.TypeKeyword:\n            case SolidityParser.Identifier:\n            case SolidityParser.StringLiteral:\n                this.state = 556;\n                this.simpleStatement();\n                break;\n            case SolidityParser.T__1:\n                this.state = 557;\n                this.match(SolidityParser.T__1);\n                break;\n            default:\n                throw new antlr4.error.NoViableAltException(this);\n        }\n        this.state = 562;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n            case SolidityParser.T__3:\n            case SolidityParser.T__12:\n            case SolidityParser.T__20:\n            case SolidityParser.T__31:\n            case SolidityParser.T__33:\n            case SolidityParser.T__39:\n            case SolidityParser.T__48:\n            case SolidityParser.T__49:\n            case SolidityParser.T__50:\n            case SolidityParser.T__51:\n            case SolidityParser.T__52:\n            case SolidityParser.T__53:\n            case SolidityParser.T__54:\n            case SolidityParser.T__55:\n            case SolidityParser.T__56:\n            case SolidityParser.T__57:\n            case SolidityParser.T__58:\n            case SolidityParser.T__59:\n            case SolidityParser.Int:\n            case SolidityParser.Uint:\n            case SolidityParser.Byte:\n            case SolidityParser.Fixed:\n            case SolidityParser.Ufixed:\n            case SolidityParser.BooleanLiteral:\n            case SolidityParser.DecimalNumber:\n            case SolidityParser.HexNumber:\n            case SolidityParser.HexLiteral:\n            case SolidityParser.TypeKeyword:\n            case SolidityParser.Identifier:\n            case SolidityParser.StringLiteral:\n                this.state = 560;\n                this.expressionStatement();\n                break;\n            case SolidityParser.T__1:\n                this.state = 561;\n                this.match(SolidityParser.T__1);\n                break;\n            default:\n                throw new antlr4.error.NoViableAltException(this);\n        }\n        this.state = 565;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__20)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__48 - 32 | 1 << SolidityParser.T__49 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__57 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32)) !== 0 || (_la - 91 & ~0x1f) == 0 && (1 << _la - 91 & (1 << SolidityParser.Int - 91 | 1 << SolidityParser.Uint - 91 | 1 << SolidityParser.Byte - 91 | 1 << SolidityParser.Fixed - 91 | 1 << SolidityParser.Ufixed - 91 | 1 << SolidityParser.BooleanLiteral - 91 | 1 << SolidityParser.DecimalNumber - 91 | 1 << SolidityParser.HexNumber - 91 | 1 << SolidityParser.HexLiteral - 91 | 1 << SolidityParser.TypeKeyword - 91 | 1 << SolidityParser.Identifier - 91 | 1 << SolidityParser.StringLiteral - 91)) !== 0) {\n            this.state = 564;\n            this.expression(0);\n        }\n\n        this.state = 567;\n        this.match(SolidityParser.T__21);\n        this.state = 568;\n        this.statement();\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction InlineAssemblyStatementContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_inlineAssemblyStatement;\n    return this;\n}\n\nInlineAssemblyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nInlineAssemblyStatementContext.prototype.constructor = InlineAssemblyStatementContext;\n\nInlineAssemblyStatementContext.prototype.assemblyBlock = function () {\n    return this.getTypedRuleContext(AssemblyBlockContext, 0);\n};\n\nInlineAssemblyStatementContext.prototype.StringLiteral = function () {\n    return this.getToken(SolidityParser.StringLiteral, 0);\n};\n\nInlineAssemblyStatementContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterInlineAssemblyStatement(this);\n    }\n};\n\nInlineAssemblyStatementContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitInlineAssemblyStatement(this);\n    }\n};\n\nSolidityParser.InlineAssemblyStatementContext = InlineAssemblyStatementContext;\n\nSolidityParser.prototype.inlineAssemblyStatement = function () {\n\n    var localctx = new InlineAssemblyStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 88, SolidityParser.RULE_inlineAssemblyStatement);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 570;\n        this.match(SolidityParser.T__43);\n        this.state = 572;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === SolidityParser.StringLiteral) {\n            this.state = 571;\n            this.match(SolidityParser.StringLiteral);\n        }\n\n        this.state = 574;\n        this.assemblyBlock();\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction DoWhileStatementContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_doWhileStatement;\n    return this;\n}\n\nDoWhileStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nDoWhileStatementContext.prototype.constructor = DoWhileStatementContext;\n\nDoWhileStatementContext.prototype.statement = function () {\n    return this.getTypedRuleContext(StatementContext, 0);\n};\n\nDoWhileStatementContext.prototype.expression = function () {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n};\n\nDoWhileStatementContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterDoWhileStatement(this);\n    }\n};\n\nDoWhileStatementContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitDoWhileStatement(this);\n    }\n};\n\nSolidityParser.DoWhileStatementContext = DoWhileStatementContext;\n\nSolidityParser.prototype.doWhileStatement = function () {\n\n    var localctx = new DoWhileStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 90, SolidityParser.RULE_doWhileStatement);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 576;\n        this.match(SolidityParser.T__44);\n        this.state = 577;\n        this.statement();\n        this.state = 578;\n        this.match(SolidityParser.T__42);\n        this.state = 579;\n        this.match(SolidityParser.T__20);\n        this.state = 580;\n        this.expression(0);\n        this.state = 581;\n        this.match(SolidityParser.T__21);\n        this.state = 582;\n        this.match(SolidityParser.T__1);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction ContinueStatementContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_continueStatement;\n    return this;\n}\n\nContinueStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nContinueStatementContext.prototype.constructor = ContinueStatementContext;\n\nContinueStatementContext.prototype.ContinueKeyword = function () {\n    return this.getToken(SolidityParser.ContinueKeyword, 0);\n};\n\nContinueStatementContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterContinueStatement(this);\n    }\n};\n\nContinueStatementContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitContinueStatement(this);\n    }\n};\n\nSolidityParser.ContinueStatementContext = ContinueStatementContext;\n\nSolidityParser.prototype.continueStatement = function () {\n\n    var localctx = new ContinueStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 92, SolidityParser.RULE_continueStatement);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 584;\n        this.match(SolidityParser.ContinueKeyword);\n        this.state = 585;\n        this.match(SolidityParser.T__1);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction BreakStatementContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_breakStatement;\n    return this;\n}\n\nBreakStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nBreakStatementContext.prototype.constructor = BreakStatementContext;\n\nBreakStatementContext.prototype.BreakKeyword = function () {\n    return this.getToken(SolidityParser.BreakKeyword, 0);\n};\n\nBreakStatementContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterBreakStatement(this);\n    }\n};\n\nBreakStatementContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitBreakStatement(this);\n    }\n};\n\nSolidityParser.BreakStatementContext = BreakStatementContext;\n\nSolidityParser.prototype.breakStatement = function () {\n\n    var localctx = new BreakStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 94, SolidityParser.RULE_breakStatement);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 587;\n        this.match(SolidityParser.BreakKeyword);\n        this.state = 588;\n        this.match(SolidityParser.T__1);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction ReturnStatementContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_returnStatement;\n    return this;\n}\n\nReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nReturnStatementContext.prototype.constructor = ReturnStatementContext;\n\nReturnStatementContext.prototype.expression = function () {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n};\n\nReturnStatementContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterReturnStatement(this);\n    }\n};\n\nReturnStatementContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitReturnStatement(this);\n    }\n};\n\nSolidityParser.ReturnStatementContext = ReturnStatementContext;\n\nSolidityParser.prototype.returnStatement = function () {\n\n    var localctx = new ReturnStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 96, SolidityParser.RULE_returnStatement);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 590;\n        this.match(SolidityParser.T__45);\n        this.state = 592;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__20)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__48 - 32 | 1 << SolidityParser.T__49 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__57 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32)) !== 0 || (_la - 91 & ~0x1f) == 0 && (1 << _la - 91 & (1 << SolidityParser.Int - 91 | 1 << SolidityParser.Uint - 91 | 1 << SolidityParser.Byte - 91 | 1 << SolidityParser.Fixed - 91 | 1 << SolidityParser.Ufixed - 91 | 1 << SolidityParser.BooleanLiteral - 91 | 1 << SolidityParser.DecimalNumber - 91 | 1 << SolidityParser.HexNumber - 91 | 1 << SolidityParser.HexLiteral - 91 | 1 << SolidityParser.TypeKeyword - 91 | 1 << SolidityParser.Identifier - 91 | 1 << SolidityParser.StringLiteral - 91)) !== 0) {\n            this.state = 591;\n            this.expression(0);\n        }\n\n        this.state = 594;\n        this.match(SolidityParser.T__1);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction ThrowStatementContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_throwStatement;\n    return this;\n}\n\nThrowStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nThrowStatementContext.prototype.constructor = ThrowStatementContext;\n\nThrowStatementContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterThrowStatement(this);\n    }\n};\n\nThrowStatementContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitThrowStatement(this);\n    }\n};\n\nSolidityParser.ThrowStatementContext = ThrowStatementContext;\n\nSolidityParser.prototype.throwStatement = function () {\n\n    var localctx = new ThrowStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 98, SolidityParser.RULE_throwStatement);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 596;\n        this.match(SolidityParser.T__46);\n        this.state = 597;\n        this.match(SolidityParser.T__1);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction EmitStatementContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_emitStatement;\n    return this;\n}\n\nEmitStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nEmitStatementContext.prototype.constructor = EmitStatementContext;\n\nEmitStatementContext.prototype.functionCall = function () {\n    return this.getTypedRuleContext(FunctionCallContext, 0);\n};\n\nEmitStatementContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterEmitStatement(this);\n    }\n};\n\nEmitStatementContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitEmitStatement(this);\n    }\n};\n\nSolidityParser.EmitStatementContext = EmitStatementContext;\n\nSolidityParser.prototype.emitStatement = function () {\n\n    var localctx = new EmitStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 100, SolidityParser.RULE_emitStatement);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 599;\n        this.match(SolidityParser.T__47);\n        this.state = 600;\n        this.functionCall();\n        this.state = 601;\n        this.match(SolidityParser.T__1);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction VariableDeclarationStatementContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_variableDeclarationStatement;\n    return this;\n}\n\nVariableDeclarationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nVariableDeclarationStatementContext.prototype.constructor = VariableDeclarationStatementContext;\n\nVariableDeclarationStatementContext.prototype.identifierList = function () {\n    return this.getTypedRuleContext(IdentifierListContext, 0);\n};\n\nVariableDeclarationStatementContext.prototype.variableDeclaration = function () {\n    return this.getTypedRuleContext(VariableDeclarationContext, 0);\n};\n\nVariableDeclarationStatementContext.prototype.variableDeclarationList = function () {\n    return this.getTypedRuleContext(VariableDeclarationListContext, 0);\n};\n\nVariableDeclarationStatementContext.prototype.expression = function () {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n};\n\nVariableDeclarationStatementContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterVariableDeclarationStatement(this);\n    }\n};\n\nVariableDeclarationStatementContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitVariableDeclarationStatement(this);\n    }\n};\n\nSolidityParser.VariableDeclarationStatementContext = VariableDeclarationStatementContext;\n\nSolidityParser.prototype.variableDeclarationStatement = function () {\n\n    var localctx = new VariableDeclarationStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 102, SolidityParser.RULE_variableDeclarationStatement);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 610;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 61, this._ctx);\n        switch (la_) {\n            case 1:\n                this.state = 603;\n                this.match(SolidityParser.T__48);\n                this.state = 604;\n                this.identifierList();\n                break;\n\n            case 2:\n                this.state = 605;\n                this.variableDeclaration();\n                break;\n\n            case 3:\n                this.state = 606;\n                this.match(SolidityParser.T__20);\n                this.state = 607;\n                this.variableDeclarationList();\n                this.state = 608;\n                this.match(SolidityParser.T__21);\n                break;\n\n        }\n        this.state = 614;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === SolidityParser.T__8) {\n            this.state = 612;\n            this.match(SolidityParser.T__8);\n            this.state = 613;\n            this.expression(0);\n        }\n\n        this.state = 616;\n        this.match(SolidityParser.T__1);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction VariableDeclarationListContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_variableDeclarationList;\n    return this;\n}\n\nVariableDeclarationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nVariableDeclarationListContext.prototype.constructor = VariableDeclarationListContext;\n\nVariableDeclarationListContext.prototype.variableDeclaration = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(VariableDeclarationContext);\n    } else {\n        return this.getTypedRuleContext(VariableDeclarationContext, i);\n    }\n};\n\nVariableDeclarationListContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterVariableDeclarationList(this);\n    }\n};\n\nVariableDeclarationListContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitVariableDeclarationList(this);\n    }\n};\n\nSolidityParser.VariableDeclarationListContext = VariableDeclarationListContext;\n\nSolidityParser.prototype.variableDeclarationList = function () {\n\n    var localctx = new VariableDeclarationListContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 104, SolidityParser.RULE_variableDeclarationList);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 619;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__27 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__35 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__48 - 34 | 1 << SolidityParser.T__49 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34)) !== 0 || (_la - 91 & ~0x1f) == 0 && (1 << _la - 91 & (1 << SolidityParser.Int - 91 | 1 << SolidityParser.Uint - 91 | 1 << SolidityParser.Byte - 91 | 1 << SolidityParser.Fixed - 91 | 1 << SolidityParser.Ufixed - 91 | 1 << SolidityParser.Identifier - 91)) !== 0) {\n            this.state = 618;\n            this.variableDeclaration();\n        }\n\n        this.state = 627;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while (_la === SolidityParser.T__14) {\n            this.state = 621;\n            this.match(SolidityParser.T__14);\n            this.state = 623;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if (_la === SolidityParser.T__12 || _la === SolidityParser.T__27 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__35 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__48 - 34 | 1 << SolidityParser.T__49 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34)) !== 0 || (_la - 91 & ~0x1f) == 0 && (1 << _la - 91 & (1 << SolidityParser.Int - 91 | 1 << SolidityParser.Uint - 91 | 1 << SolidityParser.Byte - 91 | 1 << SolidityParser.Fixed - 91 | 1 << SolidityParser.Ufixed - 91 | 1 << SolidityParser.Identifier - 91)) !== 0) {\n                this.state = 622;\n                this.variableDeclaration();\n            }\n\n            this.state = 629;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction IdentifierListContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_identifierList;\n    return this;\n}\n\nIdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nIdentifierListContext.prototype.constructor = IdentifierListContext;\n\nIdentifierListContext.prototype.identifier = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(IdentifierContext);\n    } else {\n        return this.getTypedRuleContext(IdentifierContext, i);\n    }\n};\n\nIdentifierListContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterIdentifierList(this);\n    }\n};\n\nIdentifierListContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitIdentifierList(this);\n    }\n};\n\nSolidityParser.IdentifierListContext = IdentifierListContext;\n\nSolidityParser.prototype.identifierList = function () {\n\n    var localctx = new IdentifierListContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 106, SolidityParser.RULE_identifierList);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 630;\n        this.match(SolidityParser.T__20);\n        this.state = 637;\n        this._errHandler.sync(this);\n        var _alt = this._interp.adaptivePredict(this._input, 67, this._ctx);\n        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {\n            if (_alt === 1) {\n                this.state = 632;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n                if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || _la === SolidityParser.Identifier) {\n                    this.state = 631;\n                    this.identifier();\n                }\n\n                this.state = 634;\n                this.match(SolidityParser.T__14);\n            }\n            this.state = 639;\n            this._errHandler.sync(this);\n            _alt = this._interp.adaptivePredict(this._input, 67, this._ctx);\n        }\n\n        this.state = 641;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || _la === SolidityParser.Identifier) {\n            this.state = 640;\n            this.identifier();\n        }\n\n        this.state = 643;\n        this.match(SolidityParser.T__21);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction ElementaryTypeNameContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_elementaryTypeName;\n    return this;\n}\n\nElementaryTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nElementaryTypeNameContext.prototype.constructor = ElementaryTypeNameContext;\n\nElementaryTypeNameContext.prototype.Int = function () {\n    return this.getToken(SolidityParser.Int, 0);\n};\n\nElementaryTypeNameContext.prototype.Uint = function () {\n    return this.getToken(SolidityParser.Uint, 0);\n};\n\nElementaryTypeNameContext.prototype.Byte = function () {\n    return this.getToken(SolidityParser.Byte, 0);\n};\n\nElementaryTypeNameContext.prototype.Fixed = function () {\n    return this.getToken(SolidityParser.Fixed, 0);\n};\n\nElementaryTypeNameContext.prototype.Ufixed = function () {\n    return this.getToken(SolidityParser.Ufixed, 0);\n};\n\nElementaryTypeNameContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterElementaryTypeName(this);\n    }\n};\n\nElementaryTypeNameContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitElementaryTypeName(this);\n    }\n};\n\nSolidityParser.ElementaryTypeNameContext = ElementaryTypeNameContext;\n\nSolidityParser.prototype.elementaryTypeName = function () {\n\n    var localctx = new ElementaryTypeNameContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 108, SolidityParser.RULE_elementaryTypeName);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 645;\n        _la = this._input.LA(1);\n        if (!((_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__48 - 34 | 1 << SolidityParser.T__49 - 34 | 1 << SolidityParser.T__50 - 34 | 1 << SolidityParser.T__51 - 34)) !== 0 || (_la - 91 & ~0x1f) == 0 && (1 << _la - 91 & (1 << SolidityParser.Int - 91 | 1 << SolidityParser.Uint - 91 | 1 << SolidityParser.Byte - 91 | 1 << SolidityParser.Fixed - 91 | 1 << SolidityParser.Ufixed - 91)) !== 0)) {\n            this._errHandler.recoverInline(this);\n        } else {\n            this._errHandler.reportMatch(this);\n            this.consume();\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction ExpressionContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_expression;\n    return this;\n}\n\nExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nExpressionContext.prototype.constructor = ExpressionContext;\n\nExpressionContext.prototype.typeName = function () {\n    return this.getTypedRuleContext(TypeNameContext, 0);\n};\n\nExpressionContext.prototype.expression = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(ExpressionContext);\n    } else {\n        return this.getTypedRuleContext(ExpressionContext, i);\n    }\n};\n\nExpressionContext.prototype.primaryExpression = function () {\n    return this.getTypedRuleContext(PrimaryExpressionContext, 0);\n};\n\nExpressionContext.prototype.functionCallArguments = function () {\n    return this.getTypedRuleContext(FunctionCallArgumentsContext, 0);\n};\n\nExpressionContext.prototype.identifier = function () {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n};\n\nExpressionContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterExpression(this);\n    }\n};\n\nExpressionContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitExpression(this);\n    }\n};\n\nSolidityParser.prototype.expression = function (_p) {\n    if (_p === undefined) {\n        _p = 0;\n    }\n    var _parentctx = this._ctx;\n    var _parentState = this.state;\n    var localctx = new ExpressionContext(this, this._ctx, _parentState);\n    var _prevctx = localctx;\n    var _startState = 110;\n    this.enterRecursionRule(localctx, 110, SolidityParser.RULE_expression, _p);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 665;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 69, this._ctx);\n        switch (la_) {\n            case 1:\n                this.state = 648;\n                this.match(SolidityParser.T__54);\n                this.state = 649;\n                this.typeName(0);\n                break;\n\n            case 2:\n                this.state = 650;\n                this.match(SolidityParser.T__20);\n                this.state = 651;\n                this.expression(0);\n                this.state = 652;\n                this.match(SolidityParser.T__21);\n                break;\n\n            case 3:\n                this.state = 654;\n                _la = this._input.LA(1);\n                if (!(_la === SolidityParser.T__52 || _la === SolidityParser.T__53)) {\n                    this._errHandler.recoverInline(this);\n                } else {\n                    this._errHandler.reportMatch(this);\n                    this.consume();\n                }\n                this.state = 655;\n                this.expression(19);\n                break;\n\n            case 4:\n                this.state = 656;\n                _la = this._input.LA(1);\n                if (!(_la === SolidityParser.T__55 || _la === SolidityParser.T__56)) {\n                    this._errHandler.recoverInline(this);\n                } else {\n                    this._errHandler.reportMatch(this);\n                    this.consume();\n                }\n                this.state = 657;\n                this.expression(18);\n                break;\n\n            case 5:\n                this.state = 658;\n                _la = this._input.LA(1);\n                if (!(_la === SolidityParser.T__57 || _la === SolidityParser.T__58)) {\n                    this._errHandler.recoverInline(this);\n                } else {\n                    this._errHandler.reportMatch(this);\n                    this.consume();\n                }\n                this.state = 659;\n                this.expression(17);\n                break;\n\n            case 6:\n                this.state = 660;\n                this.match(SolidityParser.T__59);\n                this.state = 661;\n                this.expression(16);\n                break;\n\n            case 7:\n                this.state = 662;\n                this.match(SolidityParser.T__3);\n                this.state = 663;\n                this.expression(15);\n                break;\n\n            case 8:\n                this.state = 664;\n                this.primaryExpression();\n                break;\n\n        }\n        this._ctx.stop = this._input.LT(-1);\n        this.state = 726;\n        this._errHandler.sync(this);\n        var _alt = this._interp.adaptivePredict(this._input, 71, this._ctx);\n        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {\n            if (_alt === 1) {\n                if (this._parseListeners !== null) {\n                    this.triggerExitRuleEvent();\n                }\n                _prevctx = localctx;\n                this.state = 724;\n                this._errHandler.sync(this);\n                var la_ = this._interp.adaptivePredict(this._input, 70, this._ctx);\n                switch (la_) {\n                    case 1:\n                        localctx = new ExpressionContext(this, _parentctx, _parentState);\n                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);\n                        this.state = 667;\n                        if (!this.precpred(this._ctx, 14)) {\n                            throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 14)\");\n                        }\n                        this.state = 668;\n                        this.match(SolidityParser.T__60);\n                        this.state = 669;\n                        this.expression(15);\n                        break;\n\n                    case 2:\n                        localctx = new ExpressionContext(this, _parentctx, _parentState);\n                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);\n                        this.state = 670;\n                        if (!this.precpred(this._ctx, 13)) {\n                            throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 13)\");\n                        }\n                        this.state = 671;\n                        _la = this._input.LA(1);\n                        if (!(_la === SolidityParser.T__11 || _la === SolidityParser.T__61 || _la === SolidityParser.T__62)) {\n                            this._errHandler.recoverInline(this);\n                        } else {\n                            this._errHandler.reportMatch(this);\n                            this.consume();\n                        }\n                        this.state = 672;\n                        this.expression(14);\n                        break;\n\n                    case 3:\n                        localctx = new ExpressionContext(this, _parentctx, _parentState);\n                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);\n                        this.state = 673;\n                        if (!this.precpred(this._ctx, 12)) {\n                            throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 12)\");\n                        }\n                        this.state = 674;\n                        _la = this._input.LA(1);\n                        if (!(_la === SolidityParser.T__55 || _la === SolidityParser.T__56)) {\n                            this._errHandler.recoverInline(this);\n                        } else {\n                            this._errHandler.reportMatch(this);\n                            this.consume();\n                        }\n                        this.state = 675;\n                        this.expression(13);\n                        break;\n\n                    case 4:\n                        localctx = new ExpressionContext(this, _parentctx, _parentState);\n                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);\n                        this.state = 676;\n                        if (!this.precpred(this._ctx, 11)) {\n                            throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 11)\");\n                        }\n                        this.state = 677;\n                        _la = this._input.LA(1);\n                        if (!(_la === SolidityParser.T__63 || _la === SolidityParser.T__64)) {\n                            this._errHandler.recoverInline(this);\n                        } else {\n                            this._errHandler.reportMatch(this);\n                            this.consume();\n                        }\n                        this.state = 678;\n                        this.expression(12);\n                        break;\n\n                    case 5:\n                        localctx = new ExpressionContext(this, _parentctx, _parentState);\n                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);\n                        this.state = 679;\n                        if (!this.precpred(this._ctx, 10)) {\n                            throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 10)\");\n                        }\n                        this.state = 680;\n                        this.match(SolidityParser.T__65);\n                        this.state = 681;\n                        this.expression(11);\n                        break;\n\n                    case 6:\n                        localctx = new ExpressionContext(this, _parentctx, _parentState);\n                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);\n                        this.state = 682;\n                        if (!this.precpred(this._ctx, 9)) {\n                            throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 9)\");\n                        }\n                        this.state = 683;\n                        this.match(SolidityParser.T__2);\n                        this.state = 684;\n                        this.expression(10);\n                        break;\n\n                    case 7:\n                        localctx = new ExpressionContext(this, _parentctx, _parentState);\n                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);\n                        this.state = 685;\n                        if (!this.precpred(this._ctx, 8)) {\n                            throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 8)\");\n                        }\n                        this.state = 686;\n                        this.match(SolidityParser.T__66);\n                        this.state = 687;\n                        this.expression(9);\n                        break;\n\n                    case 8:\n                        localctx = new ExpressionContext(this, _parentctx, _parentState);\n                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);\n                        this.state = 688;\n                        if (!this.precpred(this._ctx, 7)) {\n                            throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 7)\");\n                        }\n                        this.state = 689;\n                        _la = this._input.LA(1);\n                        if (!((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__4 | 1 << SolidityParser.T__5 | 1 << SolidityParser.T__6 | 1 << SolidityParser.T__7)) !== 0)) {\n                            this._errHandler.recoverInline(this);\n                        } else {\n                            this._errHandler.reportMatch(this);\n                            this.consume();\n                        }\n                        this.state = 690;\n                        this.expression(8);\n                        break;\n\n                    case 9:\n                        localctx = new ExpressionContext(this, _parentctx, _parentState);\n                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);\n                        this.state = 691;\n                        if (!this.precpred(this._ctx, 6)) {\n                            throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 6)\");\n                        }\n                        this.state = 692;\n                        _la = this._input.LA(1);\n                        if (!(_la === SolidityParser.T__67 || _la === SolidityParser.T__68)) {\n                            this._errHandler.recoverInline(this);\n                        } else {\n                            this._errHandler.reportMatch(this);\n                            this.consume();\n                        }\n                        this.state = 693;\n                        this.expression(7);\n                        break;\n\n                    case 10:\n                        localctx = new ExpressionContext(this, _parentctx, _parentState);\n                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);\n                        this.state = 694;\n                        if (!this.precpred(this._ctx, 5)) {\n                            throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 5)\");\n                        }\n                        this.state = 695;\n                        this.match(SolidityParser.T__69);\n                        this.state = 696;\n                        this.expression(6);\n                        break;\n\n                    case 11:\n                        localctx = new ExpressionContext(this, _parentctx, _parentState);\n                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);\n                        this.state = 697;\n                        if (!this.precpred(this._ctx, 4)) {\n                            throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 4)\");\n                        }\n                        this.state = 698;\n                        this.match(SolidityParser.T__70);\n                        this.state = 699;\n                        this.expression(5);\n                        break;\n\n                    case 12:\n                        localctx = new ExpressionContext(this, _parentctx, _parentState);\n                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);\n                        this.state = 700;\n                        if (!this.precpred(this._ctx, 3)) {\n                            throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 3)\");\n                        }\n                        this.state = 701;\n                        this.match(SolidityParser.T__71);\n                        this.state = 702;\n                        this.expression(0);\n                        this.state = 703;\n                        this.match(SolidityParser.T__72);\n                        this.state = 704;\n                        this.expression(4);\n                        break;\n\n                    case 13:\n                        localctx = new ExpressionContext(this, _parentctx, _parentState);\n                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);\n                        this.state = 706;\n                        if (!this.precpred(this._ctx, 2)) {\n                            throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 2)\");\n                        }\n                        this.state = 707;\n                        _la = this._input.LA(1);\n                        if (!(_la === SolidityParser.T__8 || (_la - 74 & ~0x1f) == 0 && (1 << _la - 74 & (1 << SolidityParser.T__73 - 74 | 1 << SolidityParser.T__74 - 74 | 1 << SolidityParser.T__75 - 74 | 1 << SolidityParser.T__76 - 74 | 1 << SolidityParser.T__77 - 74 | 1 << SolidityParser.T__78 - 74 | 1 << SolidityParser.T__79 - 74 | 1 << SolidityParser.T__80 - 74 | 1 << SolidityParser.T__81 - 74 | 1 << SolidityParser.T__82 - 74)) !== 0)) {\n                            this._errHandler.recoverInline(this);\n                        } else {\n                            this._errHandler.reportMatch(this);\n                            this.consume();\n                        }\n                        this.state = 708;\n                        this.expression(3);\n                        break;\n\n                    case 14:\n                        localctx = new ExpressionContext(this, _parentctx, _parentState);\n                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);\n                        this.state = 709;\n                        if (!this.precpred(this._ctx, 25)) {\n                            throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 25)\");\n                        }\n                        this.state = 710;\n                        _la = this._input.LA(1);\n                        if (!(_la === SolidityParser.T__52 || _la === SolidityParser.T__53)) {\n                            this._errHandler.recoverInline(this);\n                        } else {\n                            this._errHandler.reportMatch(this);\n                            this.consume();\n                        }\n                        break;\n\n                    case 15:\n                        localctx = new ExpressionContext(this, _parentctx, _parentState);\n                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);\n                        this.state = 711;\n                        if (!this.precpred(this._ctx, 23)) {\n                            throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 23)\");\n                        }\n                        this.state = 712;\n                        this.match(SolidityParser.T__31);\n                        this.state = 713;\n                        this.expression(0);\n                        this.state = 714;\n                        this.match(SolidityParser.T__32);\n                        break;\n\n                    case 16:\n                        localctx = new ExpressionContext(this, _parentctx, _parentState);\n                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);\n                        this.state = 716;\n                        if (!this.precpred(this._ctx, 22)) {\n                            throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 22)\");\n                        }\n                        this.state = 717;\n                        this.match(SolidityParser.T__20);\n                        this.state = 718;\n                        this.functionCallArguments();\n                        this.state = 719;\n                        this.match(SolidityParser.T__21);\n                        break;\n\n                    case 17:\n                        localctx = new ExpressionContext(this, _parentctx, _parentState);\n                        this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);\n                        this.state = 721;\n                        if (!this.precpred(this._ctx, 21)) {\n                            throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 21)\");\n                        }\n                        this.state = 722;\n                        this.match(SolidityParser.T__34);\n                        this.state = 723;\n                        this.identifier();\n                        break;\n\n                }\n            }\n            this.state = 728;\n            this._errHandler.sync(this);\n            _alt = this._interp.adaptivePredict(this._input, 71, this._ctx);\n        }\n    } catch (error) {\n        if (error instanceof antlr4.error.RecognitionException) {\n            localctx.exception = error;\n            this._errHandler.reportError(this, error);\n            this._errHandler.recover(this, error);\n        } else {\n            throw error;\n        }\n    } finally {\n        this.unrollRecursionContexts(_parentctx);\n    }\n    return localctx;\n};\n\nfunction PrimaryExpressionContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_primaryExpression;\n    return this;\n}\n\nPrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nPrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;\n\nPrimaryExpressionContext.prototype.BooleanLiteral = function () {\n    return this.getToken(SolidityParser.BooleanLiteral, 0);\n};\n\nPrimaryExpressionContext.prototype.numberLiteral = function () {\n    return this.getTypedRuleContext(NumberLiteralContext, 0);\n};\n\nPrimaryExpressionContext.prototype.HexLiteral = function () {\n    return this.getToken(SolidityParser.HexLiteral, 0);\n};\n\nPrimaryExpressionContext.prototype.StringLiteral = function () {\n    return this.getToken(SolidityParser.StringLiteral, 0);\n};\n\nPrimaryExpressionContext.prototype.identifier = function () {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n};\n\nPrimaryExpressionContext.prototype.TypeKeyword = function () {\n    return this.getToken(SolidityParser.TypeKeyword, 0);\n};\n\nPrimaryExpressionContext.prototype.tupleExpression = function () {\n    return this.getTypedRuleContext(TupleExpressionContext, 0);\n};\n\nPrimaryExpressionContext.prototype.elementaryTypeNameExpression = function () {\n    return this.getTypedRuleContext(ElementaryTypeNameExpressionContext, 0);\n};\n\nPrimaryExpressionContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterPrimaryExpression(this);\n    }\n};\n\nPrimaryExpressionContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitPrimaryExpression(this);\n    }\n};\n\nSolidityParser.PrimaryExpressionContext = PrimaryExpressionContext;\n\nSolidityParser.prototype.primaryExpression = function () {\n\n    var localctx = new PrimaryExpressionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 112, SolidityParser.RULE_primaryExpression);\n    try {\n        this.state = 745;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n            case SolidityParser.BooleanLiteral:\n                this.enterOuterAlt(localctx, 1);\n                this.state = 729;\n                this.match(SolidityParser.BooleanLiteral);\n                break;\n            case SolidityParser.DecimalNumber:\n            case SolidityParser.HexNumber:\n                this.enterOuterAlt(localctx, 2);\n                this.state = 730;\n                this.numberLiteral();\n                break;\n            case SolidityParser.HexLiteral:\n                this.enterOuterAlt(localctx, 3);\n                this.state = 731;\n                this.match(SolidityParser.HexLiteral);\n                break;\n            case SolidityParser.StringLiteral:\n                this.enterOuterAlt(localctx, 4);\n                this.state = 732;\n                this.match(SolidityParser.StringLiteral);\n                break;\n            case SolidityParser.T__12:\n            case SolidityParser.T__39:\n            case SolidityParser.Identifier:\n                this.enterOuterAlt(localctx, 5);\n                this.state = 733;\n                this.identifier();\n                this.state = 736;\n                this._errHandler.sync(this);\n                var la_ = this._interp.adaptivePredict(this._input, 72, this._ctx);\n                if (la_ === 1) {\n                    this.state = 734;\n                    this.match(SolidityParser.T__31);\n                    this.state = 735;\n                    this.match(SolidityParser.T__32);\n                }\n                break;\n            case SolidityParser.TypeKeyword:\n                this.enterOuterAlt(localctx, 6);\n                this.state = 738;\n                this.match(SolidityParser.TypeKeyword);\n                break;\n            case SolidityParser.T__20:\n            case SolidityParser.T__31:\n                this.enterOuterAlt(localctx, 7);\n                this.state = 739;\n                this.tupleExpression();\n                break;\n            case SolidityParser.T__33:\n            case SolidityParser.T__48:\n            case SolidityParser.T__49:\n            case SolidityParser.T__50:\n            case SolidityParser.T__51:\n            case SolidityParser.Int:\n            case SolidityParser.Uint:\n            case SolidityParser.Byte:\n            case SolidityParser.Fixed:\n            case SolidityParser.Ufixed:\n                this.enterOuterAlt(localctx, 8);\n                this.state = 740;\n                this.elementaryTypeNameExpression();\n                this.state = 743;\n                this._errHandler.sync(this);\n                var la_ = this._interp.adaptivePredict(this._input, 73, this._ctx);\n                if (la_ === 1) {\n                    this.state = 741;\n                    this.match(SolidityParser.T__31);\n                    this.state = 742;\n                    this.match(SolidityParser.T__32);\n                }\n                break;\n            default:\n                throw new antlr4.error.NoViableAltException(this);\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction ExpressionListContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_expressionList;\n    return this;\n}\n\nExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nExpressionListContext.prototype.constructor = ExpressionListContext;\n\nExpressionListContext.prototype.expression = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(ExpressionContext);\n    } else {\n        return this.getTypedRuleContext(ExpressionContext, i);\n    }\n};\n\nExpressionListContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterExpressionList(this);\n    }\n};\n\nExpressionListContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitExpressionList(this);\n    }\n};\n\nSolidityParser.ExpressionListContext = ExpressionListContext;\n\nSolidityParser.prototype.expressionList = function () {\n\n    var localctx = new ExpressionListContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 114, SolidityParser.RULE_expressionList);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 747;\n        this.expression(0);\n        this.state = 752;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while (_la === SolidityParser.T__14) {\n            this.state = 748;\n            this.match(SolidityParser.T__14);\n            this.state = 749;\n            this.expression(0);\n            this.state = 754;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction NameValueListContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_nameValueList;\n    return this;\n}\n\nNameValueListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nNameValueListContext.prototype.constructor = NameValueListContext;\n\nNameValueListContext.prototype.nameValue = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(NameValueContext);\n    } else {\n        return this.getTypedRuleContext(NameValueContext, i);\n    }\n};\n\nNameValueListContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterNameValueList(this);\n    }\n};\n\nNameValueListContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitNameValueList(this);\n    }\n};\n\nSolidityParser.NameValueListContext = NameValueListContext;\n\nSolidityParser.prototype.nameValueList = function () {\n\n    var localctx = new NameValueListContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 116, SolidityParser.RULE_nameValueList);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 755;\n        this.nameValue();\n        this.state = 760;\n        this._errHandler.sync(this);\n        var _alt = this._interp.adaptivePredict(this._input, 76, this._ctx);\n        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {\n            if (_alt === 1) {\n                this.state = 756;\n                this.match(SolidityParser.T__14);\n                this.state = 757;\n                this.nameValue();\n            }\n            this.state = 762;\n            this._errHandler.sync(this);\n            _alt = this._interp.adaptivePredict(this._input, 76, this._ctx);\n        }\n\n        this.state = 764;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === SolidityParser.T__14) {\n            this.state = 763;\n            this.match(SolidityParser.T__14);\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction NameValueContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_nameValue;\n    return this;\n}\n\nNameValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nNameValueContext.prototype.constructor = NameValueContext;\n\nNameValueContext.prototype.identifier = function () {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n};\n\nNameValueContext.prototype.expression = function () {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n};\n\nNameValueContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterNameValue(this);\n    }\n};\n\nNameValueContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitNameValue(this);\n    }\n};\n\nSolidityParser.NameValueContext = NameValueContext;\n\nSolidityParser.prototype.nameValue = function () {\n\n    var localctx = new NameValueContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 118, SolidityParser.RULE_nameValue);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 766;\n        this.identifier();\n        this.state = 767;\n        this.match(SolidityParser.T__72);\n        this.state = 768;\n        this.expression(0);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction FunctionCallArgumentsContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_functionCallArguments;\n    return this;\n}\n\nFunctionCallArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nFunctionCallArgumentsContext.prototype.constructor = FunctionCallArgumentsContext;\n\nFunctionCallArgumentsContext.prototype.nameValueList = function () {\n    return this.getTypedRuleContext(NameValueListContext, 0);\n};\n\nFunctionCallArgumentsContext.prototype.expressionList = function () {\n    return this.getTypedRuleContext(ExpressionListContext, 0);\n};\n\nFunctionCallArgumentsContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterFunctionCallArguments(this);\n    }\n};\n\nFunctionCallArgumentsContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitFunctionCallArguments(this);\n    }\n};\n\nSolidityParser.FunctionCallArgumentsContext = FunctionCallArgumentsContext;\n\nSolidityParser.prototype.functionCallArguments = function () {\n\n    var localctx = new FunctionCallArgumentsContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 120, SolidityParser.RULE_functionCallArguments);\n    var _la = 0; // Token type\n    try {\n        this.state = 778;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n            case SolidityParser.T__13:\n                this.enterOuterAlt(localctx, 1);\n                this.state = 770;\n                this.match(SolidityParser.T__13);\n                this.state = 772;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n                if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || _la === SolidityParser.Identifier) {\n                    this.state = 771;\n                    this.nameValueList();\n                }\n\n                this.state = 774;\n                this.match(SolidityParser.T__15);\n                break;\n            case SolidityParser.T__3:\n            case SolidityParser.T__12:\n            case SolidityParser.T__20:\n            case SolidityParser.T__21:\n            case SolidityParser.T__31:\n            case SolidityParser.T__33:\n            case SolidityParser.T__39:\n            case SolidityParser.T__48:\n            case SolidityParser.T__49:\n            case SolidityParser.T__50:\n            case SolidityParser.T__51:\n            case SolidityParser.T__52:\n            case SolidityParser.T__53:\n            case SolidityParser.T__54:\n            case SolidityParser.T__55:\n            case SolidityParser.T__56:\n            case SolidityParser.T__57:\n            case SolidityParser.T__58:\n            case SolidityParser.T__59:\n            case SolidityParser.Int:\n            case SolidityParser.Uint:\n            case SolidityParser.Byte:\n            case SolidityParser.Fixed:\n            case SolidityParser.Ufixed:\n            case SolidityParser.BooleanLiteral:\n            case SolidityParser.DecimalNumber:\n            case SolidityParser.HexNumber:\n            case SolidityParser.HexLiteral:\n            case SolidityParser.TypeKeyword:\n            case SolidityParser.Identifier:\n            case SolidityParser.StringLiteral:\n                this.enterOuterAlt(localctx, 2);\n                this.state = 776;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n                if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__20)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__48 - 32 | 1 << SolidityParser.T__49 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__57 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32)) !== 0 || (_la - 91 & ~0x1f) == 0 && (1 << _la - 91 & (1 << SolidityParser.Int - 91 | 1 << SolidityParser.Uint - 91 | 1 << SolidityParser.Byte - 91 | 1 << SolidityParser.Fixed - 91 | 1 << SolidityParser.Ufixed - 91 | 1 << SolidityParser.BooleanLiteral - 91 | 1 << SolidityParser.DecimalNumber - 91 | 1 << SolidityParser.HexNumber - 91 | 1 << SolidityParser.HexLiteral - 91 | 1 << SolidityParser.TypeKeyword - 91 | 1 << SolidityParser.Identifier - 91 | 1 << SolidityParser.StringLiteral - 91)) !== 0) {\n                    this.state = 775;\n                    this.expressionList();\n                }\n\n                break;\n            default:\n                throw new antlr4.error.NoViableAltException(this);\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction FunctionCallContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_functionCall;\n    return this;\n}\n\nFunctionCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nFunctionCallContext.prototype.constructor = FunctionCallContext;\n\nFunctionCallContext.prototype.expression = function () {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n};\n\nFunctionCallContext.prototype.functionCallArguments = function () {\n    return this.getTypedRuleContext(FunctionCallArgumentsContext, 0);\n};\n\nFunctionCallContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterFunctionCall(this);\n    }\n};\n\nFunctionCallContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitFunctionCall(this);\n    }\n};\n\nSolidityParser.FunctionCallContext = FunctionCallContext;\n\nSolidityParser.prototype.functionCall = function () {\n\n    var localctx = new FunctionCallContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 122, SolidityParser.RULE_functionCall);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 780;\n        this.expression(0);\n        this.state = 781;\n        this.match(SolidityParser.T__20);\n        this.state = 782;\n        this.functionCallArguments();\n        this.state = 783;\n        this.match(SolidityParser.T__21);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction AssemblyBlockContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_assemblyBlock;\n    return this;\n}\n\nAssemblyBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nAssemblyBlockContext.prototype.constructor = AssemblyBlockContext;\n\nAssemblyBlockContext.prototype.assemblyItem = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(AssemblyItemContext);\n    } else {\n        return this.getTypedRuleContext(AssemblyItemContext, i);\n    }\n};\n\nAssemblyBlockContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterAssemblyBlock(this);\n    }\n};\n\nAssemblyBlockContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitAssemblyBlock(this);\n    }\n};\n\nSolidityParser.AssemblyBlockContext = AssemblyBlockContext;\n\nSolidityParser.prototype.assemblyBlock = function () {\n\n    var localctx = new AssemblyBlockContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 124, SolidityParser.RULE_assemblyBlock);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 785;\n        this.match(SolidityParser.T__13);\n        this.state = 789;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__12 | 1 << SolidityParser.T__13 | 1 << SolidityParser.T__20 | 1 << SolidityParser.T__23 | 1 << SolidityParser.T__27)) !== 0 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__40 - 34 | 1 << SolidityParser.T__43 - 34 | 1 << SolidityParser.T__45 - 34 | 1 << SolidityParser.T__51 - 34)) !== 0 || (_la - 84 & ~0x1f) == 0 && (1 << _la - 84 & (1 << SolidityParser.T__83 - 84 | 1 << SolidityParser.T__85 - 84 | 1 << SolidityParser.T__86 - 84 | 1 << SolidityParser.DecimalNumber - 84 | 1 << SolidityParser.HexNumber - 84 | 1 << SolidityParser.HexLiteral - 84 | 1 << SolidityParser.BreakKeyword - 84 | 1 << SolidityParser.ContinueKeyword - 84)) !== 0 || _la === SolidityParser.Identifier || _la === SolidityParser.StringLiteral) {\n            this.state = 786;\n            this.assemblyItem();\n            this.state = 791;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n        }\n        this.state = 792;\n        this.match(SolidityParser.T__15);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction AssemblyItemContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_assemblyItem;\n    return this;\n}\n\nAssemblyItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nAssemblyItemContext.prototype.constructor = AssemblyItemContext;\n\nAssemblyItemContext.prototype.identifier = function () {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n};\n\nAssemblyItemContext.prototype.assemblyBlock = function () {\n    return this.getTypedRuleContext(AssemblyBlockContext, 0);\n};\n\nAssemblyItemContext.prototype.assemblyExpression = function () {\n    return this.getTypedRuleContext(AssemblyExpressionContext, 0);\n};\n\nAssemblyItemContext.prototype.assemblyLocalDefinition = function () {\n    return this.getTypedRuleContext(AssemblyLocalDefinitionContext, 0);\n};\n\nAssemblyItemContext.prototype.assemblyAssignment = function () {\n    return this.getTypedRuleContext(AssemblyAssignmentContext, 0);\n};\n\nAssemblyItemContext.prototype.assemblyStackAssignment = function () {\n    return this.getTypedRuleContext(AssemblyStackAssignmentContext, 0);\n};\n\nAssemblyItemContext.prototype.labelDefinition = function () {\n    return this.getTypedRuleContext(LabelDefinitionContext, 0);\n};\n\nAssemblyItemContext.prototype.assemblySwitch = function () {\n    return this.getTypedRuleContext(AssemblySwitchContext, 0);\n};\n\nAssemblyItemContext.prototype.assemblyFunctionDefinition = function () {\n    return this.getTypedRuleContext(AssemblyFunctionDefinitionContext, 0);\n};\n\nAssemblyItemContext.prototype.assemblyFor = function () {\n    return this.getTypedRuleContext(AssemblyForContext, 0);\n};\n\nAssemblyItemContext.prototype.assemblyIf = function () {\n    return this.getTypedRuleContext(AssemblyIfContext, 0);\n};\n\nAssemblyItemContext.prototype.BreakKeyword = function () {\n    return this.getToken(SolidityParser.BreakKeyword, 0);\n};\n\nAssemblyItemContext.prototype.ContinueKeyword = function () {\n    return this.getToken(SolidityParser.ContinueKeyword, 0);\n};\n\nAssemblyItemContext.prototype.subAssembly = function () {\n    return this.getTypedRuleContext(SubAssemblyContext, 0);\n};\n\nAssemblyItemContext.prototype.numberLiteral = function () {\n    return this.getTypedRuleContext(NumberLiteralContext, 0);\n};\n\nAssemblyItemContext.prototype.StringLiteral = function () {\n    return this.getToken(SolidityParser.StringLiteral, 0);\n};\n\nAssemblyItemContext.prototype.HexLiteral = function () {\n    return this.getToken(SolidityParser.HexLiteral, 0);\n};\n\nAssemblyItemContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterAssemblyItem(this);\n    }\n};\n\nAssemblyItemContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitAssemblyItem(this);\n    }\n};\n\nSolidityParser.AssemblyItemContext = AssemblyItemContext;\n\nSolidityParser.prototype.assemblyItem = function () {\n\n    var localctx = new AssemblyItemContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 126, SolidityParser.RULE_assemblyItem);\n    try {\n        this.state = 811;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 82, this._ctx);\n        switch (la_) {\n            case 1:\n                this.enterOuterAlt(localctx, 1);\n                this.state = 794;\n                this.identifier();\n                break;\n\n            case 2:\n                this.enterOuterAlt(localctx, 2);\n                this.state = 795;\n                this.assemblyBlock();\n                break;\n\n            case 3:\n                this.enterOuterAlt(localctx, 3);\n                this.state = 796;\n                this.assemblyExpression();\n                break;\n\n            case 4:\n                this.enterOuterAlt(localctx, 4);\n                this.state = 797;\n                this.assemblyLocalDefinition();\n                break;\n\n            case 5:\n                this.enterOuterAlt(localctx, 5);\n                this.state = 798;\n                this.assemblyAssignment();\n                break;\n\n            case 6:\n                this.enterOuterAlt(localctx, 6);\n                this.state = 799;\n                this.assemblyStackAssignment();\n                break;\n\n            case 7:\n                this.enterOuterAlt(localctx, 7);\n                this.state = 800;\n                this.labelDefinition();\n                break;\n\n            case 8:\n                this.enterOuterAlt(localctx, 8);\n                this.state = 801;\n                this.assemblySwitch();\n                break;\n\n            case 9:\n                this.enterOuterAlt(localctx, 9);\n                this.state = 802;\n                this.assemblyFunctionDefinition();\n                break;\n\n            case 10:\n                this.enterOuterAlt(localctx, 10);\n                this.state = 803;\n                this.assemblyFor();\n                break;\n\n            case 11:\n                this.enterOuterAlt(localctx, 11);\n                this.state = 804;\n                this.assemblyIf();\n                break;\n\n            case 12:\n                this.enterOuterAlt(localctx, 12);\n                this.state = 805;\n                this.match(SolidityParser.BreakKeyword);\n                break;\n\n            case 13:\n                this.enterOuterAlt(localctx, 13);\n                this.state = 806;\n                this.match(SolidityParser.ContinueKeyword);\n                break;\n\n            case 14:\n                this.enterOuterAlt(localctx, 14);\n                this.state = 807;\n                this.subAssembly();\n                break;\n\n            case 15:\n                this.enterOuterAlt(localctx, 15);\n                this.state = 808;\n                this.numberLiteral();\n                break;\n\n            case 16:\n                this.enterOuterAlt(localctx, 16);\n                this.state = 809;\n                this.match(SolidityParser.StringLiteral);\n                break;\n\n            case 17:\n                this.enterOuterAlt(localctx, 17);\n                this.state = 810;\n                this.match(SolidityParser.HexLiteral);\n                break;\n\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction AssemblyExpressionContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_assemblyExpression;\n    return this;\n}\n\nAssemblyExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nAssemblyExpressionContext.prototype.constructor = AssemblyExpressionContext;\n\nAssemblyExpressionContext.prototype.assemblyCall = function () {\n    return this.getTypedRuleContext(AssemblyCallContext, 0);\n};\n\nAssemblyExpressionContext.prototype.assemblyLiteral = function () {\n    return this.getTypedRuleContext(AssemblyLiteralContext, 0);\n};\n\nAssemblyExpressionContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterAssemblyExpression(this);\n    }\n};\n\nAssemblyExpressionContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitAssemblyExpression(this);\n    }\n};\n\nSolidityParser.AssemblyExpressionContext = AssemblyExpressionContext;\n\nSolidityParser.prototype.assemblyExpression = function () {\n\n    var localctx = new AssemblyExpressionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 128, SolidityParser.RULE_assemblyExpression);\n    try {\n        this.state = 815;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n            case SolidityParser.T__12:\n            case SolidityParser.T__33:\n            case SolidityParser.T__39:\n            case SolidityParser.T__45:\n            case SolidityParser.T__51:\n            case SolidityParser.Identifier:\n                this.enterOuterAlt(localctx, 1);\n                this.state = 813;\n                this.assemblyCall();\n                break;\n            case SolidityParser.DecimalNumber:\n            case SolidityParser.HexNumber:\n            case SolidityParser.HexLiteral:\n            case SolidityParser.StringLiteral:\n                this.enterOuterAlt(localctx, 2);\n                this.state = 814;\n                this.assemblyLiteral();\n                break;\n            default:\n                throw new antlr4.error.NoViableAltException(this);\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction AssemblyCallContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_assemblyCall;\n    return this;\n}\n\nAssemblyCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nAssemblyCallContext.prototype.constructor = AssemblyCallContext;\n\nAssemblyCallContext.prototype.identifier = function () {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n};\n\nAssemblyCallContext.prototype.assemblyExpression = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(AssemblyExpressionContext);\n    } else {\n        return this.getTypedRuleContext(AssemblyExpressionContext, i);\n    }\n};\n\nAssemblyCallContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterAssemblyCall(this);\n    }\n};\n\nAssemblyCallContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitAssemblyCall(this);\n    }\n};\n\nSolidityParser.AssemblyCallContext = AssemblyCallContext;\n\nSolidityParser.prototype.assemblyCall = function () {\n\n    var localctx = new AssemblyCallContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 130, SolidityParser.RULE_assemblyCall);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 821;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n            case SolidityParser.T__45:\n                this.state = 817;\n                this.match(SolidityParser.T__45);\n                break;\n            case SolidityParser.T__33:\n                this.state = 818;\n                this.match(SolidityParser.T__33);\n                break;\n            case SolidityParser.T__51:\n                this.state = 819;\n                this.match(SolidityParser.T__51);\n                break;\n            case SolidityParser.T__12:\n            case SolidityParser.T__39:\n            case SolidityParser.Identifier:\n                this.state = 820;\n                this.identifier();\n                break;\n            default:\n                throw new antlr4.error.NoViableAltException(this);\n        }\n        this.state = 835;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 87, this._ctx);\n        if (la_ === 1) {\n            this.state = 823;\n            this.match(SolidityParser.T__20);\n            this.state = 825;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if (_la === SolidityParser.T__12 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << SolidityParser.T__33 - 34 | 1 << SolidityParser.T__39 - 34 | 1 << SolidityParser.T__45 - 34 | 1 << SolidityParser.T__51 - 34)) !== 0 || (_la - 98 & ~0x1f) == 0 && (1 << _la - 98 & (1 << SolidityParser.DecimalNumber - 98 | 1 << SolidityParser.HexNumber - 98 | 1 << SolidityParser.HexLiteral - 98 | 1 << SolidityParser.Identifier - 98 | 1 << SolidityParser.StringLiteral - 98)) !== 0) {\n                this.state = 824;\n                this.assemblyExpression();\n            }\n\n            this.state = 831;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            while (_la === SolidityParser.T__14) {\n                this.state = 827;\n                this.match(SolidityParser.T__14);\n                this.state = 828;\n                this.assemblyExpression();\n                this.state = 833;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n            }\n            this.state = 834;\n            this.match(SolidityParser.T__21);\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction AssemblyLocalDefinitionContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_assemblyLocalDefinition;\n    return this;\n}\n\nAssemblyLocalDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nAssemblyLocalDefinitionContext.prototype.constructor = AssemblyLocalDefinitionContext;\n\nAssemblyLocalDefinitionContext.prototype.assemblyIdentifierOrList = function () {\n    return this.getTypedRuleContext(AssemblyIdentifierOrListContext, 0);\n};\n\nAssemblyLocalDefinitionContext.prototype.assemblyExpression = function () {\n    return this.getTypedRuleContext(AssemblyExpressionContext, 0);\n};\n\nAssemblyLocalDefinitionContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterAssemblyLocalDefinition(this);\n    }\n};\n\nAssemblyLocalDefinitionContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitAssemblyLocalDefinition(this);\n    }\n};\n\nSolidityParser.AssemblyLocalDefinitionContext = AssemblyLocalDefinitionContext;\n\nSolidityParser.prototype.assemblyLocalDefinition = function () {\n\n    var localctx = new AssemblyLocalDefinitionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 132, SolidityParser.RULE_assemblyLocalDefinition);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 837;\n        this.match(SolidityParser.T__83);\n        this.state = 838;\n        this.assemblyIdentifierOrList();\n        this.state = 841;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === SolidityParser.T__84) {\n            this.state = 839;\n            this.match(SolidityParser.T__84);\n            this.state = 840;\n            this.assemblyExpression();\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction AssemblyAssignmentContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_assemblyAssignment;\n    return this;\n}\n\nAssemblyAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nAssemblyAssignmentContext.prototype.constructor = AssemblyAssignmentContext;\n\nAssemblyAssignmentContext.prototype.assemblyIdentifierOrList = function () {\n    return this.getTypedRuleContext(AssemblyIdentifierOrListContext, 0);\n};\n\nAssemblyAssignmentContext.prototype.assemblyExpression = function () {\n    return this.getTypedRuleContext(AssemblyExpressionContext, 0);\n};\n\nAssemblyAssignmentContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterAssemblyAssignment(this);\n    }\n};\n\nAssemblyAssignmentContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitAssemblyAssignment(this);\n    }\n};\n\nSolidityParser.AssemblyAssignmentContext = AssemblyAssignmentContext;\n\nSolidityParser.prototype.assemblyAssignment = function () {\n\n    var localctx = new AssemblyAssignmentContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 134, SolidityParser.RULE_assemblyAssignment);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 843;\n        this.assemblyIdentifierOrList();\n        this.state = 844;\n        this.match(SolidityParser.T__84);\n        this.state = 845;\n        this.assemblyExpression();\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction AssemblyIdentifierOrListContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_assemblyIdentifierOrList;\n    return this;\n}\n\nAssemblyIdentifierOrListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nAssemblyIdentifierOrListContext.prototype.constructor = AssemblyIdentifierOrListContext;\n\nAssemblyIdentifierOrListContext.prototype.identifier = function () {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n};\n\nAssemblyIdentifierOrListContext.prototype.assemblyIdentifierList = function () {\n    return this.getTypedRuleContext(AssemblyIdentifierListContext, 0);\n};\n\nAssemblyIdentifierOrListContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterAssemblyIdentifierOrList(this);\n    }\n};\n\nAssemblyIdentifierOrListContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitAssemblyIdentifierOrList(this);\n    }\n};\n\nSolidityParser.AssemblyIdentifierOrListContext = AssemblyIdentifierOrListContext;\n\nSolidityParser.prototype.assemblyIdentifierOrList = function () {\n\n    var localctx = new AssemblyIdentifierOrListContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 136, SolidityParser.RULE_assemblyIdentifierOrList);\n    try {\n        this.state = 852;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n            case SolidityParser.T__12:\n            case SolidityParser.T__39:\n            case SolidityParser.Identifier:\n                this.enterOuterAlt(localctx, 1);\n                this.state = 847;\n                this.identifier();\n                break;\n            case SolidityParser.T__20:\n                this.enterOuterAlt(localctx, 2);\n                this.state = 848;\n                this.match(SolidityParser.T__20);\n                this.state = 849;\n                this.assemblyIdentifierList();\n                this.state = 850;\n                this.match(SolidityParser.T__21);\n                break;\n            default:\n                throw new antlr4.error.NoViableAltException(this);\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction AssemblyIdentifierListContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_assemblyIdentifierList;\n    return this;\n}\n\nAssemblyIdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nAssemblyIdentifierListContext.prototype.constructor = AssemblyIdentifierListContext;\n\nAssemblyIdentifierListContext.prototype.identifier = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(IdentifierContext);\n    } else {\n        return this.getTypedRuleContext(IdentifierContext, i);\n    }\n};\n\nAssemblyIdentifierListContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterAssemblyIdentifierList(this);\n    }\n};\n\nAssemblyIdentifierListContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitAssemblyIdentifierList(this);\n    }\n};\n\nSolidityParser.AssemblyIdentifierListContext = AssemblyIdentifierListContext;\n\nSolidityParser.prototype.assemblyIdentifierList = function () {\n\n    var localctx = new AssemblyIdentifierListContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 138, SolidityParser.RULE_assemblyIdentifierList);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 854;\n        this.identifier();\n        this.state = 859;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while (_la === SolidityParser.T__14) {\n            this.state = 855;\n            this.match(SolidityParser.T__14);\n            this.state = 856;\n            this.identifier();\n            this.state = 861;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction AssemblyStackAssignmentContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_assemblyStackAssignment;\n    return this;\n}\n\nAssemblyStackAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nAssemblyStackAssignmentContext.prototype.constructor = AssemblyStackAssignmentContext;\n\nAssemblyStackAssignmentContext.prototype.identifier = function () {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n};\n\nAssemblyStackAssignmentContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterAssemblyStackAssignment(this);\n    }\n};\n\nAssemblyStackAssignmentContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitAssemblyStackAssignment(this);\n    }\n};\n\nSolidityParser.AssemblyStackAssignmentContext = AssemblyStackAssignmentContext;\n\nSolidityParser.prototype.assemblyStackAssignment = function () {\n\n    var localctx = new AssemblyStackAssignmentContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 140, SolidityParser.RULE_assemblyStackAssignment);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 862;\n        this.match(SolidityParser.T__85);\n        this.state = 863;\n        this.identifier();\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction LabelDefinitionContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_labelDefinition;\n    return this;\n}\n\nLabelDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nLabelDefinitionContext.prototype.constructor = LabelDefinitionContext;\n\nLabelDefinitionContext.prototype.identifier = function () {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n};\n\nLabelDefinitionContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterLabelDefinition(this);\n    }\n};\n\nLabelDefinitionContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitLabelDefinition(this);\n    }\n};\n\nSolidityParser.LabelDefinitionContext = LabelDefinitionContext;\n\nSolidityParser.prototype.labelDefinition = function () {\n\n    var localctx = new LabelDefinitionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 142, SolidityParser.RULE_labelDefinition);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 865;\n        this.identifier();\n        this.state = 866;\n        this.match(SolidityParser.T__72);\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction AssemblySwitchContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_assemblySwitch;\n    return this;\n}\n\nAssemblySwitchContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nAssemblySwitchContext.prototype.constructor = AssemblySwitchContext;\n\nAssemblySwitchContext.prototype.assemblyExpression = function () {\n    return this.getTypedRuleContext(AssemblyExpressionContext, 0);\n};\n\nAssemblySwitchContext.prototype.assemblyCase = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(AssemblyCaseContext);\n    } else {\n        return this.getTypedRuleContext(AssemblyCaseContext, i);\n    }\n};\n\nAssemblySwitchContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterAssemblySwitch(this);\n    }\n};\n\nAssemblySwitchContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitAssemblySwitch(this);\n    }\n};\n\nSolidityParser.AssemblySwitchContext = AssemblySwitchContext;\n\nSolidityParser.prototype.assemblySwitch = function () {\n\n    var localctx = new AssemblySwitchContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 144, SolidityParser.RULE_assemblySwitch);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 868;\n        this.match(SolidityParser.T__86);\n        this.state = 869;\n        this.assemblyExpression();\n        this.state = 873;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while (_la === SolidityParser.T__87 || _la === SolidityParser.T__88) {\n            this.state = 870;\n            this.assemblyCase();\n            this.state = 875;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction AssemblyCaseContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_assemblyCase;\n    return this;\n}\n\nAssemblyCaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nAssemblyCaseContext.prototype.constructor = AssemblyCaseContext;\n\nAssemblyCaseContext.prototype.assemblyLiteral = function () {\n    return this.getTypedRuleContext(AssemblyLiteralContext, 0);\n};\n\nAssemblyCaseContext.prototype.assemblyBlock = function () {\n    return this.getTypedRuleContext(AssemblyBlockContext, 0);\n};\n\nAssemblyCaseContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterAssemblyCase(this);\n    }\n};\n\nAssemblyCaseContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitAssemblyCase(this);\n    }\n};\n\nSolidityParser.AssemblyCaseContext = AssemblyCaseContext;\n\nSolidityParser.prototype.assemblyCase = function () {\n\n    var localctx = new AssemblyCaseContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 146, SolidityParser.RULE_assemblyCase);\n    try {\n        this.state = 882;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n            case SolidityParser.T__87:\n                this.enterOuterAlt(localctx, 1);\n                this.state = 876;\n                this.match(SolidityParser.T__87);\n                this.state = 877;\n                this.assemblyLiteral();\n                this.state = 878;\n                this.assemblyBlock();\n                break;\n            case SolidityParser.T__88:\n                this.enterOuterAlt(localctx, 2);\n                this.state = 880;\n                this.match(SolidityParser.T__88);\n                this.state = 881;\n                this.assemblyBlock();\n                break;\n            default:\n                throw new antlr4.error.NoViableAltException(this);\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction AssemblyFunctionDefinitionContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_assemblyFunctionDefinition;\n    return this;\n}\n\nAssemblyFunctionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nAssemblyFunctionDefinitionContext.prototype.constructor = AssemblyFunctionDefinitionContext;\n\nAssemblyFunctionDefinitionContext.prototype.identifier = function () {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n};\n\nAssemblyFunctionDefinitionContext.prototype.assemblyBlock = function () {\n    return this.getTypedRuleContext(AssemblyBlockContext, 0);\n};\n\nAssemblyFunctionDefinitionContext.prototype.assemblyIdentifierList = function () {\n    return this.getTypedRuleContext(AssemblyIdentifierListContext, 0);\n};\n\nAssemblyFunctionDefinitionContext.prototype.assemblyFunctionReturns = function () {\n    return this.getTypedRuleContext(AssemblyFunctionReturnsContext, 0);\n};\n\nAssemblyFunctionDefinitionContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterAssemblyFunctionDefinition(this);\n    }\n};\n\nAssemblyFunctionDefinitionContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitAssemblyFunctionDefinition(this);\n    }\n};\n\nSolidityParser.AssemblyFunctionDefinitionContext = AssemblyFunctionDefinitionContext;\n\nSolidityParser.prototype.assemblyFunctionDefinition = function () {\n\n    var localctx = new AssemblyFunctionDefinitionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 148, SolidityParser.RULE_assemblyFunctionDefinition);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 884;\n        this.match(SolidityParser.T__27);\n        this.state = 885;\n        this.identifier();\n        this.state = 886;\n        this.match(SolidityParser.T__20);\n        this.state = 888;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || _la === SolidityParser.Identifier) {\n            this.state = 887;\n            this.assemblyIdentifierList();\n        }\n\n        this.state = 890;\n        this.match(SolidityParser.T__21);\n        this.state = 892;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === SolidityParser.T__89) {\n            this.state = 891;\n            this.assemblyFunctionReturns();\n        }\n\n        this.state = 894;\n        this.assemblyBlock();\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction AssemblyFunctionReturnsContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_assemblyFunctionReturns;\n    return this;\n}\n\nAssemblyFunctionReturnsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nAssemblyFunctionReturnsContext.prototype.constructor = AssemblyFunctionReturnsContext;\n\nAssemblyFunctionReturnsContext.prototype.assemblyIdentifierList = function () {\n    return this.getTypedRuleContext(AssemblyIdentifierListContext, 0);\n};\n\nAssemblyFunctionReturnsContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterAssemblyFunctionReturns(this);\n    }\n};\n\nAssemblyFunctionReturnsContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitAssemblyFunctionReturns(this);\n    }\n};\n\nSolidityParser.AssemblyFunctionReturnsContext = AssemblyFunctionReturnsContext;\n\nSolidityParser.prototype.assemblyFunctionReturns = function () {\n\n    var localctx = new AssemblyFunctionReturnsContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 150, SolidityParser.RULE_assemblyFunctionReturns);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 896;\n        this.match(SolidityParser.T__89);\n        this.state = 897;\n        this.assemblyIdentifierList();\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction AssemblyForContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_assemblyFor;\n    return this;\n}\n\nAssemblyForContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nAssemblyForContext.prototype.constructor = AssemblyForContext;\n\nAssemblyForContext.prototype.assemblyExpression = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(AssemblyExpressionContext);\n    } else {\n        return this.getTypedRuleContext(AssemblyExpressionContext, i);\n    }\n};\n\nAssemblyForContext.prototype.assemblyBlock = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(AssemblyBlockContext);\n    } else {\n        return this.getTypedRuleContext(AssemblyBlockContext, i);\n    }\n};\n\nAssemblyForContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterAssemblyFor(this);\n    }\n};\n\nAssemblyForContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitAssemblyFor(this);\n    }\n};\n\nSolidityParser.AssemblyForContext = AssemblyForContext;\n\nSolidityParser.prototype.assemblyFor = function () {\n\n    var localctx = new AssemblyForContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 152, SolidityParser.RULE_assemblyFor);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 899;\n        this.match(SolidityParser.T__23);\n        this.state = 902;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n            case SolidityParser.T__13:\n                this.state = 900;\n                this.assemblyBlock();\n                break;\n            case SolidityParser.T__12:\n            case SolidityParser.T__33:\n            case SolidityParser.T__39:\n            case SolidityParser.T__45:\n            case SolidityParser.T__51:\n            case SolidityParser.DecimalNumber:\n            case SolidityParser.HexNumber:\n            case SolidityParser.HexLiteral:\n            case SolidityParser.Identifier:\n            case SolidityParser.StringLiteral:\n                this.state = 901;\n                this.assemblyExpression();\n                break;\n            default:\n                throw new antlr4.error.NoViableAltException(this);\n        }\n        this.state = 904;\n        this.assemblyExpression();\n        this.state = 907;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n            case SolidityParser.T__13:\n                this.state = 905;\n                this.assemblyBlock();\n                break;\n            case SolidityParser.T__12:\n            case SolidityParser.T__33:\n            case SolidityParser.T__39:\n            case SolidityParser.T__45:\n            case SolidityParser.T__51:\n            case SolidityParser.DecimalNumber:\n            case SolidityParser.HexNumber:\n            case SolidityParser.HexLiteral:\n            case SolidityParser.Identifier:\n            case SolidityParser.StringLiteral:\n                this.state = 906;\n                this.assemblyExpression();\n                break;\n            default:\n                throw new antlr4.error.NoViableAltException(this);\n        }\n        this.state = 909;\n        this.assemblyBlock();\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction AssemblyIfContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_assemblyIf;\n    return this;\n}\n\nAssemblyIfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nAssemblyIfContext.prototype.constructor = AssemblyIfContext;\n\nAssemblyIfContext.prototype.assemblyExpression = function () {\n    return this.getTypedRuleContext(AssemblyExpressionContext, 0);\n};\n\nAssemblyIfContext.prototype.assemblyBlock = function () {\n    return this.getTypedRuleContext(AssemblyBlockContext, 0);\n};\n\nAssemblyIfContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterAssemblyIf(this);\n    }\n};\n\nAssemblyIfContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitAssemblyIf(this);\n    }\n};\n\nSolidityParser.AssemblyIfContext = AssemblyIfContext;\n\nSolidityParser.prototype.assemblyIf = function () {\n\n    var localctx = new AssemblyIfContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 154, SolidityParser.RULE_assemblyIf);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 911;\n        this.match(SolidityParser.T__40);\n        this.state = 912;\n        this.assemblyExpression();\n        this.state = 913;\n        this.assemblyBlock();\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction AssemblyLiteralContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_assemblyLiteral;\n    return this;\n}\n\nAssemblyLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nAssemblyLiteralContext.prototype.constructor = AssemblyLiteralContext;\n\nAssemblyLiteralContext.prototype.StringLiteral = function () {\n    return this.getToken(SolidityParser.StringLiteral, 0);\n};\n\nAssemblyLiteralContext.prototype.DecimalNumber = function () {\n    return this.getToken(SolidityParser.DecimalNumber, 0);\n};\n\nAssemblyLiteralContext.prototype.HexNumber = function () {\n    return this.getToken(SolidityParser.HexNumber, 0);\n};\n\nAssemblyLiteralContext.prototype.HexLiteral = function () {\n    return this.getToken(SolidityParser.HexLiteral, 0);\n};\n\nAssemblyLiteralContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterAssemblyLiteral(this);\n    }\n};\n\nAssemblyLiteralContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitAssemblyLiteral(this);\n    }\n};\n\nSolidityParser.AssemblyLiteralContext = AssemblyLiteralContext;\n\nSolidityParser.prototype.assemblyLiteral = function () {\n\n    var localctx = new AssemblyLiteralContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 156, SolidityParser.RULE_assemblyLiteral);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 915;\n        _la = this._input.LA(1);\n        if (!((_la - 98 & ~0x1f) == 0 && (1 << _la - 98 & (1 << SolidityParser.DecimalNumber - 98 | 1 << SolidityParser.HexNumber - 98 | 1 << SolidityParser.HexLiteral - 98 | 1 << SolidityParser.StringLiteral - 98)) !== 0)) {\n            this._errHandler.recoverInline(this);\n        } else {\n            this._errHandler.reportMatch(this);\n            this.consume();\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction SubAssemblyContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_subAssembly;\n    return this;\n}\n\nSubAssemblyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nSubAssemblyContext.prototype.constructor = SubAssemblyContext;\n\nSubAssemblyContext.prototype.identifier = function () {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n};\n\nSubAssemblyContext.prototype.assemblyBlock = function () {\n    return this.getTypedRuleContext(AssemblyBlockContext, 0);\n};\n\nSubAssemblyContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterSubAssembly(this);\n    }\n};\n\nSubAssemblyContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitSubAssembly(this);\n    }\n};\n\nSolidityParser.SubAssemblyContext = SubAssemblyContext;\n\nSolidityParser.prototype.subAssembly = function () {\n\n    var localctx = new SubAssemblyContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 158, SolidityParser.RULE_subAssembly);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 917;\n        this.match(SolidityParser.T__43);\n        this.state = 918;\n        this.identifier();\n        this.state = 919;\n        this.assemblyBlock();\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction TupleExpressionContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_tupleExpression;\n    return this;\n}\n\nTupleExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nTupleExpressionContext.prototype.constructor = TupleExpressionContext;\n\nTupleExpressionContext.prototype.expression = function (i) {\n    if (i === undefined) {\n        i = null;\n    }\n    if (i === null) {\n        return this.getTypedRuleContexts(ExpressionContext);\n    } else {\n        return this.getTypedRuleContext(ExpressionContext, i);\n    }\n};\n\nTupleExpressionContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterTupleExpression(this);\n    }\n};\n\nTupleExpressionContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitTupleExpression(this);\n    }\n};\n\nSolidityParser.TupleExpressionContext = TupleExpressionContext;\n\nSolidityParser.prototype.tupleExpression = function () {\n\n    var localctx = new TupleExpressionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 160, SolidityParser.RULE_tupleExpression);\n    var _la = 0; // Token type\n    try {\n        this.state = 947;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n            case SolidityParser.T__20:\n                this.enterOuterAlt(localctx, 1);\n                this.state = 921;\n                this.match(SolidityParser.T__20);\n\n                this.state = 923;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n                if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__20)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__48 - 32 | 1 << SolidityParser.T__49 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__57 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32)) !== 0 || (_la - 91 & ~0x1f) == 0 && (1 << _la - 91 & (1 << SolidityParser.Int - 91 | 1 << SolidityParser.Uint - 91 | 1 << SolidityParser.Byte - 91 | 1 << SolidityParser.Fixed - 91 | 1 << SolidityParser.Ufixed - 91 | 1 << SolidityParser.BooleanLiteral - 91 | 1 << SolidityParser.DecimalNumber - 91 | 1 << SolidityParser.HexNumber - 91 | 1 << SolidityParser.HexLiteral - 91 | 1 << SolidityParser.TypeKeyword - 91 | 1 << SolidityParser.Identifier - 91 | 1 << SolidityParser.StringLiteral - 91)) !== 0) {\n                    this.state = 922;\n                    this.expression(0);\n                }\n\n                this.state = 931;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n                while (_la === SolidityParser.T__14) {\n                    this.state = 925;\n                    this.match(SolidityParser.T__14);\n                    this.state = 927;\n                    this._errHandler.sync(this);\n                    _la = this._input.LA(1);\n                    if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__20)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__48 - 32 | 1 << SolidityParser.T__49 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__57 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32)) !== 0 || (_la - 91 & ~0x1f) == 0 && (1 << _la - 91 & (1 << SolidityParser.Int - 91 | 1 << SolidityParser.Uint - 91 | 1 << SolidityParser.Byte - 91 | 1 << SolidityParser.Fixed - 91 | 1 << SolidityParser.Ufixed - 91 | 1 << SolidityParser.BooleanLiteral - 91 | 1 << SolidityParser.DecimalNumber - 91 | 1 << SolidityParser.HexNumber - 91 | 1 << SolidityParser.HexLiteral - 91 | 1 << SolidityParser.TypeKeyword - 91 | 1 << SolidityParser.Identifier - 91 | 1 << SolidityParser.StringLiteral - 91)) !== 0) {\n                        this.state = 926;\n                        this.expression(0);\n                    }\n\n                    this.state = 933;\n                    this._errHandler.sync(this);\n                    _la = this._input.LA(1);\n                }\n                this.state = 934;\n                this.match(SolidityParser.T__21);\n                break;\n            case SolidityParser.T__31:\n                this.enterOuterAlt(localctx, 2);\n                this.state = 935;\n                this.match(SolidityParser.T__31);\n                this.state = 944;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n                if ((_la & ~0x1f) == 0 && (1 << _la & (1 << SolidityParser.T__3 | 1 << SolidityParser.T__12 | 1 << SolidityParser.T__20)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << SolidityParser.T__31 - 32 | 1 << SolidityParser.T__33 - 32 | 1 << SolidityParser.T__39 - 32 | 1 << SolidityParser.T__48 - 32 | 1 << SolidityParser.T__49 - 32 | 1 << SolidityParser.T__50 - 32 | 1 << SolidityParser.T__51 - 32 | 1 << SolidityParser.T__52 - 32 | 1 << SolidityParser.T__53 - 32 | 1 << SolidityParser.T__54 - 32 | 1 << SolidityParser.T__55 - 32 | 1 << SolidityParser.T__56 - 32 | 1 << SolidityParser.T__57 - 32 | 1 << SolidityParser.T__58 - 32 | 1 << SolidityParser.T__59 - 32)) !== 0 || (_la - 91 & ~0x1f) == 0 && (1 << _la - 91 & (1 << SolidityParser.Int - 91 | 1 << SolidityParser.Uint - 91 | 1 << SolidityParser.Byte - 91 | 1 << SolidityParser.Fixed - 91 | 1 << SolidityParser.Ufixed - 91 | 1 << SolidityParser.BooleanLiteral - 91 | 1 << SolidityParser.DecimalNumber - 91 | 1 << SolidityParser.HexNumber - 91 | 1 << SolidityParser.HexLiteral - 91 | 1 << SolidityParser.TypeKeyword - 91 | 1 << SolidityParser.Identifier - 91 | 1 << SolidityParser.StringLiteral - 91)) !== 0) {\n                    this.state = 936;\n                    this.expression(0);\n                    this.state = 941;\n                    this._errHandler.sync(this);\n                    _la = this._input.LA(1);\n                    while (_la === SolidityParser.T__14) {\n                        this.state = 937;\n                        this.match(SolidityParser.T__14);\n                        this.state = 938;\n                        this.expression(0);\n                        this.state = 943;\n                        this._errHandler.sync(this);\n                        _la = this._input.LA(1);\n                    }\n                }\n\n                this.state = 946;\n                this.match(SolidityParser.T__32);\n                break;\n            default:\n                throw new antlr4.error.NoViableAltException(this);\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction ElementaryTypeNameExpressionContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_elementaryTypeNameExpression;\n    return this;\n}\n\nElementaryTypeNameExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nElementaryTypeNameExpressionContext.prototype.constructor = ElementaryTypeNameExpressionContext;\n\nElementaryTypeNameExpressionContext.prototype.elementaryTypeName = function () {\n    return this.getTypedRuleContext(ElementaryTypeNameContext, 0);\n};\n\nElementaryTypeNameExpressionContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterElementaryTypeNameExpression(this);\n    }\n};\n\nElementaryTypeNameExpressionContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitElementaryTypeNameExpression(this);\n    }\n};\n\nSolidityParser.ElementaryTypeNameExpressionContext = ElementaryTypeNameExpressionContext;\n\nSolidityParser.prototype.elementaryTypeNameExpression = function () {\n\n    var localctx = new ElementaryTypeNameExpressionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 162, SolidityParser.RULE_elementaryTypeNameExpression);\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 949;\n        this.elementaryTypeName();\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction NumberLiteralContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_numberLiteral;\n    return this;\n}\n\nNumberLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nNumberLiteralContext.prototype.constructor = NumberLiteralContext;\n\nNumberLiteralContext.prototype.DecimalNumber = function () {\n    return this.getToken(SolidityParser.DecimalNumber, 0);\n};\n\nNumberLiteralContext.prototype.HexNumber = function () {\n    return this.getToken(SolidityParser.HexNumber, 0);\n};\n\nNumberLiteralContext.prototype.NumberUnit = function () {\n    return this.getToken(SolidityParser.NumberUnit, 0);\n};\n\nNumberLiteralContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterNumberLiteral(this);\n    }\n};\n\nNumberLiteralContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitNumberLiteral(this);\n    }\n};\n\nSolidityParser.NumberLiteralContext = NumberLiteralContext;\n\nSolidityParser.prototype.numberLiteral = function () {\n\n    var localctx = new NumberLiteralContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 164, SolidityParser.RULE_numberLiteral);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 951;\n        _la = this._input.LA(1);\n        if (!(_la === SolidityParser.DecimalNumber || _la === SolidityParser.HexNumber)) {\n            this._errHandler.recoverInline(this);\n        } else {\n            this._errHandler.reportMatch(this);\n            this.consume();\n        }\n        this.state = 953;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 103, this._ctx);\n        if (la_ === 1) {\n            this.state = 952;\n            this.match(SolidityParser.NumberUnit);\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nfunction IdentifierContext(parser, parent, invokingState) {\n    if (parent === undefined) {\n        parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n        invokingState = -1;\n    }\n    antlr4.ParserRuleContext.call(this, parent, invokingState);\n    this.parser = parser;\n    this.ruleIndex = SolidityParser.RULE_identifier;\n    return this;\n}\n\nIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\nIdentifierContext.prototype.constructor = IdentifierContext;\n\nIdentifierContext.prototype.Identifier = function () {\n    return this.getToken(SolidityParser.Identifier, 0);\n};\n\nIdentifierContext.prototype.enterRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.enterIdentifier(this);\n    }\n};\n\nIdentifierContext.prototype.exitRule = function (listener) {\n    if (listener instanceof SolidityListener) {\n        listener.exitIdentifier(this);\n    }\n};\n\nSolidityParser.IdentifierContext = IdentifierContext;\n\nSolidityParser.prototype.identifier = function () {\n\n    var localctx = new IdentifierContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 166, SolidityParser.RULE_identifier);\n    var _la = 0; // Token type\n    try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 955;\n        _la = this._input.LA(1);\n        if (!(_la === SolidityParser.T__12 || _la === SolidityParser.T__39 || _la === SolidityParser.Identifier)) {\n            this._errHandler.recoverInline(this);\n        } else {\n            this._errHandler.reportMatch(this);\n            this.consume();\n        }\n    } catch (re) {\n        if (re instanceof antlr4.error.RecognitionException) {\n            localctx.exception = re;\n            this._errHandler.reportError(this, re);\n            this._errHandler.recover(this, re);\n        } else {\n            throw re;\n        }\n    } finally {\n        this.exitRule();\n    }\n    return localctx;\n};\n\nSolidityParser.prototype.sempred = function (localctx, ruleIndex, predIndex) {\n    switch (ruleIndex) {\n        case 31:\n            return this.typeName_sempred(localctx, predIndex);\n        case 55:\n            return this.expression_sempred(localctx, predIndex);\n        default:\n            throw \"No predicate with index:\" + ruleIndex;\n    }\n};\n\nSolidityParser.prototype.typeName_sempred = function (localctx, predIndex) {\n    switch (predIndex) {\n        case 0:\n            return this.precpred(this._ctx, 3);\n        default:\n            throw \"No predicate with index:\" + predIndex;\n    }\n};\n\nSolidityParser.prototype.expression_sempred = function (localctx, predIndex) {\n    switch (predIndex) {\n        case 1:\n            return this.precpred(this._ctx, 14);\n        case 2:\n            return this.precpred(this._ctx, 13);\n        case 3:\n            return this.precpred(this._ctx, 12);\n        case 4:\n            return this.precpred(this._ctx, 11);\n        case 5:\n            return this.precpred(this._ctx, 10);\n        case 6:\n            return this.precpred(this._ctx, 9);\n        case 7:\n            return this.precpred(this._ctx, 8);\n        case 8:\n            return this.precpred(this._ctx, 7);\n        case 9:\n            return this.precpred(this._ctx, 6);\n        case 10:\n            return this.precpred(this._ctx, 5);\n        case 11:\n            return this.precpred(this._ctx, 4);\n        case 12:\n            return this.precpred(this._ctx, 3);\n        case 13:\n            return this.precpred(this._ctx, 2);\n        case 14:\n            return this.precpred(this._ctx, 25);\n        case 15:\n            return this.precpred(this._ctx, 23);\n        case 16:\n            return this.precpred(this._ctx, 22);\n        case 17:\n            return this.precpred(this._ctx, 21);\n        default:\n            throw \"No predicate with index:\" + predIndex;\n    }\n};\n\nexports.SolidityParser = SolidityParser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/lib/SolidityParser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/solidity-parser-antlr/dist/tokens.js":
/*!***********************************************************!*\
  !*** ./node_modules/solidity-parser-antlr/dist/tokens.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar path = __webpack_require__(/*! path */ \"path\");\n\nvar TYPE_TOKENS = ['var', 'bool', 'address', 'string', 'Int', 'Uint', 'Byte', 'Fixed', 'UFixed'];\n\nfunction rsplit(str, value) {\n  var index = str.lastIndexOf(value);\n  return [str.substring(0, index), str.substring(index + 1, str.length)];\n}\n\nfunction normalizeTokenType(value) {\n  if (value.endsWith(\"'\")) {\n    value = value.substring(0, value.length - 1);\n  }\n  if (value.startsWith(\"'\")) {\n    value = value.substring(1, value.length);\n  }\n  return value;\n}\n\nfunction getTokenType(value) {\n  if (value === 'Identifier' || value === 'from') {\n    return 'Identifier';\n  } else if (value === 'TrueLiteral' || value === 'FalseLiteral') {\n    return 'Boolean';\n  } else if (value === 'VersionLiteral') {\n    return 'Version';\n  } else if (value === 'StringLiteral') {\n    return 'String';\n  } else if (TYPE_TOKENS.includes(value)) {\n    return 'Type';\n  } else if (value === 'NumberUnit') {\n    return 'Subdenomination';\n  } else if (value === 'DecimalNumber') {\n    return 'Numeric';\n  } else if (value === 'HexLiteral') {\n    return 'Hex';\n  } else if (value === 'ReservedKeyword') {\n    return 'Reserved';\n  } else if (/^\\W+$/.test(value)) {\n    return 'Punctuator';\n  } else {\n    return 'Keyword';\n  }\n}\n\nfunction getTokenTypeMap() {\n  var filePath = path.join(__dirname, '../lib/Solidity.tokens');\n\n  return fs.readFileSync(filePath).toString('utf-8').split('\\n').map(function (line) {\n    return rsplit(line, '=');\n  }).reduce(function (acum, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        value = _ref2[0],\n        key = _ref2[1];\n\n    acum[parseInt(key, 10)] = normalizeTokenType(value);\n    return acum;\n  }, {});\n}\n\nfunction buildTokenList(tokens, options) {\n  var tokenTypes = getTokenTypeMap();\n\n  return tokens.map(function (token) {\n    var type = getTokenType(tokenTypes[token.type]);\n    var node = { type: type, value: token.text };\n    if (options.range) {\n      node.range = [token.start, token.stop + 1];\n    }\n    if (options.loc) {\n      node.loc = {\n        start: { line: token.line, column: token.column },\n        end: { line: token.line, column: token.column + token.text.length }\n      };\n    }\n    return node;\n  });\n}\n\nexports.buildTokenList = buildTokenList;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvdG9rZW5zLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLG1DQUFtQyxpQ0FBaUMsZUFBZSxlQUFlLGdCQUFnQixvQkFBb0IsTUFBTSwwQ0FBMEMsK0JBQStCLGFBQWEscUJBQXFCLHVDQUF1QyxjQUFjLFdBQVcsWUFBWSxVQUFVLE1BQU0sMkNBQTJDLFVBQVUsc0JBQXNCLGVBQWUsMkJBQTJCLDBCQUEwQixjQUFjLDJDQUEyQyxnQ0FBZ0MsT0FBTyxtRkFBbUY7O0FBRXJwQixTQUFTLG1CQUFPLENBQUMsY0FBSTtBQUNyQixXQUFXLG1CQUFPLENBQUMsa0JBQU07O0FBRXpCOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUcsSUFBSTtBQUNQOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLHdDQUF3QztBQUN6RCxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBLHNCQUFzQiIsInNvdXJjZXMiOlsiL1VzZXJzL21hYy9mbG93cG9ydC9ub2RlX21vZHVsZXMvc29saWRpdHktcGFyc2VyLWFudGxyL2Rpc3QvdG9rZW5zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbnZhciBUWVBFX1RPS0VOUyA9IFsndmFyJywgJ2Jvb2wnLCAnYWRkcmVzcycsICdzdHJpbmcnLCAnSW50JywgJ1VpbnQnLCAnQnl0ZScsICdGaXhlZCcsICdVRml4ZWQnXTtcblxuZnVuY3Rpb24gcnNwbGl0KHN0ciwgdmFsdWUpIHtcbiAgdmFyIGluZGV4ID0gc3RyLmxhc3RJbmRleE9mKHZhbHVlKTtcbiAgcmV0dXJuIFtzdHIuc3Vic3RyaW5nKDAsIGluZGV4KSwgc3RyLnN1YnN0cmluZyhpbmRleCArIDEsIHN0ci5sZW5ndGgpXTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplVG9rZW5UeXBlKHZhbHVlKSB7XG4gIGlmICh2YWx1ZS5lbmRzV2l0aChcIidcIikpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygwLCB2YWx1ZS5sZW5ndGggLSAxKTtcbiAgfVxuICBpZiAodmFsdWUuc3RhcnRzV2l0aChcIidcIikpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygxLCB2YWx1ZS5sZW5ndGgpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0VG9rZW5UeXBlKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gJ0lkZW50aWZpZXInIHx8IHZhbHVlID09PSAnZnJvbScpIHtcbiAgICByZXR1cm4gJ0lkZW50aWZpZXInO1xuICB9IGVsc2UgaWYgKHZhbHVlID09PSAnVHJ1ZUxpdGVyYWwnIHx8IHZhbHVlID09PSAnRmFsc2VMaXRlcmFsJykge1xuICAgIHJldHVybiAnQm9vbGVhbic7XG4gIH0gZWxzZSBpZiAodmFsdWUgPT09ICdWZXJzaW9uTGl0ZXJhbCcpIHtcbiAgICByZXR1cm4gJ1ZlcnNpb24nO1xuICB9IGVsc2UgaWYgKHZhbHVlID09PSAnU3RyaW5nTGl0ZXJhbCcpIHtcbiAgICByZXR1cm4gJ1N0cmluZyc7XG4gIH0gZWxzZSBpZiAoVFlQRV9UT0tFTlMuaW5jbHVkZXModmFsdWUpKSB7XG4gICAgcmV0dXJuICdUeXBlJztcbiAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJ051bWJlclVuaXQnKSB7XG4gICAgcmV0dXJuICdTdWJkZW5vbWluYXRpb24nO1xuICB9IGVsc2UgaWYgKHZhbHVlID09PSAnRGVjaW1hbE51bWJlcicpIHtcbiAgICByZXR1cm4gJ051bWVyaWMnO1xuICB9IGVsc2UgaWYgKHZhbHVlID09PSAnSGV4TGl0ZXJhbCcpIHtcbiAgICByZXR1cm4gJ0hleCc7XG4gIH0gZWxzZSBpZiAodmFsdWUgPT09ICdSZXNlcnZlZEtleXdvcmQnKSB7XG4gICAgcmV0dXJuICdSZXNlcnZlZCc7XG4gIH0gZWxzZSBpZiAoL15cXFcrJC8udGVzdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gJ1B1bmN0dWF0b3InO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAnS2V5d29yZCc7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VG9rZW5UeXBlTWFwKCkge1xuICB2YXIgZmlsZVBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vbGliL1NvbGlkaXR5LnRva2VucycpO1xuXG4gIHJldHVybiBmcy5yZWFkRmlsZVN5bmMoZmlsZVBhdGgpLnRvU3RyaW5nKCd1dGYtOCcpLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24gKGxpbmUpIHtcbiAgICByZXR1cm4gcnNwbGl0KGxpbmUsICc9Jyk7XG4gIH0pLnJlZHVjZShmdW5jdGlvbiAoYWN1bSwgX3JlZikge1xuICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuICAgICAgICB2YWx1ZSA9IF9yZWYyWzBdLFxuICAgICAgICBrZXkgPSBfcmVmMlsxXTtcblxuICAgIGFjdW1bcGFyc2VJbnQoa2V5LCAxMCldID0gbm9ybWFsaXplVG9rZW5UeXBlKHZhbHVlKTtcbiAgICByZXR1cm4gYWN1bTtcbiAgfSwge30pO1xufVxuXG5mdW5jdGlvbiBidWlsZFRva2VuTGlzdCh0b2tlbnMsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VuVHlwZXMgPSBnZXRUb2tlblR5cGVNYXAoKTtcblxuICByZXR1cm4gdG9rZW5zLm1hcChmdW5jdGlvbiAodG9rZW4pIHtcbiAgICB2YXIgdHlwZSA9IGdldFRva2VuVHlwZSh0b2tlblR5cGVzW3Rva2VuLnR5cGVdKTtcbiAgICB2YXIgbm9kZSA9IHsgdHlwZTogdHlwZSwgdmFsdWU6IHRva2VuLnRleHQgfTtcbiAgICBpZiAob3B0aW9ucy5yYW5nZSkge1xuICAgICAgbm9kZS5yYW5nZSA9IFt0b2tlbi5zdGFydCwgdG9rZW4uc3RvcCArIDFdO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5sb2MpIHtcbiAgICAgIG5vZGUubG9jID0ge1xuICAgICAgICBzdGFydDogeyBsaW5lOiB0b2tlbi5saW5lLCBjb2x1bW46IHRva2VuLmNvbHVtbiB9LFxuICAgICAgICBlbmQ6IHsgbGluZTogdG9rZW4ubGluZSwgY29sdW1uOiB0b2tlbi5jb2x1bW4gKyB0b2tlbi50ZXh0Lmxlbmd0aCB9XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gbm9kZTtcbiAgfSk7XG59XG5cbmV4cG9ydHMuYnVpbGRUb2tlbkxpc3QgPSBidWlsZFRva2VuTGlzdDsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/solidity-parser-antlr/dist/tokens.js\n");

/***/ })

};
;